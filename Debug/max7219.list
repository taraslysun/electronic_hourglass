
max7219.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e30  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004fc8  08004fc8  00014fc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005010  08005010  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  08005010  08005010  00015010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005018  08005018  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005018  08005018  00015018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800501c  0800501c  0001501c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  08005020  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  200002a0  080052c0  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  080052c0  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cef7  00000000  00000000  00020313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c2e  00000000  00000000  0002d20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  0002ee38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b78  00000000  00000000  0002fcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016925  00000000  00000000  00030848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff2f  00000000  00000000  0004716d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090714  00000000  00000000  0005709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044c4  00000000  00000000  000e77b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000ebc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002a0 	.word	0x200002a0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004fb0 	.word	0x08004fb0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002a4 	.word	0x200002a4
 80001d4:	08004fb0 	.word	0x08004fb0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b970 	b.w	8000df8 <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	460d      	mov	r5, r1
 8000b38:	4604      	mov	r4, r0
 8000b3a:	460f      	mov	r7, r1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d14a      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b40:	428a      	cmp	r2, r1
 8000b42:	4694      	mov	ip, r2
 8000b44:	d965      	bls.n	8000c12 <__udivmoddi4+0xe2>
 8000b46:	fab2 f382 	clz	r3, r2
 8000b4a:	b143      	cbz	r3, 8000b5e <__udivmoddi4+0x2e>
 8000b4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b50:	f1c3 0220 	rsb	r2, r3, #32
 8000b54:	409f      	lsls	r7, r3
 8000b56:	fa20 f202 	lsr.w	r2, r0, r2
 8000b5a:	4317      	orrs	r7, r2
 8000b5c:	409c      	lsls	r4, r3
 8000b5e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b62:	fa1f f58c 	uxth.w	r5, ip
 8000b66:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b6a:	0c22      	lsrs	r2, r4, #16
 8000b6c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b70:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b74:	fb01 f005 	mul.w	r0, r1, r5
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	d90a      	bls.n	8000b92 <__udivmoddi4+0x62>
 8000b7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b80:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b84:	f080 811c 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000b88:	4290      	cmp	r0, r2
 8000b8a:	f240 8119 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000b8e:	3902      	subs	r1, #2
 8000b90:	4462      	add	r2, ip
 8000b92:	1a12      	subs	r2, r2, r0
 8000b94:	b2a4      	uxth	r4, r4
 8000b96:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b9a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ba2:	fb00 f505 	mul.w	r5, r0, r5
 8000ba6:	42a5      	cmp	r5, r4
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x90>
 8000baa:	eb1c 0404 	adds.w	r4, ip, r4
 8000bae:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb2:	f080 8107 	bcs.w	8000dc4 <__udivmoddi4+0x294>
 8000bb6:	42a5      	cmp	r5, r4
 8000bb8:	f240 8104 	bls.w	8000dc4 <__udivmoddi4+0x294>
 8000bbc:	4464      	add	r4, ip
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc4:	1b64      	subs	r4, r4, r5
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	b11e      	cbz	r6, 8000bd2 <__udivmoddi4+0xa2>
 8000bca:	40dc      	lsrs	r4, r3
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d908      	bls.n	8000bec <__udivmoddi4+0xbc>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80ed 	beq.w	8000dba <__udivmoddi4+0x28a>
 8000be0:	2100      	movs	r1, #0
 8000be2:	e9c6 0500 	strd	r0, r5, [r6]
 8000be6:	4608      	mov	r0, r1
 8000be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bec:	fab3 f183 	clz	r1, r3
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	d149      	bne.n	8000c88 <__udivmoddi4+0x158>
 8000bf4:	42ab      	cmp	r3, r5
 8000bf6:	d302      	bcc.n	8000bfe <__udivmoddi4+0xce>
 8000bf8:	4282      	cmp	r2, r0
 8000bfa:	f200 80f8 	bhi.w	8000dee <__udivmoddi4+0x2be>
 8000bfe:	1a84      	subs	r4, r0, r2
 8000c00:	eb65 0203 	sbc.w	r2, r5, r3
 8000c04:	2001      	movs	r0, #1
 8000c06:	4617      	mov	r7, r2
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	d0e2      	beq.n	8000bd2 <__udivmoddi4+0xa2>
 8000c0c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c10:	e7df      	b.n	8000bd2 <__udivmoddi4+0xa2>
 8000c12:	b902      	cbnz	r2, 8000c16 <__udivmoddi4+0xe6>
 8000c14:	deff      	udf	#255	; 0xff
 8000c16:	fab2 f382 	clz	r3, r2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f040 8090 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c20:	1a8a      	subs	r2, r1, r2
 8000c22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c30:	fb07 2015 	mls	r0, r7, r5, r2
 8000c34:	0c22      	lsrs	r2, r4, #16
 8000c36:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c3a:	fb0e f005 	mul.w	r0, lr, r5
 8000c3e:	4290      	cmp	r0, r2
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c42:	eb1c 0202 	adds.w	r2, ip, r2
 8000c46:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4290      	cmp	r0, r2
 8000c4e:	f200 80cb 	bhi.w	8000de8 <__udivmoddi4+0x2b8>
 8000c52:	4645      	mov	r5, r8
 8000c54:	1a12      	subs	r2, r2, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c5c:	fb07 2210 	mls	r2, r7, r0, r2
 8000c60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c64:	fb0e fe00 	mul.w	lr, lr, r0
 8000c68:	45a6      	cmp	lr, r4
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x14e>
 8000c6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c74:	d202      	bcs.n	8000c7c <__udivmoddi4+0x14c>
 8000c76:	45a6      	cmp	lr, r4
 8000c78:	f200 80bb 	bhi.w	8000df2 <__udivmoddi4+0x2c2>
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c86:	e79f      	b.n	8000bc8 <__udivmoddi4+0x98>
 8000c88:	f1c1 0720 	rsb	r7, r1, #32
 8000c8c:	408b      	lsls	r3, r1
 8000c8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c96:	fa05 f401 	lsl.w	r4, r5, r1
 8000c9a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c9e:	40fd      	lsrs	r5, r7
 8000ca0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca4:	4323      	orrs	r3, r4
 8000ca6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	fb09 5518 	mls	r5, r9, r8, r5
 8000cb2:	0c1c      	lsrs	r4, r3, #16
 8000cb4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cb8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cbc:	42a5      	cmp	r5, r4
 8000cbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc2:	fa00 f001 	lsl.w	r0, r0, r1
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd0:	f080 8088 	bcs.w	8000de4 <__udivmoddi4+0x2b4>
 8000cd4:	42a5      	cmp	r5, r4
 8000cd6:	f240 8085 	bls.w	8000de4 <__udivmoddi4+0x2b4>
 8000cda:	f1a8 0802 	sub.w	r8, r8, #2
 8000cde:	4464      	add	r4, ip
 8000ce0:	1b64      	subs	r4, r4, r5
 8000ce2:	b29d      	uxth	r5, r3
 8000ce4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cf0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d00:	d26c      	bcs.n	8000ddc <__udivmoddi4+0x2ac>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	d96a      	bls.n	8000ddc <__udivmoddi4+0x2ac>
 8000d06:	3b02      	subs	r3, #2
 8000d08:	4464      	add	r4, ip
 8000d0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d12:	eba4 040e 	sub.w	r4, r4, lr
 8000d16:	42ac      	cmp	r4, r5
 8000d18:	46c8      	mov	r8, r9
 8000d1a:	46ae      	mov	lr, r5
 8000d1c:	d356      	bcc.n	8000dcc <__udivmoddi4+0x29c>
 8000d1e:	d053      	beq.n	8000dc8 <__udivmoddi4+0x298>
 8000d20:	b156      	cbz	r6, 8000d38 <__udivmoddi4+0x208>
 8000d22:	ebb0 0208 	subs.w	r2, r0, r8
 8000d26:	eb64 040e 	sbc.w	r4, r4, lr
 8000d2a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2e:	40ca      	lsrs	r2, r1
 8000d30:	40cc      	lsrs	r4, r1
 8000d32:	4317      	orrs	r7, r2
 8000d34:	e9c6 7400 	strd	r7, r4, [r6]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d40:	f1c3 0120 	rsb	r1, r3, #32
 8000d44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d48:	fa20 f201 	lsr.w	r2, r0, r1
 8000d4c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d50:	409d      	lsls	r5, r3
 8000d52:	432a      	orrs	r2, r5
 8000d54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d60:	fb07 1510 	mls	r5, r7, r0, r1
 8000d64:	0c11      	lsrs	r1, r2, #16
 8000d66:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d6a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d6e:	428d      	cmp	r5, r1
 8000d70:	fa04 f403 	lsl.w	r4, r4, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x258>
 8000d76:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d7e:	d22f      	bcs.n	8000de0 <__udivmoddi4+0x2b0>
 8000d80:	428d      	cmp	r5, r1
 8000d82:	d92d      	bls.n	8000de0 <__udivmoddi4+0x2b0>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1b49      	subs	r1, r1, r5
 8000d8a:	b292      	uxth	r2, r2
 8000d8c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d90:	fb07 1115 	mls	r1, r7, r5, r1
 8000d94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d98:	fb05 f10e 	mul.w	r1, r5, lr
 8000d9c:	4291      	cmp	r1, r2
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x282>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da8:	d216      	bcs.n	8000dd8 <__udivmoddi4+0x2a8>
 8000daa:	4291      	cmp	r1, r2
 8000dac:	d914      	bls.n	8000dd8 <__udivmoddi4+0x2a8>
 8000dae:	3d02      	subs	r5, #2
 8000db0:	4462      	add	r2, ip
 8000db2:	1a52      	subs	r2, r2, r1
 8000db4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000db8:	e738      	b.n	8000c2c <__udivmoddi4+0xfc>
 8000dba:	4631      	mov	r1, r6
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	e708      	b.n	8000bd2 <__udivmoddi4+0xa2>
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e6e6      	b.n	8000b92 <__udivmoddi4+0x62>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	e6fb      	b.n	8000bc0 <__udivmoddi4+0x90>
 8000dc8:	4548      	cmp	r0, r9
 8000dca:	d2a9      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	e7a3      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd8:	4645      	mov	r5, r8
 8000dda:	e7ea      	b.n	8000db2 <__udivmoddi4+0x282>
 8000ddc:	462b      	mov	r3, r5
 8000dde:	e794      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000de0:	4640      	mov	r0, r8
 8000de2:	e7d1      	b.n	8000d88 <__udivmoddi4+0x258>
 8000de4:	46d0      	mov	r8, sl
 8000de6:	e77b      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de8:	3d02      	subs	r5, #2
 8000dea:	4462      	add	r2, ip
 8000dec:	e732      	b.n	8000c54 <__udivmoddi4+0x124>
 8000dee:	4608      	mov	r0, r1
 8000df0:	e70a      	b.n	8000c08 <__udivmoddi4+0xd8>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	e742      	b.n	8000c7e <__udivmoddi4+0x14e>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <I2CStartRestart>:

#define ACCELEROMETER_READ  0x33
#define ACCELEROMETER_WRITE 0x32

void I2CStartRestart()
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
	ACCESS(I2C1_CR1) |= (1 << 8);
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <I2CStartRestart+0x1c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <I2CStartRestart+0x1c>)
 8000e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40005400 	.word	0x40005400

08000e1c <I2CStop>:

void I2CStop()
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
	ACCESS(I2C1_CR1) |= (1 << 9);
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <I2CStop+0x1c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <I2CStop+0x1c>)
 8000e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40005400 	.word	0x40005400

08000e3c <I2CEnableAcknowledge>:

void I2CEnableAcknowledge()
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

	ACCESS(I2C1_CR1) |= (1 << 10);
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <I2CEnableAcknowledge+0x1c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <I2CEnableAcknowledge+0x1c>)
 8000e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40005400 	.word	0x40005400

08000e5c <I2CDisableAcknowledge>:

void I2CDisableAcknowledge()
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
	ACCESS(I2C1_CR1) &= ~(1 << 10);
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <I2CDisableAcknowledge+0x1c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <I2CDisableAcknowledge+0x1c>)
 8000e66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40005400 	.word	0x40005400

08000e7c <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(unsigned short address)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	80fb      	strh	r3, [r7, #6]
	while((ACCESS(I2C1_SR1) & 1) == 0);
 8000e86:	bf00      	nop
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <I2CSendSlaveAddress+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f9      	beq.n	8000e88 <I2CSendSlaveAddress+0xc>

	ACCESS(I2C1_DR) = address;
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <I2CSendSlaveAddress+0x44>)
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	6013      	str	r3, [r2, #0]

	while((ACCESS(I2C1_SR1) & (1 << 1)) == 0);
 8000e9a:	bf00      	nop
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <I2CSendSlaveAddress+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f9      	beq.n	8000e9c <I2CSendSlaveAddress+0x20>


	ACCESS(I2C1_SR1);
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <I2CSendSlaveAddress+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
	ACCESS(I2C1_SR2);
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <I2CSendSlaveAddress+0x48>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	40005414 	.word	0x40005414
 8000ec0:	40005410 	.word	0x40005410
 8000ec4:	40005418 	.word	0x40005418

08000ec8 <I2CSendRegister>:

void I2CSendRegister(unsigned short registerAddress)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
	// See page 499. We wait until the Tx data register is empty.
	while((ACCESS(I2C1_SR1) & (1 << 7)) == 0);
 8000ed2:	bf00      	nop
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <I2CSendRegister+0x3c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0f9      	beq.n	8000ed4 <I2CSendRegister+0xc>

	// Put the register address into the data register
	ACCESS(I2C1_DR) = registerAddress;
 8000ee0:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <I2CSendRegister+0x40>)
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	6013      	str	r3, [r2, #0]

	// Wait until the transfer is complete.
	while((ACCESS(I2C1_SR1) & (1 << 7)) == 0);
 8000ee6:	bf00      	nop
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <I2CSendRegister+0x3c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0f9      	beq.n	8000ee8 <I2CSendRegister+0x20>
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40005414 	.word	0x40005414
 8000f08:	40005410 	.word	0x40005410

08000f0c <I2CWaitIfBusy>:

void I2CWaitIfBusy()
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
	// See page 502 of the datasheet.  Bit 1 of SR2 will be set when the I2C bus is busy.
	while((ACCESS(I2C1_SR2) & (1 << 1)) == (1 << 1));
 8000f10:	bf00      	nop
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <I2CWaitIfBusy+0x20>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d0f9      	beq.n	8000f12 <I2CWaitIfBusy+0x6>
}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40005418 	.word	0x40005418

08000f30 <I2CWriteByte>:

void I2CWriteByte(unsigned char data)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	ACCESS(I2C1_DR) = data;
 8000f3a:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <I2CWriteByte+0x2c>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	6013      	str	r3, [r2, #0]

	while((ACCESS(I2C1_SR1) & (1 << 2)) == 0);
 8000f40:	bf00      	nop
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <I2CWriteByte+0x30>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f9      	beq.n	8000f42 <I2CWriteByte+0x12>
}
 8000f4e:	bf00      	nop
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	40005410 	.word	0x40005410
 8000f60:	40005414 	.word	0x40005414

08000f64 <I2CGetData>:

unsigned char I2CGetData()
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

	while((ACCESS(I2C1_SR1) & (1 << 6)) == 0) { }
 8000f68:	bf00      	nop
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <I2CGetData+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f9      	beq.n	8000f6a <I2CGetData+0x6>

	return ACCESS(I2C1_DR);
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <I2CGetData+0x28>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40005414 	.word	0x40005414
 8000f8c:	40005410 	.word	0x40005410

08000f90 <ReadFromAccelerometer>:

unsigned char ReadFromAccelerometer(unsigned short registerAddress)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]
	I2CWaitIfBusy();
 8000f9a:	f7ff ffb7 	bl	8000f0c <I2CWaitIfBusy>

	I2CEnableAcknowledge();
 8000f9e:	f7ff ff4d 	bl	8000e3c <I2CEnableAcknowledge>

	I2CStartRestart();
 8000fa2:	f7ff ff2b 	bl	8000dfc <I2CStartRestart>

	I2CSendSlaveAddress(ACCELEROMETER_WRITE);
 8000fa6:	2032      	movs	r0, #50	; 0x32
 8000fa8:	f7ff ff68 	bl	8000e7c <I2CSendSlaveAddress>

	I2CSendRegister(registerAddress);
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff8a 	bl	8000ec8 <I2CSendRegister>

	I2CStartRestart();
 8000fb4:	f7ff ff22 	bl	8000dfc <I2CStartRestart>

	I2CSendSlaveAddress(ACCELEROMETER_READ);
 8000fb8:	2033      	movs	r0, #51	; 0x33
 8000fba:	f7ff ff5f 	bl	8000e7c <I2CSendSlaveAddress>

	I2CDisableAcknowledge();
 8000fbe:	f7ff ff4d 	bl	8000e5c <I2CDisableAcknowledge>

	I2CStop();
 8000fc2:	f7ff ff2b 	bl	8000e1c <I2CStop>

	return I2CGetData();
 8000fc6:	f7ff ffcd 	bl	8000f64 <I2CGetData>
 8000fca:	4603      	mov	r3, r0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <WriteToAccelerometer>:

void WriteToAccelerometer(unsigned short registerAddress, unsigned char data)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	80fb      	strh	r3, [r7, #6]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	717b      	strb	r3, [r7, #5]
	I2CWaitIfBusy();
 8000fe4:	f7ff ff92 	bl	8000f0c <I2CWaitIfBusy>

	I2CStartRestart();
 8000fe8:	f7ff ff08 	bl	8000dfc <I2CStartRestart>

	I2CSendSlaveAddress(ACCELEROMETER_WRITE);
 8000fec:	2032      	movs	r0, #50	; 0x32
 8000fee:	f7ff ff45 	bl	8000e7c <I2CSendSlaveAddress>

	I2CSendRegister(registerAddress);
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff67 	bl	8000ec8 <I2CSendRegister>

	I2CWriteByte(data);
 8000ffa:	797b      	ldrb	r3, [r7, #5]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff97 	bl	8000f30 <I2CWriteByte>

	I2CStop();
 8001002:	f7ff ff0b 	bl	8000e1c <I2CStop>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <AccelerometerInit>:


void AccelerometerInit()
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

	ACCESS(RCC_AHB1ENR) |= (1 << 1);
 8001016:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <AccelerometerInit+0xd0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a31      	ldr	r2, [pc, #196]	; (80010e0 <AccelerometerInit+0xd0>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6013      	str	r3, [r2, #0]

	ACCESS(GPIOB_MODER) |= ((1 << 13) | (1 << 19));
 8001022:	4b30      	ldr	r3, [pc, #192]	; (80010e4 <AccelerometerInit+0xd4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a2f      	ldr	r2, [pc, #188]	; (80010e4 <AccelerometerInit+0xd4>)
 8001028:	f443 2302 	orr.w	r3, r3, #532480	; 0x82000
 800102c:	6013      	str	r3, [r2, #0]


	ACCESS(GPIOB_AFRL) |= (4 << 24);
 800102e:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <AccelerometerInit+0xd8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a2d      	ldr	r2, [pc, #180]	; (80010e8 <AccelerometerInit+0xd8>)
 8001034:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001038:	6013      	str	r3, [r2, #0]
	ACCESS(GPIOB_AFRH) |= (4 << 4);
 800103a:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <AccelerometerInit+0xdc>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a2b      	ldr	r2, [pc, #172]	; (80010ec <AccelerometerInit+0xdc>)
 8001040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001044:	6013      	str	r3, [r2, #0]

	ACCESS(GPIOB_OSPEEDR) |= ((2 << 12) | (2 << 18));
 8001046:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <AccelerometerInit+0xe0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a29      	ldr	r2, [pc, #164]	; (80010f0 <AccelerometerInit+0xe0>)
 800104c:	f443 2302 	orr.w	r3, r3, #532480	; 0x82000
 8001050:	6013      	str	r3, [r2, #0]

	ACCESS(RCC_APB1ENR) |= (1 << 21);
 8001052:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <AccelerometerInit+0xe4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <AccelerometerInit+0xe4>)
 8001058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800105c:	6013      	str	r3, [r2, #0]

	ACCESS(I2C1_CR2) &= ~(0x3F);
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <AccelerometerInit+0xe8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a25      	ldr	r2, [pc, #148]	; (80010f8 <AccelerometerInit+0xe8>)
 8001064:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001068:	6013      	str	r3, [r2, #0]
	ACCESS(I2C1_CR2) |= (0x02);
 800106a:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <AccelerometerInit+0xe8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a22      	ldr	r2, [pc, #136]	; (80010f8 <AccelerometerInit+0xe8>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	6013      	str	r3, [r2, #0]


	ACCESS(I2C1_CCR) &= ~(0xFFF);
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <AccelerometerInit+0xec>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a20      	ldr	r2, [pc, #128]	; (80010fc <AccelerometerInit+0xec>)
 800107c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001080:	f023 030f 	bic.w	r3, r3, #15
 8001084:	6013      	str	r3, [r2, #0]
	ACCESS(I2C1_CCR) |= 0x50;
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <AccelerometerInit+0xec>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <AccelerometerInit+0xec>)
 800108c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001090:	6013      	str	r3, [r2, #0]


	ACCESS(I2C1_TRISE) &= ~(0x3F);
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <AccelerometerInit+0xf0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a1a      	ldr	r2, [pc, #104]	; (8001100 <AccelerometerInit+0xf0>)
 8001098:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800109c:	6013      	str	r3, [r2, #0]
	ACCESS(I2C1_TRISE) |= 0x03;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <AccelerometerInit+0xf0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a17      	ldr	r2, [pc, #92]	; (8001100 <AccelerometerInit+0xf0>)
 80010a4:	f043 0303 	orr.w	r3, r3, #3
 80010a8:	6013      	str	r3, [r2, #0]


	ACCESS(I2C1_OAR1) |= ((0x21 << 1) | (1 << 14));
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <AccelerometerInit+0xf4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a15      	ldr	r2, [pc, #84]	; (8001104 <AccelerometerInit+0xf4>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80010b8:	6013      	str	r3, [r2, #0]

	ACCESS(I2C1_CR1) |= 1;
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <AccelerometerInit+0xf8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <AccelerometerInit+0xf8>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6013      	str	r3, [r2, #0]


	unsigned char accelerometerID = ReadFromAccelerometer(0xF);
 80010c6:	200f      	movs	r0, #15
 80010c8:	f7ff ff62 	bl	8000f90 <ReadFromAccelerometer>
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
	{
		// Error
	}


	WriteToAccelerometer(0x20, 0x47);
 80010d0:	2147      	movs	r1, #71	; 0x47
 80010d2:	2020      	movs	r0, #32
 80010d4:	f7ff ff7e 	bl	8000fd4 <WriteToAccelerometer>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023830 	.word	0x40023830
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40020420 	.word	0x40020420
 80010ec:	40020424 	.word	0x40020424
 80010f0:	40020408 	.word	0x40020408
 80010f4:	40023840 	.word	0x40023840
 80010f8:	40005404 	.word	0x40005404
 80010fc:	4000541c 	.word	0x4000541c
 8001100:	40005420 	.word	0x40005420
 8001104:	40005408 	.word	0x40005408
 8001108:	40005400 	.word	0x40005400
 800110c:	00000000 	.word	0x00000000

08001110 <renderGraints>:
void renderGraints();




void renderGraints(){
 8001110:	b5b0      	push	{r4, r5, r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
	for (int i = 0; i < 16; i++) {
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	e057      	b.n	80011cc <renderGraints+0xbc>
		int data = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
		for (int j = 0; j < 8; j++) {
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	e034      	b.n	8001190 <renderGraints+0x80>
			data += graints[i][j] * pow(2, j);
 8001126:	4930      	ldr	r1, [pc, #192]	; (80011e8 <renderGraints+0xd8>)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	00da      	lsls	r2, r3, #3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f9a1 	bl	800047c <__aeabi_i2d>
 800113a:	4604      	mov	r4, r0
 800113c:	460d      	mov	r5, r1
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff f99c 	bl	800047c <__aeabi_i2d>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	ec43 2b11 	vmov	d1, r2, r3
 800114c:	ed9f 0b24 	vldr	d0, [pc, #144]	; 80011e0 <renderGraints+0xd0>
 8001150:	f002 fff6 	bl	8004140 <pow>
 8001154:	ec53 2b10 	vmov	r2, r3, d0
 8001158:	4620      	mov	r0, r4
 800115a:	4629      	mov	r1, r5
 800115c:	f7ff f9f8 	bl	8000550 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4614      	mov	r4, r2
 8001166:	461d      	mov	r5, r3
 8001168:	68b8      	ldr	r0, [r7, #8]
 800116a:	f7ff f987 	bl	800047c <__aeabi_i2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f7ff f835 	bl	80001e4 <__adddf3>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff fc95 	bl	8000ab0 <__aeabi_d2iz>
 8001186:	4603      	mov	r3, r0
 8001188:	60bb      	str	r3, [r7, #8]
		for (int j = 0; j < 8; j++) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3301      	adds	r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b07      	cmp	r3, #7
 8001194:	ddc7      	ble.n	8001126 <renderGraints+0x16>
		}

		if (i < 8) max7219_Transmit(1, i+1, data);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b07      	cmp	r3, #7
 800119a:	dc0a      	bgt.n	80011b2 <renderGraints+0xa2>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	3301      	adds	r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	2001      	movs	r0, #1
 80011ac:	f000 f81e 	bl	80011ec <max7219_Transmit>
 80011b0:	e009      	b.n	80011c6 <renderGraints+0xb6>
		else max7219_Transmit(2, i+1-8, data);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	3b07      	subs	r3, #7
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	2002      	movs	r0, #2
 80011c2:	f000 f813 	bl	80011ec <max7219_Transmit>
	for (int i = 0; i < 16; i++) {
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3301      	adds	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b0f      	cmp	r3, #15
 80011d0:	dda4      	ble.n	800111c <renderGraints+0xc>
	}
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bdb0      	pop	{r4, r5, r7, pc}
 80011dc:	f3af 8000 	nop.w
 80011e0:	00000000 	.word	0x00000000
 80011e4:	40000000 	.word	0x40000000
 80011e8:	20000000 	.word	0x20000000

080011ec <max7219_Transmit>:

void max7219_Transmit(int num, uint8_t address, uint8_t data) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
 80011f8:	4613      	mov	r3, r2
 80011fa:	70bb      	strb	r3, [r7, #2]
    uint8_t tx_buffer[1] = {0};
 80011fc:	2300      	movs	r3, #0
 80011fe:	733b      	strb	r3, [r7, #12]
    if (num == 1) GPIOD->BSRR = (uint32_t)CS_Pin << 16;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d104      	bne.n	8001210 <max7219_Transmit+0x24>
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <max7219_Transmit+0x70>)
 8001208:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800120c:	619a      	str	r2, [r3, #24]
 800120e:	e003      	b.n	8001218 <max7219_Transmit+0x2c>
    else GPIOD->BSRR = (uint32_t)CS2_Pin << 16;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <max7219_Transmit+0x70>)
 8001212:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001216:	619a      	str	r2, [r3, #24]

    tx_buffer[0] = address;
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(&hspi1, tx_buffer, 1, 100);
 800121c:	f107 010c 	add.w	r1, r7, #12
 8001220:	2364      	movs	r3, #100	; 0x64
 8001222:	2201      	movs	r2, #1
 8001224:	480e      	ldr	r0, [pc, #56]	; (8001260 <max7219_Transmit+0x74>)
 8001226:	f001 fe5a 	bl	8002ede <HAL_SPI_Transmit>

    tx_buffer[0] = data;
 800122a:	78bb      	ldrb	r3, [r7, #2]
 800122c:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(&hspi1, tx_buffer, 1, 100);
 800122e:	f107 010c 	add.w	r1, r7, #12
 8001232:	2364      	movs	r3, #100	; 0x64
 8001234:	2201      	movs	r2, #1
 8001236:	480a      	ldr	r0, [pc, #40]	; (8001260 <max7219_Transmit+0x74>)
 8001238:	f001 fe51 	bl	8002ede <HAL_SPI_Transmit>


    if (num == 1) GPIOD->BSRR = CS_Pin;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d104      	bne.n	800124c <max7219_Transmit+0x60>
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <max7219_Transmit+0x70>)
 8001244:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001248:	619a      	str	r2, [r3, #24]
    else GPIOD->BSRR = CS2_Pin;
}
 800124a:	e003      	b.n	8001254 <max7219_Transmit+0x68>
    else GPIOD->BSRR = CS2_Pin;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <max7219_Transmit+0x70>)
 800124e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001252:	619a      	str	r2, [r3, #24]
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40020c00 	.word	0x40020c00
 8001260:	20000310 	.word	0x20000310

08001264 <max7219_Display_Clean>:


void max7219_Display_Clean(int num){
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	max7219_Transmit(num, 0x01, 0x00);
 800126c:	2200      	movs	r2, #0
 800126e:	2101      	movs	r1, #1
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ffbb 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(num, 0x02, 0x00);
 8001276:	2200      	movs	r2, #0
 8001278:	2102      	movs	r1, #2
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffb6 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(num, 0x03, 0x00);
 8001280:	2200      	movs	r2, #0
 8001282:	2103      	movs	r1, #3
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ffb1 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(num, 0x04, 0x00);
 800128a:	2200      	movs	r2, #0
 800128c:	2104      	movs	r1, #4
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffac 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(num, 0x05, 0x00);
 8001294:	2200      	movs	r2, #0
 8001296:	2105      	movs	r1, #5
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ffa7 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(num, 0x06, 0x00);
 800129e:	2200      	movs	r2, #0
 80012a0:	2106      	movs	r1, #6
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa2 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(num, 0x07, 0x00);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2107      	movs	r1, #7
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff9d 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(num, 0x08, 0x00);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2108      	movs	r1, #8
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ff98 	bl	80011ec <max7219_Transmit>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <max7219_Init>:


void max7219_Init(){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	max7219_Transmit(1, 0x09, 0x00);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2109      	movs	r1, #9
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff ff8d 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(1, 0x0A, 0x0F);
 80012d2:	220f      	movs	r2, #15
 80012d4:	210a      	movs	r1, #10
 80012d6:	2001      	movs	r0, #1
 80012d8:	f7ff ff88 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(1, 0x0B, 0x07);
 80012dc:	2207      	movs	r2, #7
 80012de:	210b      	movs	r1, #11
 80012e0:	2001      	movs	r0, #1
 80012e2:	f7ff ff83 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(1, 0x08, 0x07);
 80012e6:	2207      	movs	r2, #7
 80012e8:	2108      	movs	r1, #8
 80012ea:	2001      	movs	r0, #1
 80012ec:	f7ff ff7e 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(1, 0x0C, 0x01);
 80012f0:	2201      	movs	r2, #1
 80012f2:	210c      	movs	r1, #12
 80012f4:	2001      	movs	r0, #1
 80012f6:	f7ff ff79 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(1, 0x0F, 0x01);
 80012fa:	2201      	movs	r2, #1
 80012fc:	210f      	movs	r1, #15
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff ff74 	bl	80011ec <max7219_Transmit>

	HAL_Delay(1000);
 8001304:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001308:	f000 fcc6 	bl	8001c98 <HAL_Delay>
	max7219_Transmit(1, 0x0F, 0x00);
 800130c:	2200      	movs	r2, #0
 800130e:	210f      	movs	r1, #15
 8001310:	2001      	movs	r0, #1
 8001312:	f7ff ff6b 	bl	80011ec <max7219_Transmit>
//
//	HAL_Delay(1000);
	max7219_Transmit(2, 0x09, 0x00);
 8001316:	2200      	movs	r2, #0
 8001318:	2109      	movs	r1, #9
 800131a:	2002      	movs	r0, #2
 800131c:	f7ff ff66 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(2, 0x0A, 0x0F);
 8001320:	220f      	movs	r2, #15
 8001322:	210a      	movs	r1, #10
 8001324:	2002      	movs	r0, #2
 8001326:	f7ff ff61 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(2, 0x0B, 0x07);
 800132a:	2207      	movs	r2, #7
 800132c:	210b      	movs	r1, #11
 800132e:	2002      	movs	r0, #2
 8001330:	f7ff ff5c 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(2, 0x08, 0x07);
 8001334:	2207      	movs	r2, #7
 8001336:	2108      	movs	r1, #8
 8001338:	2002      	movs	r0, #2
 800133a:	f7ff ff57 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(2, 0x0C, 0x01);
 800133e:	2201      	movs	r2, #1
 8001340:	210c      	movs	r1, #12
 8001342:	2002      	movs	r0, #2
 8001344:	f7ff ff52 	bl	80011ec <max7219_Transmit>
	max7219_Transmit(2, 0x0F, 0x00);
 8001348:	2200      	movs	r2, #0
 800134a:	210f      	movs	r1, #15
 800134c:	2002      	movs	r0, #2
 800134e:	f7ff ff4d 	bl	80011ec <max7219_Transmit>

	HAL_Delay(1000);
 8001352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001356:	f000 fc9f 	bl	8001c98 <HAL_Delay>
	max7219_Transmit(2, 0x0F, 0x00);
 800135a:	2200      	movs	r2, #0
 800135c:	210f      	movs	r1, #15
 800135e:	2002      	movs	r0, #2
 8001360:	f7ff ff44 	bl	80011ec <max7219_Transmit>

	max7219_Display_Clean(2);
 8001364:	2002      	movs	r0, #2
 8001366:	f7ff ff7d 	bl	8001264 <max7219_Display_Clean>
	max7219_Display_Clean(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f7ff ff7a 	bl	8001264 <max7219_Display_Clean>

	HAL_Delay(1000);
 8001370:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001374:	f000 fc90 	bl	8001c98 <HAL_Delay>
	renderGraints();
 8001378:	f7ff feca 	bl	8001110 <renderGraints>
//	HAL_Delay(1000);
//	max7219_Transmit(2, 0x01, 0x13);

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}

08001380 <move>:


void move(int type, int y, int x, int idx) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]

	int newY;
	int newX;
	if (type == 1) {
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d11d      	bne.n	80013d0 <move+0x50>
		newY = (y + 1 != 8 && y+1 < 16) ? y + 1 : y;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b07      	cmp	r3, #7
 8001398:	d005      	beq.n	80013a6 <move+0x26>
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2b0e      	cmp	r3, #14
 800139e:	dc02      	bgt.n	80013a6 <move+0x26>
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	3301      	adds	r3, #1
 80013a4:	e000      	b.n	80013a8 <move+0x28>
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	617b      	str	r3, [r7, #20]
		newX = x + 1 != 8 ? x + 1 : x;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b07      	cmp	r3, #7
 80013ae:	d002      	beq.n	80013b6 <move+0x36>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3301      	adds	r3, #1
 80013b4:	e000      	b.n	80013b8 <move+0x38>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	613b      	str	r3, [r7, #16]
		if ((y+1 == 8) && (x+1 == 8)) {
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	2b07      	cmp	r3, #7
 80013be:	d117      	bne.n	80013f0 <move+0x70>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b07      	cmp	r3, #7
 80013c4:	d114      	bne.n	80013f0 <move+0x70>
			newY = 8;
 80013c6:	2308      	movs	r3, #8
 80013c8:	617b      	str	r3, [r7, #20]
			newX = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	e00f      	b.n	80013f0 <move+0x70>
		}
	} else {
		newY = y -1 >= 0 ? y -1 : y;
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	dd02      	ble.n	80013dc <move+0x5c>
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3b01      	subs	r3, #1
 80013da:	e000      	b.n	80013de <move+0x5e>
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	617b      	str	r3, [r7, #20]
		newX = x -1 >= 0 ? x - 1 : x;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	dd02      	ble.n	80013ec <move+0x6c>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	e000      	b.n	80013ee <move+0x6e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	613b      	str	r3, [r7, #16]
	}
	if (graints[newY][newX] == 1) {
 80013f0:	4918      	ldr	r1, [pc, #96]	; (8001454 <move+0xd4>)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	00da      	lsls	r2, r3, #3
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4413      	add	r3, r2
 80013fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d024      	beq.n	800144c <move+0xcc>
		return;
	}
	graints[y][x] = 0;
 8001402:	4914      	ldr	r1, [pc, #80]	; (8001454 <move+0xd4>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	00da      	lsls	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	2200      	movs	r2, #0
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	graints[newY][newX] = 1;
 8001412:	4910      	ldr	r1, [pc, #64]	; (8001454 <move+0xd4>)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	00da      	lsls	r2, r3, #3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4413      	add	r3, r2
 800141c:	2201      	movs	r2, #1
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	toggledGraintsY[idx] = newY;
 8001422:	490d      	ldr	r1, [pc, #52]	; (8001458 <move+0xd8>)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	toggledGraintsX[idx] = newX;
 800142c:	490b      	ldr	r1, [pc, #44]	; (800145c <move+0xdc>)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (x != newX  || y != newY) renderGraints();
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	429a      	cmp	r2, r3
 800143c:	d103      	bne.n	8001446 <move+0xc6>
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	429a      	cmp	r2, r3
 8001444:	d003      	beq.n	800144e <move+0xce>
 8001446:	f7ff fe63 	bl	8001110 <renderGraints>
 800144a:	e000      	b.n	800144e <move+0xce>
		return;
 800144c:	bf00      	nop


}
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000000 	.word	0x20000000
 8001458:	20000200 	.word	0x20000200
 800145c:	20000218 	.word	0x20000218

08001460 <main>:


int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0

  HAL_Init();
 8001464:	f000 fba6 	bl	8001bb4 <HAL_Init>

  SystemClock_Config();
 8001468:	f000 f86c 	bl	8001544 <SystemClock_Config>

  MX_GPIO_Init();
 800146c:	f000 f9ae 	bl	80017cc <MX_GPIO_Init>
  MX_SPI1_Init();
 8001470:	f000 f8fe 	bl	8001670 <MX_SPI1_Init>
  HAL_Delay(200);
 8001474:	20c8      	movs	r0, #200	; 0xc8
 8001476:	f000 fc0f 	bl	8001c98 <HAL_Delay>

  max7219_Init();
 800147a:	f7ff ff23 	bl	80012c4 <max7219_Init>
  MX_I2C1_Init();
 800147e:	f000 f8c9 	bl	8001614 <MX_I2C1_Init>

  AccelerometerInit();
 8001482:	f7ff fdc5 	bl	8001010 <AccelerometerInit>

  MX_TIM3_Init();
 8001486:	f000 f929 	bl	80016dc <MX_TIM3_Init>

  HAL_Delay(400);
 800148a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800148e:	f000 fc03 	bl	8001c98 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim3);
 8001492:	4802      	ldr	r0, [pc, #8]	; (800149c <main+0x3c>)
 8001494:	f001 ff7a 	bl	800338c <HAL_TIM_Base_Start_IT>
  while (1)
 8001498:	e7fe      	b.n	8001498 <main+0x38>
 800149a:	bf00      	nop
 800149c:	20000368 	.word	0x20000368

080014a0 <TIM3_IRQHandler>:
  }
}


void TIM3_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014a6:	4822      	ldr	r0, [pc, #136]	; (8001530 <TIM3_IRQHandler+0x90>)
 80014a8:	f002 f82b 	bl	8003502 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
//  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
  uint8_t highByte = ReadFromAccelerometer(0x29);
 80014ac:	2029      	movs	r0, #41	; 0x29
 80014ae:	f7ff fd6f 	bl	8000f90 <ReadFromAccelerometer>
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  uint8_t lowByte = ReadFromAccelerometer(0x28);
 80014b6:	2028      	movs	r0, #40	; 0x28
 80014b8:	f7ff fd6a 	bl	8000f90 <ReadFromAccelerometer>
 80014bc:	4603      	mov	r3, r0
 80014be:	71bb      	strb	r3, [r7, #6]

  uint16_t x = (highByte << 8) | lowByte;
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	79bb      	ldrb	r3, [r7, #6]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	80bb      	strh	r3, [r7, #4]


  int type = x < 20000 ? 1 : 2;
 80014d0:	88bb      	ldrh	r3, [r7, #4]
 80014d2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d801      	bhi.n	80014de <TIM3_IRQHandler+0x3e>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <TIM3_IRQHandler+0x40>
 80014de:	2302      	movs	r3, #2
 80014e0:	603b      	str	r3, [r7, #0]
  move(type, toggledGraintsY[current], toggledGraintsX[current], current);
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <TIM3_IRQHandler+0x94>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a14      	ldr	r2, [pc, #80]	; (8001538 <TIM3_IRQHandler+0x98>)
 80014e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <TIM3_IRQHandler+0x94>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a12      	ldr	r2, [pc, #72]	; (800153c <TIM3_IRQHandler+0x9c>)
 80014f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <TIM3_IRQHandler+0x94>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6838      	ldr	r0, [r7, #0]
 80014fc:	f7ff ff40 	bl	8001380 <move>
  if (current < size) current++;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <TIM3_IRQHandler+0x94>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <TIM3_IRQHandler+0xa0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	da04      	bge.n	8001516 <TIM3_IRQHandler+0x76>
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <TIM3_IRQHandler+0x94>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	4a08      	ldr	r2, [pc, #32]	; (8001534 <TIM3_IRQHandler+0x94>)
 8001514:	6013      	str	r3, [r2, #0]
  if (current == size) current = 0;
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <TIM3_IRQHandler+0x94>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <TIM3_IRQHandler+0xa0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d102      	bne.n	8001528 <TIM3_IRQHandler+0x88>
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <TIM3_IRQHandler+0x94>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000368 	.word	0x20000368
 8001534:	200003b0 	.word	0x200003b0
 8001538:	20000200 	.word	0x20000200
 800153c:	20000218 	.word	0x20000218
 8001540:	20000230 	.word	0x20000230

08001544 <SystemClock_Config>:
void SystemClock_Config(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b094      	sub	sp, #80	; 0x50
 8001548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	f107 0320 	add.w	r3, r7, #32
 800154e:	2230      	movs	r2, #48	; 0x30
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f002 fdc2 	bl	80040dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <SystemClock_Config+0xc8>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	4a26      	ldr	r2, [pc, #152]	; (800160c <SystemClock_Config+0xc8>)
 8001572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001576:	6413      	str	r3, [r2, #64]	; 0x40
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <SystemClock_Config+0xc8>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	4b21      	ldr	r3, [pc, #132]	; (8001610 <SystemClock_Config+0xcc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a20      	ldr	r2, [pc, #128]	; (8001610 <SystemClock_Config+0xcc>)
 800158e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <SystemClock_Config+0xcc>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a0:	2301      	movs	r3, #1
 80015a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015aa:	2302      	movs	r3, #2
 80015ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015b4:	2308      	movs	r3, #8
 80015b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80015b8:	2360      	movs	r3, #96	; 0x60
 80015ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015bc:	2302      	movs	r3, #2
 80015be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015c0:	2304      	movs	r3, #4
 80015c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c4:	f107 0320 	add.w	r3, r7, #32
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 ff7d 	bl	80024c8 <HAL_RCC_OscConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015d4:	f000 f968 	bl	80018a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d8:	230f      	movs	r3, #15
 80015da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015dc:	2302      	movs	r3, #2
 80015de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	2103      	movs	r1, #3
 80015f4:	4618      	mov	r0, r3
 80015f6:	f001 f9df 	bl	80029b8 <HAL_RCC_ClockConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001600:	f000 f952 	bl	80018a8 <Error_Handler>
  }
}
 8001604:	bf00      	nop
 8001606:	3750      	adds	r7, #80	; 0x50
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	40007000 	.word	0x40007000

08001614 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_I2C1_Init+0x50>)
 800161a:	4a13      	ldr	r2, [pc, #76]	; (8001668 <MX_I2C1_Init+0x54>)
 800161c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_I2C1_Init+0x50>)
 8001620:	4a12      	ldr	r2, [pc, #72]	; (800166c <MX_I2C1_Init+0x58>)
 8001622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_I2C1_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_I2C1_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_I2C1_Init+0x50>)
 8001632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <MX_I2C1_Init+0x50>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_I2C1_Init+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_I2C1_Init+0x50>)
 8001652:	f000 fdf5 	bl	8002240 <HAL_I2C_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800165c:	f000 f924 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200002bc 	.word	0x200002bc
 8001668:	40005400 	.word	0x40005400
 800166c:	000186a0 	.word	0x000186a0

08001670 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <MX_SPI1_Init+0x64>)
 8001676:	4a18      	ldr	r2, [pc, #96]	; (80016d8 <MX_SPI1_Init+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <MX_SPI1_Init+0x64>)
 800167c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001680:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <MX_SPI1_Init+0x64>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <MX_SPI1_Init+0x64>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_SPI1_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_SPI1_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <MX_SPI1_Init+0x64>)
 800169c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <MX_SPI1_Init+0x64>)
 80016a4:	2218      	movs	r2, #24
 80016a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <MX_SPI1_Init+0x64>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <MX_SPI1_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b4:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <MX_SPI1_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_SPI1_Init+0x64>)
 80016bc:	220a      	movs	r2, #10
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <MX_SPI1_Init+0x64>)
 80016c2:	f001 fb83 	bl	8002dcc <HAL_SPI_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016cc:	f000 f8ec 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000310 	.word	0x20000310
 80016d8:	40013000 	.word	0x40013000

080016dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08e      	sub	sp, #56	; 0x38
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
 8001708:	615a      	str	r2, [r3, #20]
 800170a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800170c:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <MX_TIM3_Init+0xe8>)
 800170e:	4a2e      	ldr	r2, [pc, #184]	; (80017c8 <MX_TIM3_Init+0xec>)
 8001710:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9600-1;
 8001712:	4b2c      	ldr	r3, [pc, #176]	; (80017c4 <MX_TIM3_Init+0xe8>)
 8001714:	f242 527f 	movw	r2, #9599	; 0x257f
 8001718:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <MX_TIM3_Init+0xe8>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001720:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <MX_TIM3_Init+0xe8>)
 8001722:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001726:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <MX_TIM3_Init+0xe8>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172e:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <MX_TIM3_Init+0xe8>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001734:	4823      	ldr	r0, [pc, #140]	; (80017c4 <MX_TIM3_Init+0xe8>)
 8001736:	f001 fdd9 	bl	80032ec <HAL_TIM_Base_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001740:	f000 f8b2 	bl	80018a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800174a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800174e:	4619      	mov	r1, r3
 8001750:	481c      	ldr	r0, [pc, #112]	; (80017c4 <MX_TIM3_Init+0xe8>)
 8001752:	f002 f8a1 	bl	8003898 <HAL_TIM_ConfigClockSource>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800175c:	f000 f8a4 	bl	80018a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001760:	4818      	ldr	r0, [pc, #96]	; (80017c4 <MX_TIM3_Init+0xe8>)
 8001762:	f001 fe75 	bl	8003450 <HAL_TIM_PWM_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800176c:	f000 f89c 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001778:	f107 0320 	add.w	r3, r7, #32
 800177c:	4619      	mov	r1, r3
 800177e:	4811      	ldr	r0, [pc, #68]	; (80017c4 <MX_TIM3_Init+0xe8>)
 8001780:	f002 fc2a 	bl	8003fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800178a:	f000 f88d 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178e:	2360      	movs	r3, #96	; 0x60
 8001790:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2200      	movs	r2, #0
 80017a2:	4619      	mov	r1, r3
 80017a4:	4807      	ldr	r0, [pc, #28]	; (80017c4 <MX_TIM3_Init+0xe8>)
 80017a6:	f001 ffb5 	bl	8003714 <HAL_TIM_PWM_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80017b0:	f000 f87a 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017b4:	4803      	ldr	r0, [pc, #12]	; (80017c4 <MX_TIM3_Init+0xe8>)
 80017b6:	f000 f95d 	bl	8001a74 <HAL_TIM_MspPostInit>

}
 80017ba:	bf00      	nop
 80017bc:	3738      	adds	r7, #56	; 0x38
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000368 	.word	0x20000368
 80017c8:	40000400 	.word	0x40000400

080017cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <MX_GPIO_Init+0xd4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a2d      	ldr	r2, [pc, #180]	; (80018a0 <MX_GPIO_Init+0xd4>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <MX_GPIO_Init+0xd4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <MX_GPIO_Init+0xd4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a26      	ldr	r2, [pc, #152]	; (80018a0 <MX_GPIO_Init+0xd4>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <MX_GPIO_Init+0xd4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <MX_GPIO_Init+0xd4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a1f      	ldr	r2, [pc, #124]	; (80018a0 <MX_GPIO_Init+0xd4>)
 8001824:	f043 0308 	orr.w	r3, r3, #8
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <MX_GPIO_Init+0xd4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <MX_GPIO_Init+0xd4>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a18      	ldr	r2, [pc, #96]	; (80018a0 <MX_GPIO_Init+0xd4>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <MX_GPIO_Init+0xd4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_GPIO_Init+0xd4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <MX_GPIO_Init+0xd4>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_GPIO_Init+0xd4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|CS_Pin|CS2_Pin, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001874:	480b      	ldr	r0, [pc, #44]	; (80018a4 <MX_GPIO_Init+0xd8>)
 8001876:	f000 fcc9 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 CS_Pin CS2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|CS_Pin|CS2_Pin;
 800187a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800187e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	4804      	ldr	r0, [pc, #16]	; (80018a4 <MX_GPIO_Init+0xd8>)
 8001894:	f000 fb36 	bl	8001f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* You can add any custom initialization code here */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020c00 	.word	0x40020c00

080018a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ac:	b672      	cpsid	i
}
 80018ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <Error_Handler+0x8>
	...

080018b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_MspInit+0x4c>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <HAL_MspInit+0x4c>)
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_MspInit+0x4c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_MspInit+0x4c>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a08      	ldr	r2, [pc, #32]	; (8001900 <HAL_MspInit+0x4c>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_MspInit+0x4c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800

08001904 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a19      	ldr	r2, [pc, #100]	; (8001988 <HAL_I2C_MspInit+0x84>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d12c      	bne.n	8001980 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_I2C_MspInit+0x88>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a17      	ldr	r2, [pc, #92]	; (800198c <HAL_I2C_MspInit+0x88>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_I2C_MspInit+0x88>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001942:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001948:	2312      	movs	r3, #18
 800194a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001954:	2304      	movs	r3, #4
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	480c      	ldr	r0, [pc, #48]	; (8001990 <HAL_I2C_MspInit+0x8c>)
 8001960:	f000 fad0 	bl	8001f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_I2C_MspInit+0x88>)
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_I2C_MspInit+0x88>)
 800196e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001972:	6413      	str	r3, [r2, #64]	; 0x40
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_I2C_MspInit+0x88>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40005400 	.word	0x40005400
 800198c:	40023800 	.word	0x40023800
 8001990:	40020400 	.word	0x40020400

08001994 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a19      	ldr	r2, [pc, #100]	; (8001a18 <HAL_SPI_MspInit+0x84>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d12b      	bne.n	8001a0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_SPI_MspInit+0x88>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a17      	ldr	r2, [pc, #92]	; (8001a1c <HAL_SPI_MspInit+0x88>)
 80019c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_SPI_MspInit+0x88>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_SPI_MspInit+0x88>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a10      	ldr	r2, [pc, #64]	; (8001a1c <HAL_SPI_MspInit+0x88>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_SPI_MspInit+0x88>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019ee:	23e0      	movs	r3, #224	; 0xe0
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019fe:	2305      	movs	r3, #5
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <HAL_SPI_MspInit+0x8c>)
 8001a0a:	f000 fa7b 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a0e:	bf00      	nop
 8001a10:	3728      	adds	r7, #40	; 0x28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40013000 	.word	0x40013000
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020000 	.word	0x40020000

08001a24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <HAL_TIM_Base_MspInit+0x48>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d115      	bne.n	8001a62 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_TIM_Base_MspInit+0x4c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a0c      	ldr	r2, [pc, #48]	; (8001a70 <HAL_TIM_Base_MspInit+0x4c>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_TIM_Base_MspInit+0x4c>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	201d      	movs	r0, #29
 8001a58:	f000 fa1d 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a5c:	201d      	movs	r0, #29
 8001a5e:	f000 fa36 	bl	8001ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40000400 	.word	0x40000400
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a12      	ldr	r2, [pc, #72]	; (8001adc <HAL_TIM_MspPostInit+0x68>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d11d      	bne.n	8001ad2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_TIM_MspPostInit+0x6c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <HAL_TIM_MspPostInit+0x6c>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_TIM_MspPostInit+0x6c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ab2:	2340      	movs	r3, #64	; 0x40
 8001ab4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <HAL_TIM_MspPostInit+0x70>)
 8001ace:	f000 fa19 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40020800 	.word	0x40020800

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <NMI_Handler+0x4>

08001aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <HardFault_Handler+0x4>

08001af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <MemManage_Handler+0x4>

08001afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <BusFault_Handler+0x4>

08001b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <UsageFault_Handler+0x4>

08001b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b34:	f000 f890 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <SystemInit+0x20>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b46:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <SystemInit+0x20>)
 8001b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b64:	480d      	ldr	r0, [pc, #52]	; (8001b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b66:	490e      	ldr	r1, [pc, #56]	; (8001ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b68:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b7c:	4c0b      	ldr	r4, [pc, #44]	; (8001bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b8a:	f7ff ffd7 	bl	8001b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f002 fab3 	bl	80040f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b92:	f7ff fc65 	bl	8001460 <main>
  bx  lr    
 8001b96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba0:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 8001ba4:	08005020 	.word	0x08005020
  ldr r2, =_sbss
 8001ba8:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8001bac:	200004f0 	.word	0x200004f0

08001bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC_IRQHandler>
	...

08001bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <HAL_Init+0x40>)
 8001bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <HAL_Init+0x40>)
 8001bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_Init+0x40>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <HAL_Init+0x40>)
 8001bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bdc:	2003      	movs	r0, #3
 8001bde:	f000 f94f 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be2:	200f      	movs	r0, #15
 8001be4:	f000 f808 	bl	8001bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be8:	f7ff fe64 	bl	80018b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023c00 	.word	0x40023c00

08001bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_InitTick+0x54>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_InitTick+0x58>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f967 	bl	8001eea <HAL_SYSTICK_Config>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00e      	b.n	8001c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b0f      	cmp	r3, #15
 8001c2a:	d80a      	bhi.n	8001c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f000 f92f 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c38:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <HAL_InitTick+0x5c>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000234 	.word	0x20000234
 8001c50:	2000023c 	.word	0x2000023c
 8001c54:	20000238 	.word	0x20000238

08001c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_IncTick+0x20>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x24>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <HAL_IncTick+0x24>)
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	2000023c 	.word	0x2000023c
 8001c7c:	200003b4 	.word	0x200003b4

08001c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return uwTick;
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <HAL_GetTick+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	200003b4 	.word	0x200003b4

08001c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff ffee 	bl	8001c80 <HAL_GetTick>
 8001ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d005      	beq.n	8001cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_Delay+0x44>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cbe:	bf00      	nop
 8001cc0:	f7ff ffde 	bl	8001c80 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d8f7      	bhi.n	8001cc0 <HAL_Delay+0x28>
  {
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000023c 	.word	0x2000023c

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4907      	ldr	r1, [pc, #28]	; (8001d7c <__NVIC_EnableIRQ+0x38>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db0a      	blt.n	8001daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	; (8001dcc <__NVIC_SetPriority+0x4c>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	440b      	add	r3, r1
 8001da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da8:	e00a      	b.n	8001dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4908      	ldr	r1, [pc, #32]	; (8001dd0 <__NVIC_SetPriority+0x50>)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3b04      	subs	r3, #4
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	761a      	strb	r2, [r3, #24]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f1c3 0307 	rsb	r3, r3, #7
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf28      	it	cs
 8001df2:	2304      	movcs	r3, #4
 8001df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d902      	bls.n	8001e04 <NVIC_EncodePriority+0x30>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	e000      	b.n	8001e06 <NVIC_EncodePriority+0x32>
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	4313      	orrs	r3, r2
         );
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff8e 	bl	8001d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff29 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff3e 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff8e 	bl	8001dd4 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5d 	bl	8001d80 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff31 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa2 	bl	8001e3c <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	e159      	b.n	80021d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f20:	2201      	movs	r2, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	f040 8148 	bne.w	80021ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d005      	beq.n	8001f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d130      	bne.n	8001fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 0201 	and.w	r2, r3, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d017      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d123      	bne.n	8002048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	08da      	lsrs	r2, r3, #3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3208      	adds	r2, #8
 8002008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	220f      	movs	r2, #15
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	08da      	lsrs	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3208      	adds	r2, #8
 8002042:	69b9      	ldr	r1, [r7, #24]
 8002044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	2203      	movs	r2, #3
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0203 	and.w	r2, r3, #3
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80a2 	beq.w	80021ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b57      	ldr	r3, [pc, #348]	; (80021ec <HAL_GPIO_Init+0x2e8>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a56      	ldr	r2, [pc, #344]	; (80021ec <HAL_GPIO_Init+0x2e8>)
 8002094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	4b54      	ldr	r3, [pc, #336]	; (80021ec <HAL_GPIO_Init+0x2e8>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020a6:	4a52      	ldr	r2, [pc, #328]	; (80021f0 <HAL_GPIO_Init+0x2ec>)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	220f      	movs	r2, #15
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a49      	ldr	r2, [pc, #292]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d019      	beq.n	8002106 <HAL_GPIO_Init+0x202>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a48      	ldr	r2, [pc, #288]	; (80021f8 <HAL_GPIO_Init+0x2f4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_GPIO_Init+0x1fe>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a47      	ldr	r2, [pc, #284]	; (80021fc <HAL_GPIO_Init+0x2f8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00d      	beq.n	80020fe <HAL_GPIO_Init+0x1fa>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a46      	ldr	r2, [pc, #280]	; (8002200 <HAL_GPIO_Init+0x2fc>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <HAL_GPIO_Init+0x1f6>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a45      	ldr	r2, [pc, #276]	; (8002204 <HAL_GPIO_Init+0x300>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <HAL_GPIO_Init+0x1f2>
 80020f2:	2304      	movs	r3, #4
 80020f4:	e008      	b.n	8002108 <HAL_GPIO_Init+0x204>
 80020f6:	2307      	movs	r3, #7
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x204>
 80020fa:	2303      	movs	r3, #3
 80020fc:	e004      	b.n	8002108 <HAL_GPIO_Init+0x204>
 80020fe:	2302      	movs	r3, #2
 8002100:	e002      	b.n	8002108 <HAL_GPIO_Init+0x204>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_GPIO_Init+0x204>
 8002106:	2300      	movs	r3, #0
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	f002 0203 	and.w	r2, r2, #3
 800210e:	0092      	lsls	r2, r2, #2
 8002110:	4093      	lsls	r3, r2
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002118:	4935      	ldr	r1, [pc, #212]	; (80021f0 <HAL_GPIO_Init+0x2ec>)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002126:	4b38      	ldr	r3, [pc, #224]	; (8002208 <HAL_GPIO_Init+0x304>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800214a:	4a2f      	ldr	r2, [pc, #188]	; (8002208 <HAL_GPIO_Init+0x304>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002150:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <HAL_GPIO_Init+0x304>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002174:	4a24      	ldr	r2, [pc, #144]	; (8002208 <HAL_GPIO_Init+0x304>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800217a:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_GPIO_Init+0x304>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800219e:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <HAL_GPIO_Init+0x304>)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_GPIO_Init+0x304>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021c8:	4a0f      	ldr	r2, [pc, #60]	; (8002208 <HAL_GPIO_Init+0x304>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3301      	adds	r3, #1
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	2b0f      	cmp	r3, #15
 80021d8:	f67f aea2 	bls.w	8001f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40013800 	.word	0x40013800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	40020400 	.word	0x40020400
 80021fc:	40020800 	.word	0x40020800
 8002200:	40020c00 	.word	0x40020c00
 8002204:	40021000 	.word	0x40021000
 8002208:	40013c00 	.word	0x40013c00

0800220c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
 8002218:	4613      	mov	r3, r2
 800221a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800221c:	787b      	ldrb	r3, [r7, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002228:	e003      	b.n	8002232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	041a      	lsls	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	619a      	str	r2, [r3, #24]
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e12b      	b.n	80024aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fb4c 	bl	8001904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2224      	movs	r2, #36	; 0x24
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022a4:	f000 fd7e 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 80022a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4a81      	ldr	r2, [pc, #516]	; (80024b4 <HAL_I2C_Init+0x274>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d807      	bhi.n	80022c4 <HAL_I2C_Init+0x84>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a80      	ldr	r2, [pc, #512]	; (80024b8 <HAL_I2C_Init+0x278>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	bf94      	ite	ls
 80022bc:	2301      	movls	r3, #1
 80022be:	2300      	movhi	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e006      	b.n	80022d2 <HAL_I2C_Init+0x92>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a7d      	ldr	r2, [pc, #500]	; (80024bc <HAL_I2C_Init+0x27c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	bf94      	ite	ls
 80022cc:	2301      	movls	r3, #1
 80022ce:	2300      	movhi	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0e7      	b.n	80024aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a78      	ldr	r2, [pc, #480]	; (80024c0 <HAL_I2C_Init+0x280>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0c9b      	lsrs	r3, r3, #18
 80022e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a6a      	ldr	r2, [pc, #424]	; (80024b4 <HAL_I2C_Init+0x274>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d802      	bhi.n	8002314 <HAL_I2C_Init+0xd4>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	3301      	adds	r3, #1
 8002312:	e009      	b.n	8002328 <HAL_I2C_Init+0xe8>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	4a69      	ldr	r2, [pc, #420]	; (80024c4 <HAL_I2C_Init+0x284>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	3301      	adds	r3, #1
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	430b      	orrs	r3, r1
 800232e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800233a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	495c      	ldr	r1, [pc, #368]	; (80024b4 <HAL_I2C_Init+0x274>)
 8002344:	428b      	cmp	r3, r1
 8002346:	d819      	bhi.n	800237c <HAL_I2C_Init+0x13c>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e59      	subs	r1, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fbb1 f3f3 	udiv	r3, r1, r3
 8002356:	1c59      	adds	r1, r3, #1
 8002358:	f640 73fc 	movw	r3, #4092	; 0xffc
 800235c:	400b      	ands	r3, r1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_I2C_Init+0x138>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1e59      	subs	r1, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002376:	e051      	b.n	800241c <HAL_I2C_Init+0x1dc>
 8002378:	2304      	movs	r3, #4
 800237a:	e04f      	b.n	800241c <HAL_I2C_Init+0x1dc>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d111      	bne.n	80023a8 <HAL_I2C_Init+0x168>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e58      	subs	r0, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	440b      	add	r3, r1
 8002392:	fbb0 f3f3 	udiv	r3, r0, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e012      	b.n	80023ce <HAL_I2C_Init+0x18e>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e58      	subs	r0, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	0099      	lsls	r1, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Init+0x196>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e022      	b.n	800241c <HAL_I2C_Init+0x1dc>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10e      	bne.n	80023fc <HAL_I2C_Init+0x1bc>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1e58      	subs	r0, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	440b      	add	r3, r1
 80023ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023fa:	e00f      	b.n	800241c <HAL_I2C_Init+0x1dc>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1e58      	subs	r0, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	0099      	lsls	r1, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002412:	3301      	adds	r3, #1
 8002414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	6809      	ldr	r1, [r1, #0]
 8002420:	4313      	orrs	r3, r2
 8002422:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800244a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6911      	ldr	r1, [r2, #16]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68d2      	ldr	r2, [r2, #12]
 8002456:	4311      	orrs	r1, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	430b      	orrs	r3, r1
 800245e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	000186a0 	.word	0x000186a0
 80024b8:	001e847f 	.word	0x001e847f
 80024bc:	003d08ff 	.word	0x003d08ff
 80024c0:	431bde83 	.word	0x431bde83
 80024c4:	10624dd3 	.word	0x10624dd3

080024c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e267      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d075      	beq.n	80025d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024e6:	4b88      	ldr	r3, [pc, #544]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d00c      	beq.n	800250c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f2:	4b85      	ldr	r3, [pc, #532]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d112      	bne.n	8002524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fe:	4b82      	ldr	r3, [pc, #520]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800250a:	d10b      	bne.n	8002524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250c:	4b7e      	ldr	r3, [pc, #504]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d05b      	beq.n	80025d0 <HAL_RCC_OscConfig+0x108>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d157      	bne.n	80025d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e242      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252c:	d106      	bne.n	800253c <HAL_RCC_OscConfig+0x74>
 800252e:	4b76      	ldr	r3, [pc, #472]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a75      	ldr	r2, [pc, #468]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e01d      	b.n	8002578 <HAL_RCC_OscConfig+0xb0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x98>
 8002546:	4b70      	ldr	r3, [pc, #448]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6f      	ldr	r2, [pc, #444]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800254c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b6d      	ldr	r3, [pc, #436]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6c      	ldr	r2, [pc, #432]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e00b      	b.n	8002578 <HAL_RCC_OscConfig+0xb0>
 8002560:	4b69      	ldr	r3, [pc, #420]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a68      	ldr	r2, [pc, #416]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b66      	ldr	r3, [pc, #408]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a65      	ldr	r2, [pc, #404]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7ff fb7e 	bl	8001c80 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002588:	f7ff fb7a 	bl	8001c80 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e207      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b5b      	ldr	r3, [pc, #364]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0xc0>
 80025a6:	e014      	b.n	80025d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7ff fb6a 	bl	8001c80 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b0:	f7ff fb66 	bl	8001c80 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	; 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e1f3      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	4b51      	ldr	r3, [pc, #324]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0xe8>
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d063      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025de:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d11c      	bne.n	8002630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f6:	4b44      	ldr	r3, [pc, #272]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d116      	bne.n	8002630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_RCC_OscConfig+0x152>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d001      	beq.n	800261a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e1c7      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261a:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4937      	ldr	r1, [pc, #220]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	e03a      	b.n	80026a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002638:	4b34      	ldr	r3, [pc, #208]	; (800270c <HAL_RCC_OscConfig+0x244>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7ff fb1f 	bl	8001c80 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002646:	f7ff fb1b 	bl	8001c80 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e1a8      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002664:	4b28      	ldr	r3, [pc, #160]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4925      	ldr	r1, [pc, #148]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]
 8002678:	e015      	b.n	80026a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_RCC_OscConfig+0x244>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7ff fafe 	bl	8001c80 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002688:	f7ff fafa 	bl	8001c80 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e187      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d036      	beq.n	8002720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <HAL_RCC_OscConfig+0x248>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7ff fade 	bl	8001c80 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c8:	f7ff fada 	bl	8001c80 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e167      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80026dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x200>
 80026e6:	e01b      	b.n	8002720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_RCC_OscConfig+0x248>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ee:	f7ff fac7 	bl	8001c80 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	e00e      	b.n	8002714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f6:	f7ff fac3 	bl	8001c80 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d907      	bls.n	8002714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e150      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
 8002708:	40023800 	.word	0x40023800
 800270c:	42470000 	.word	0x42470000
 8002710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002714:	4b88      	ldr	r3, [pc, #544]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ea      	bne.n	80026f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8097 	beq.w	800285c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002732:	4b81      	ldr	r3, [pc, #516]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10f      	bne.n	800275e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	4b7d      	ldr	r3, [pc, #500]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	4a7c      	ldr	r2, [pc, #496]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274c:	6413      	str	r3, [r2, #64]	; 0x40
 800274e:	4b7a      	ldr	r3, [pc, #488]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275a:	2301      	movs	r3, #1
 800275c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275e:	4b77      	ldr	r3, [pc, #476]	; (800293c <HAL_RCC_OscConfig+0x474>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d118      	bne.n	800279c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800276a:	4b74      	ldr	r3, [pc, #464]	; (800293c <HAL_RCC_OscConfig+0x474>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a73      	ldr	r2, [pc, #460]	; (800293c <HAL_RCC_OscConfig+0x474>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002776:	f7ff fa83 	bl	8001c80 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7ff fa7f 	bl	8001c80 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e10c      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002790:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_OscConfig+0x474>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x2ea>
 80027a4:	4b64      	ldr	r3, [pc, #400]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	4a63      	ldr	r2, [pc, #396]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	; 0x70
 80027b0:	e01c      	b.n	80027ec <HAL_RCC_OscConfig+0x324>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b05      	cmp	r3, #5
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x30c>
 80027ba:	4b5f      	ldr	r3, [pc, #380]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a5e      	ldr	r2, [pc, #376]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
 80027c6:	4b5c      	ldr	r3, [pc, #368]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a5b      	ldr	r2, [pc, #364]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
 80027d2:	e00b      	b.n	80027ec <HAL_RCC_OscConfig+0x324>
 80027d4:	4b58      	ldr	r3, [pc, #352]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a57      	ldr	r2, [pc, #348]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
 80027e0:	4b55      	ldr	r3, [pc, #340]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	4a54      	ldr	r2, [pc, #336]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f023 0304 	bic.w	r3, r3, #4
 80027ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d015      	beq.n	8002820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7ff fa44 	bl	8001c80 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7ff fa40 	bl	8001c80 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	; 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e0cb      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002812:	4b49      	ldr	r3, [pc, #292]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0ee      	beq.n	80027fc <HAL_RCC_OscConfig+0x334>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002820:	f7ff fa2e 	bl	8001c80 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002826:	e00a      	b.n	800283e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7ff fa2a 	bl	8001c80 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e0b5      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283e:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1ee      	bne.n	8002828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d105      	bne.n	800285c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002850:	4b39      	ldr	r3, [pc, #228]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	4a38      	ldr	r2, [pc, #224]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80a1 	beq.w	80029a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002866:	4b34      	ldr	r3, [pc, #208]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b08      	cmp	r3, #8
 8002870:	d05c      	beq.n	800292c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d141      	bne.n	80028fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b31      	ldr	r3, [pc, #196]	; (8002940 <HAL_RCC_OscConfig+0x478>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7ff f9fe 	bl	8001c80 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002888:	f7ff f9fa 	bl	8001c80 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e087      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69da      	ldr	r2, [r3, #28]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	019b      	lsls	r3, r3, #6
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	3b01      	subs	r3, #1
 80028c0:	041b      	lsls	r3, r3, #16
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	491b      	ldr	r1, [pc, #108]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x478>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7ff f9d3 	bl	8001c80 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028de:	f7ff f9cf 	bl	8001c80 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e05c      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x416>
 80028fc:	e054      	b.n	80029a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <HAL_RCC_OscConfig+0x478>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7ff f9bc 	bl	8001c80 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290c:	f7ff f9b8 	bl	8001c80 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e045      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x444>
 800292a:	e03d      	b.n	80029a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d107      	bne.n	8002944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e038      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
 8002938:	40023800 	.word	0x40023800
 800293c:	40007000 	.word	0x40007000
 8002940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002944:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <HAL_RCC_OscConfig+0x4ec>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d028      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d121      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d11a      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800297a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800297c:	4293      	cmp	r3, r2
 800297e:	d111      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	3b01      	subs	r3, #1
 800298e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800

080029b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0cc      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b68      	ldr	r3, [pc, #416]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d90c      	bls.n	80029f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b65      	ldr	r3, [pc, #404]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b63      	ldr	r3, [pc, #396]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0b8      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d020      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a0c:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a24:	4b53      	ldr	r3, [pc, #332]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a52      	ldr	r2, [pc, #328]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a30:	4b50      	ldr	r3, [pc, #320]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	494d      	ldr	r1, [pc, #308]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d044      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d119      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e07f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a76:	4b3f      	ldr	r3, [pc, #252]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e06f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a86:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e067      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a96:	4b37      	ldr	r3, [pc, #220]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f023 0203 	bic.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4934      	ldr	r1, [pc, #208]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa8:	f7ff f8ea 	bl	8001c80 <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab0:	f7ff f8e6 	bl	8001c80 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e04f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 020c 	and.w	r2, r3, #12
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d1eb      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d20c      	bcs.n	8002b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e032      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0c:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4916      	ldr	r1, [pc, #88]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	490e      	ldr	r1, [pc, #56]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b3e:	f000 f821 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8002b42:	4602      	mov	r2, r0
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	490a      	ldr	r1, [pc, #40]	; (8002b78 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	5ccb      	ldrb	r3, [r1, r3]
 8002b52:	fa22 f303 	lsr.w	r3, r2, r3
 8002b56:	4a09      	ldr	r2, [pc, #36]	; (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff f84a 	bl	8001bf8 <HAL_InitTick>

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023c00 	.word	0x40023c00
 8002b74:	40023800 	.word	0x40023800
 8002b78:	08004fc8 	.word	0x08004fc8
 8002b7c:	20000234 	.word	0x20000234
 8002b80:	20000238 	.word	0x20000238

08002b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b88:	b094      	sub	sp, #80	; 0x50
 8002b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b90:	2300      	movs	r3, #0
 8002b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b94:	2300      	movs	r3, #0
 8002b96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b9c:	4b79      	ldr	r3, [pc, #484]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d00d      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	f200 80e1 	bhi.w	8002d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002bb6:	e0db      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb8:	4b73      	ldr	r3, [pc, #460]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002bbc:	e0db      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bbe:	4b72      	ldr	r3, [pc, #456]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bc2:	e0d8      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc4:	4b6f      	ldr	r3, [pc, #444]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bce:	4b6d      	ldr	r3, [pc, #436]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d063      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bda:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	099b      	lsrs	r3, r3, #6
 8002be0:	2200      	movs	r2, #0
 8002be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002be4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bec:	633b      	str	r3, [r7, #48]	; 0x30
 8002bee:	2300      	movs	r3, #0
 8002bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bf6:	4622      	mov	r2, r4
 8002bf8:	462b      	mov	r3, r5
 8002bfa:	f04f 0000 	mov.w	r0, #0
 8002bfe:	f04f 0100 	mov.w	r1, #0
 8002c02:	0159      	lsls	r1, r3, #5
 8002c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c08:	0150      	lsls	r0, r2, #5
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4621      	mov	r1, r4
 8002c10:	1a51      	subs	r1, r2, r1
 8002c12:	6139      	str	r1, [r7, #16]
 8002c14:	4629      	mov	r1, r5
 8002c16:	eb63 0301 	sbc.w	r3, r3, r1
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c28:	4659      	mov	r1, fp
 8002c2a:	018b      	lsls	r3, r1, #6
 8002c2c:	4651      	mov	r1, sl
 8002c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c32:	4651      	mov	r1, sl
 8002c34:	018a      	lsls	r2, r1, #6
 8002c36:	4651      	mov	r1, sl
 8002c38:	ebb2 0801 	subs.w	r8, r2, r1
 8002c3c:	4659      	mov	r1, fp
 8002c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c56:	4690      	mov	r8, r2
 8002c58:	4699      	mov	r9, r3
 8002c5a:	4623      	mov	r3, r4
 8002c5c:	eb18 0303 	adds.w	r3, r8, r3
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	462b      	mov	r3, r5
 8002c64:	eb49 0303 	adc.w	r3, r9, r3
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c76:	4629      	mov	r1, r5
 8002c78:	028b      	lsls	r3, r1, #10
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c80:	4621      	mov	r1, r4
 8002c82:	028a      	lsls	r2, r1, #10
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c94:	f7fd ff34 	bl	8000b00 <__aeabi_uldivmod>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca0:	e058      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca2:	4b38      	ldr	r3, [pc, #224]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	2200      	movs	r2, #0
 8002caa:	4618      	mov	r0, r3
 8002cac:	4611      	mov	r1, r2
 8002cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cb2:	623b      	str	r3, [r7, #32]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cbc:	4642      	mov	r2, r8
 8002cbe:	464b      	mov	r3, r9
 8002cc0:	f04f 0000 	mov.w	r0, #0
 8002cc4:	f04f 0100 	mov.w	r1, #0
 8002cc8:	0159      	lsls	r1, r3, #5
 8002cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cce:	0150      	lsls	r0, r2, #5
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4641      	mov	r1, r8
 8002cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cda:	4649      	mov	r1, r9
 8002cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8002cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	00eb      	lsls	r3, r5, #3
 8002d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d0a:	00e2      	lsls	r2, r4, #3
 8002d0c:	4614      	mov	r4, r2
 8002d0e:	461d      	mov	r5, r3
 8002d10:	4643      	mov	r3, r8
 8002d12:	18e3      	adds	r3, r4, r3
 8002d14:	603b      	str	r3, [r7, #0]
 8002d16:	464b      	mov	r3, r9
 8002d18:	eb45 0303 	adc.w	r3, r5, r3
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	028b      	lsls	r3, r1, #10
 8002d2e:	4621      	mov	r1, r4
 8002d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d34:	4621      	mov	r1, r4
 8002d36:	028a      	lsls	r2, r1, #10
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	61fa      	str	r2, [r7, #28]
 8002d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d48:	f7fd feda 	bl	8000b00 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4613      	mov	r3, r2
 8002d52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d6e:	e002      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3750      	adds	r7, #80	; 0x50
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	00f42400 	.word	0x00f42400

08002d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000234 	.word	0x20000234

08002da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002da8:	f7ff fff0 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	0a9b      	lsrs	r3, r3, #10
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4903      	ldr	r1, [pc, #12]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	08004fd8 	.word	0x08004fd8

08002dcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e07b      	b.n	8002ed6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d108      	bne.n	8002df8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dee:	d009      	beq.n	8002e04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	61da      	str	r2, [r3, #28]
 8002df6:	e005      	b.n	8002e04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fe fdb8 	bl	8001994 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e88:	ea42 0103 	orr.w	r1, r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	0c1b      	lsrs	r3, r3, #16
 8002ea2:	f003 0104 	and.w	r1, r3, #4
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	f003 0210 	and.w	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ec4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b088      	sub	sp, #32
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	4613      	mov	r3, r2
 8002eec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_SPI_Transmit+0x22>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e126      	b.n	800314e <HAL_SPI_Transmit+0x270>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f08:	f7fe feba 	bl	8001c80 <HAL_GetTick>
 8002f0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d002      	beq.n	8002f24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f22:	e10b      	b.n	800313c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <HAL_SPI_Transmit+0x52>
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f34:	e102      	b.n	800313c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2203      	movs	r2, #3
 8002f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	88fa      	ldrh	r2, [r7, #6]
 8002f4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f7c:	d10f      	bne.n	8002f9e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b40      	cmp	r3, #64	; 0x40
 8002faa:	d007      	beq.n	8002fbc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fc4:	d14b      	bne.n	800305e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_SPI_Transmit+0xf6>
 8002fce:	8afb      	ldrh	r3, [r7, #22]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d13e      	bne.n	8003052 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	881a      	ldrh	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	1c9a      	adds	r2, r3, #2
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ff8:	e02b      	b.n	8003052 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b02      	cmp	r3, #2
 8003006:	d112      	bne.n	800302e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	881a      	ldrh	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	1c9a      	adds	r2, r3, #2
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	86da      	strh	r2, [r3, #54]	; 0x36
 800302c:	e011      	b.n	8003052 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800302e:	f7fe fe27 	bl	8001c80 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d803      	bhi.n	8003046 <HAL_SPI_Transmit+0x168>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d102      	bne.n	800304c <HAL_SPI_Transmit+0x16e>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003050:	e074      	b.n	800313c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ce      	bne.n	8002ffa <HAL_SPI_Transmit+0x11c>
 800305c:	e04c      	b.n	80030f8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_SPI_Transmit+0x18e>
 8003066:	8afb      	ldrh	r3, [r7, #22]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d140      	bne.n	80030ee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	330c      	adds	r3, #12
 8003076:	7812      	ldrb	r2, [r2, #0]
 8003078:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003092:	e02c      	b.n	80030ee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d113      	bne.n	80030ca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	330c      	adds	r3, #12
 80030ac:	7812      	ldrb	r2, [r2, #0]
 80030ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80030c8:	e011      	b.n	80030ee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030ca:	f7fe fdd9 	bl	8001c80 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d803      	bhi.n	80030e2 <HAL_SPI_Transmit+0x204>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d102      	bne.n	80030e8 <HAL_SPI_Transmit+0x20a>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d102      	bne.n	80030ee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030ec:	e026      	b.n	800313c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1cd      	bne.n	8003094 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	6839      	ldr	r1, [r7, #0]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f8b3 	bl	8003268 <SPI_EndRxTxTransaction>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10a      	bne.n	800312c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	e000      	b.n	800313c <HAL_SPI_Transmit+0x25e>
  }

error:
 800313a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800314c:	7ffb      	ldrb	r3, [r7, #31]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003168:	f7fe fd8a 	bl	8001c80 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	4413      	add	r3, r2
 8003176:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003178:	f7fe fd82 	bl	8001c80 <HAL_GetTick>
 800317c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800317e:	4b39      	ldr	r3, [pc, #228]	; (8003264 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	015b      	lsls	r3, r3, #5
 8003184:	0d1b      	lsrs	r3, r3, #20
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	fb02 f303 	mul.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800318e:	e054      	b.n	800323a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003196:	d050      	beq.n	800323a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003198:	f7fe fd72 	bl	8001c80 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d902      	bls.n	80031ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d13d      	bne.n	800322a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031c6:	d111      	bne.n	80031ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d0:	d004      	beq.n	80031dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031da:	d107      	bne.n	80031ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f4:	d10f      	bne.n	8003216 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003214:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e017      	b.n	800325a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3b01      	subs	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4013      	ands	r3, r2
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	429a      	cmp	r2, r3
 8003248:	bf0c      	ite	eq
 800324a:	2301      	moveq	r3, #1
 800324c:	2300      	movne	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	429a      	cmp	r2, r3
 8003256:	d19b      	bne.n	8003190 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3720      	adds	r7, #32
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000234 	.word	0x20000234

08003268 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af02      	add	r7, sp, #8
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <SPI_EndRxTxTransaction+0x7c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1b      	ldr	r2, [pc, #108]	; (80032e8 <SPI_EndRxTxTransaction+0x80>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	0d5b      	lsrs	r3, r3, #21
 8003280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003284:	fb02 f303 	mul.w	r3, r2, r3
 8003288:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003292:	d112      	bne.n	80032ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2200      	movs	r2, #0
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff ff5a 	bl	8003158 <SPI_WaitFlagStateUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d016      	beq.n	80032d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	f043 0220 	orr.w	r2, r3, #32
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e00f      	b.n	80032da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d0:	2b80      	cmp	r3, #128	; 0x80
 80032d2:	d0f2      	beq.n	80032ba <SPI_EndRxTxTransaction+0x52>
 80032d4:	e000      	b.n	80032d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80032d6:	bf00      	nop
  }

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000234 	.word	0x20000234
 80032e8:	165e9f81 	.word	0x165e9f81

080032ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e041      	b.n	8003382 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fe fb86 	bl	8001a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f000 fbae 	bl	8003a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d001      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e044      	b.n	800342e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1e      	ldr	r2, [pc, #120]	; (800343c <HAL_TIM_Base_Start_IT+0xb0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d018      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x6c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ce:	d013      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x6c>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1a      	ldr	r2, [pc, #104]	; (8003440 <HAL_TIM_Base_Start_IT+0xb4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00e      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x6c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a19      	ldr	r2, [pc, #100]	; (8003444 <HAL_TIM_Base_Start_IT+0xb8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d009      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x6c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a17      	ldr	r2, [pc, #92]	; (8003448 <HAL_TIM_Base_Start_IT+0xbc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d004      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x6c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a16      	ldr	r2, [pc, #88]	; (800344c <HAL_TIM_Base_Start_IT+0xc0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d111      	bne.n	800341c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b06      	cmp	r3, #6
 8003408:	d010      	beq.n	800342c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0201 	orr.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341a:	e007      	b.n	800342c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40010000 	.word	0x40010000
 8003440:	40000400 	.word	0x40000400
 8003444:	40000800 	.word	0x40000800
 8003448:	40000c00 	.word	0x40000c00
 800344c:	40014000 	.word	0x40014000

08003450 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e041      	b.n	80034e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f839 	bl	80034ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3304      	adds	r3, #4
 800348c:	4619      	mov	r1, r3
 800348e:	4610      	mov	r0, r2
 8003490:	f000 fafc 	bl	8003a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b02      	cmp	r3, #2
 8003516:	d122      	bne.n	800355e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b02      	cmp	r3, #2
 8003524:	d11b      	bne.n	800355e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f06f 0202 	mvn.w	r2, #2
 800352e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fa82 	bl	8003a4e <HAL_TIM_IC_CaptureCallback>
 800354a:	e005      	b.n	8003558 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fa74 	bl	8003a3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fa85 	bl	8003a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b04      	cmp	r3, #4
 800356a:	d122      	bne.n	80035b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b04      	cmp	r3, #4
 8003578:	d11b      	bne.n	80035b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f06f 0204 	mvn.w	r2, #4
 8003582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fa58 	bl	8003a4e <HAL_TIM_IC_CaptureCallback>
 800359e:	e005      	b.n	80035ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fa4a 	bl	8003a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fa5b 	bl	8003a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d122      	bne.n	8003606 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d11b      	bne.n	8003606 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f06f 0208 	mvn.w	r2, #8
 80035d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2204      	movs	r2, #4
 80035dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fa2e 	bl	8003a4e <HAL_TIM_IC_CaptureCallback>
 80035f2:	e005      	b.n	8003600 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fa20 	bl	8003a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fa31 	bl	8003a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b10      	cmp	r3, #16
 8003612:	d122      	bne.n	800365a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b10      	cmp	r3, #16
 8003620:	d11b      	bne.n	800365a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f06f 0210 	mvn.w	r2, #16
 800362a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2208      	movs	r2, #8
 8003630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fa04 	bl	8003a4e <HAL_TIM_IC_CaptureCallback>
 8003646:	e005      	b.n	8003654 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f9f6 	bl	8003a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa07 	bl	8003a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b01      	cmp	r3, #1
 8003666:	d10e      	bne.n	8003686 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d107      	bne.n	8003686 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f06f 0201 	mvn.w	r2, #1
 800367e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f9d0 	bl	8003a26 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	2b80      	cmp	r3, #128	; 0x80
 8003692:	d10e      	bne.n	80036b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369e:	2b80      	cmp	r3, #128	; 0x80
 80036a0:	d107      	bne.n	80036b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fd0b 	bl	80040c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036bc:	2b40      	cmp	r3, #64	; 0x40
 80036be:	d10e      	bne.n	80036de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b40      	cmp	r3, #64	; 0x40
 80036cc:	d107      	bne.n	80036de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f9cc 	bl	8003a76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f003 0320 	and.w	r3, r3, #32
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d10e      	bne.n	800370a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d107      	bne.n	800370a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f06f 0220 	mvn.w	r2, #32
 8003702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fcd5 	bl	80040b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800372e:	2302      	movs	r3, #2
 8003730:	e0ae      	b.n	8003890 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b0c      	cmp	r3, #12
 800373e:	f200 809f 	bhi.w	8003880 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003742:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	0800377d 	.word	0x0800377d
 800374c:	08003881 	.word	0x08003881
 8003750:	08003881 	.word	0x08003881
 8003754:	08003881 	.word	0x08003881
 8003758:	080037bd 	.word	0x080037bd
 800375c:	08003881 	.word	0x08003881
 8003760:	08003881 	.word	0x08003881
 8003764:	08003881 	.word	0x08003881
 8003768:	080037ff 	.word	0x080037ff
 800376c:	08003881 	.word	0x08003881
 8003770:	08003881 	.word	0x08003881
 8003774:	08003881 	.word	0x08003881
 8003778:	0800383f 	.word	0x0800383f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fa02 	bl	8003b8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0208 	orr.w	r2, r2, #8
 8003796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0204 	bic.w	r2, r2, #4
 80037a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6999      	ldr	r1, [r3, #24]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	619a      	str	r2, [r3, #24]
      break;
 80037ba:	e064      	b.n	8003886 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fa48 	bl	8003c58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6999      	ldr	r1, [r3, #24]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	021a      	lsls	r2, r3, #8
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	619a      	str	r2, [r3, #24]
      break;
 80037fc:	e043      	b.n	8003886 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68b9      	ldr	r1, [r7, #8]
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fa93 	bl	8003d30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0208 	orr.w	r2, r2, #8
 8003818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69da      	ldr	r2, [r3, #28]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0204 	bic.w	r2, r2, #4
 8003828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69d9      	ldr	r1, [r3, #28]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	61da      	str	r2, [r3, #28]
      break;
 800383c:	e023      	b.n	8003886 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fadd 	bl	8003e04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69da      	ldr	r2, [r3, #28]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69d9      	ldr	r1, [r3, #28]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	021a      	lsls	r2, r3, #8
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	61da      	str	r2, [r3, #28]
      break;
 800387e:	e002      	b.n	8003886 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	75fb      	strb	r3, [r7, #23]
      break;
 8003884:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800388e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_TIM_ConfigClockSource+0x1c>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e0b4      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x186>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ec:	d03e      	beq.n	800396c <HAL_TIM_ConfigClockSource+0xd4>
 80038ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f2:	f200 8087 	bhi.w	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fa:	f000 8086 	beq.w	8003a0a <HAL_TIM_ConfigClockSource+0x172>
 80038fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003902:	d87f      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 8003904:	2b70      	cmp	r3, #112	; 0x70
 8003906:	d01a      	beq.n	800393e <HAL_TIM_ConfigClockSource+0xa6>
 8003908:	2b70      	cmp	r3, #112	; 0x70
 800390a:	d87b      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 800390c:	2b60      	cmp	r3, #96	; 0x60
 800390e:	d050      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003910:	2b60      	cmp	r3, #96	; 0x60
 8003912:	d877      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 8003914:	2b50      	cmp	r3, #80	; 0x50
 8003916:	d03c      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0xfa>
 8003918:	2b50      	cmp	r3, #80	; 0x50
 800391a:	d873      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d058      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003920:	2b40      	cmp	r3, #64	; 0x40
 8003922:	d86f      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 8003924:	2b30      	cmp	r3, #48	; 0x30
 8003926:	d064      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003928:	2b30      	cmp	r3, #48	; 0x30
 800392a:	d86b      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 800392c:	2b20      	cmp	r3, #32
 800392e:	d060      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003930:	2b20      	cmp	r3, #32
 8003932:	d867      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d05c      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003938:	2b10      	cmp	r3, #16
 800393a:	d05a      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0x15a>
 800393c:	e062      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6899      	ldr	r1, [r3, #8]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f000 fb23 	bl	8003f98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003960:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	609a      	str	r2, [r3, #8]
      break;
 800396a:	e04f      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	6899      	ldr	r1, [r3, #8]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f000 fb0c 	bl	8003f98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800398e:	609a      	str	r2, [r3, #8]
      break;
 8003990:	e03c      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6859      	ldr	r1, [r3, #4]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	461a      	mov	r2, r3
 80039a0:	f000 fa80 	bl	8003ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2150      	movs	r1, #80	; 0x50
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fad9 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 80039b0:	e02c      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	461a      	mov	r2, r3
 80039c0:	f000 fa9f 	bl	8003f02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2160      	movs	r1, #96	; 0x60
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fac9 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 80039d0:	e01c      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6859      	ldr	r1, [r3, #4]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	461a      	mov	r2, r3
 80039e0:	f000 fa60 	bl	8003ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2140      	movs	r1, #64	; 0x40
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fab9 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 80039f0:	e00c      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4619      	mov	r1, r3
 80039fc:	4610      	mov	r0, r2
 80039fe:	f000 fab0 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 8003a02:	e003      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
      break;
 8003a08:	e000      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a34      	ldr	r2, [pc, #208]	; (8003b70 <TIM_Base_SetConfig+0xe4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00f      	beq.n	8003ac4 <TIM_Base_SetConfig+0x38>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aaa:	d00b      	beq.n	8003ac4 <TIM_Base_SetConfig+0x38>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a31      	ldr	r2, [pc, #196]	; (8003b74 <TIM_Base_SetConfig+0xe8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d007      	beq.n	8003ac4 <TIM_Base_SetConfig+0x38>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a30      	ldr	r2, [pc, #192]	; (8003b78 <TIM_Base_SetConfig+0xec>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d003      	beq.n	8003ac4 <TIM_Base_SetConfig+0x38>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a2f      	ldr	r2, [pc, #188]	; (8003b7c <TIM_Base_SetConfig+0xf0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d108      	bne.n	8003ad6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a25      	ldr	r2, [pc, #148]	; (8003b70 <TIM_Base_SetConfig+0xe4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01b      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae4:	d017      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a22      	ldr	r2, [pc, #136]	; (8003b74 <TIM_Base_SetConfig+0xe8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <TIM_Base_SetConfig+0xec>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00f      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a20      	ldr	r2, [pc, #128]	; (8003b7c <TIM_Base_SetConfig+0xf0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00b      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1f      	ldr	r2, [pc, #124]	; (8003b80 <TIM_Base_SetConfig+0xf4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d007      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a1e      	ldr	r2, [pc, #120]	; (8003b84 <TIM_Base_SetConfig+0xf8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a1d      	ldr	r2, [pc, #116]	; (8003b88 <TIM_Base_SetConfig+0xfc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d108      	bne.n	8003b28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <TIM_Base_SetConfig+0xe4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d103      	bne.n	8003b5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	615a      	str	r2, [r3, #20]
}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40010000 	.word	0x40010000
 8003b74:	40000400 	.word	0x40000400
 8003b78:	40000800 	.word	0x40000800
 8003b7c:	40000c00 	.word	0x40000c00
 8003b80:	40014000 	.word	0x40014000
 8003b84:	40014400 	.word	0x40014400
 8003b88:	40014800 	.word	0x40014800

08003b8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f023 0201 	bic.w	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f023 0302 	bic.w	r3, r3, #2
 8003bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a1c      	ldr	r2, [pc, #112]	; (8003c54 <TIM_OC1_SetConfig+0xc8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d10c      	bne.n	8003c02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f023 0308 	bic.w	r3, r3, #8
 8003bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f023 0304 	bic.w	r3, r3, #4
 8003c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a13      	ldr	r2, [pc, #76]	; (8003c54 <TIM_OC1_SetConfig+0xc8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d111      	bne.n	8003c2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	621a      	str	r2, [r3, #32]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	40010000 	.word	0x40010000

08003c58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	f023 0210 	bic.w	r2, r3, #16
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f023 0320 	bic.w	r3, r3, #32
 8003ca2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <TIM_OC2_SetConfig+0xd4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d10d      	bne.n	8003cd4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <TIM_OC2_SetConfig+0xd4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d113      	bne.n	8003d04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	621a      	str	r2, [r3, #32]
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40010000 	.word	0x40010000

08003d30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0303 	bic.w	r3, r3, #3
 8003d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	021b      	lsls	r3, r3, #8
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <TIM_OC3_SetConfig+0xd0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d10d      	bne.n	8003daa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <TIM_OC3_SetConfig+0xd0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d113      	bne.n	8003dda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	621a      	str	r2, [r3, #32]
}
 8003df4:	bf00      	nop
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	40010000 	.word	0x40010000

08003e04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	021b      	lsls	r3, r3, #8
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	031b      	lsls	r3, r3, #12
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a10      	ldr	r2, [pc, #64]	; (8003ea0 <TIM_OC4_SetConfig+0x9c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d109      	bne.n	8003e78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	019b      	lsls	r3, r3, #6
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	621a      	str	r2, [r3, #32]
}
 8003e92:	bf00      	nop
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40010000 	.word	0x40010000

08003ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f023 0201 	bic.w	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f023 030a 	bic.w	r3, r3, #10
 8003ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	621a      	str	r2, [r3, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b087      	sub	sp, #28
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f023 0210 	bic.w	r2, r3, #16
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	031b      	lsls	r3, r3, #12
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f043 0307 	orr.w	r3, r3, #7
 8003f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	609a      	str	r2, [r3, #8]
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	021a      	lsls	r2, r3, #8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	609a      	str	r2, [r3, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	371c      	adds	r7, #28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e050      	b.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d018      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403c:	d013      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00e      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a16      	ldr	r2, [pc, #88]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d009      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a15      	ldr	r2, [pc, #84]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a13      	ldr	r2, [pc, #76]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10c      	bne.n	8004080 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	4313      	orrs	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40010000 	.word	0x40010000
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40000800 	.word	0x40000800
 80040ac:	40000c00 	.word	0x40000c00
 80040b0:	40014000 	.word	0x40014000

080040b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <memset>:
 80040dc:	4402      	add	r2, r0
 80040de:	4603      	mov	r3, r0
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d100      	bne.n	80040e6 <memset+0xa>
 80040e4:	4770      	bx	lr
 80040e6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ea:	e7f9      	b.n	80040e0 <memset+0x4>

080040ec <__errno>:
 80040ec:	4b01      	ldr	r3, [pc, #4]	; (80040f4 <__errno+0x8>)
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	2000028c 	.word	0x2000028c

080040f8 <__libc_init_array>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	4d0d      	ldr	r5, [pc, #52]	; (8004130 <__libc_init_array+0x38>)
 80040fc:	4c0d      	ldr	r4, [pc, #52]	; (8004134 <__libc_init_array+0x3c>)
 80040fe:	1b64      	subs	r4, r4, r5
 8004100:	10a4      	asrs	r4, r4, #2
 8004102:	2600      	movs	r6, #0
 8004104:	42a6      	cmp	r6, r4
 8004106:	d109      	bne.n	800411c <__libc_init_array+0x24>
 8004108:	4d0b      	ldr	r5, [pc, #44]	; (8004138 <__libc_init_array+0x40>)
 800410a:	4c0c      	ldr	r4, [pc, #48]	; (800413c <__libc_init_array+0x44>)
 800410c:	f000 ff50 	bl	8004fb0 <_init>
 8004110:	1b64      	subs	r4, r4, r5
 8004112:	10a4      	asrs	r4, r4, #2
 8004114:	2600      	movs	r6, #0
 8004116:	42a6      	cmp	r6, r4
 8004118:	d105      	bne.n	8004126 <__libc_init_array+0x2e>
 800411a:	bd70      	pop	{r4, r5, r6, pc}
 800411c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004120:	4798      	blx	r3
 8004122:	3601      	adds	r6, #1
 8004124:	e7ee      	b.n	8004104 <__libc_init_array+0xc>
 8004126:	f855 3b04 	ldr.w	r3, [r5], #4
 800412a:	4798      	blx	r3
 800412c:	3601      	adds	r6, #1
 800412e:	e7f2      	b.n	8004116 <__libc_init_array+0x1e>
 8004130:	08005018 	.word	0x08005018
 8004134:	08005018 	.word	0x08005018
 8004138:	08005018 	.word	0x08005018
 800413c:	0800501c 	.word	0x0800501c

08004140 <pow>:
 8004140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004142:	ed2d 8b02 	vpush	{d8}
 8004146:	eeb0 8a40 	vmov.f32	s16, s0
 800414a:	eef0 8a60 	vmov.f32	s17, s1
 800414e:	ec55 4b11 	vmov	r4, r5, d1
 8004152:	f000 f871 	bl	8004238 <__ieee754_pow>
 8004156:	4622      	mov	r2, r4
 8004158:	462b      	mov	r3, r5
 800415a:	4620      	mov	r0, r4
 800415c:	4629      	mov	r1, r5
 800415e:	ec57 6b10 	vmov	r6, r7, d0
 8004162:	f7fc fc8f 	bl	8000a84 <__aeabi_dcmpun>
 8004166:	2800      	cmp	r0, #0
 8004168:	d13b      	bne.n	80041e2 <pow+0xa2>
 800416a:	ec51 0b18 	vmov	r0, r1, d8
 800416e:	2200      	movs	r2, #0
 8004170:	2300      	movs	r3, #0
 8004172:	f7fc fc55 	bl	8000a20 <__aeabi_dcmpeq>
 8004176:	b1b8      	cbz	r0, 80041a8 <pow+0x68>
 8004178:	2200      	movs	r2, #0
 800417a:	2300      	movs	r3, #0
 800417c:	4620      	mov	r0, r4
 800417e:	4629      	mov	r1, r5
 8004180:	f7fc fc4e 	bl	8000a20 <__aeabi_dcmpeq>
 8004184:	2800      	cmp	r0, #0
 8004186:	d146      	bne.n	8004216 <pow+0xd6>
 8004188:	ec45 4b10 	vmov	d0, r4, r5
 800418c:	f000 f848 	bl	8004220 <finite>
 8004190:	b338      	cbz	r0, 80041e2 <pow+0xa2>
 8004192:	2200      	movs	r2, #0
 8004194:	2300      	movs	r3, #0
 8004196:	4620      	mov	r0, r4
 8004198:	4629      	mov	r1, r5
 800419a:	f7fc fc4b 	bl	8000a34 <__aeabi_dcmplt>
 800419e:	b300      	cbz	r0, 80041e2 <pow+0xa2>
 80041a0:	f7ff ffa4 	bl	80040ec <__errno>
 80041a4:	2322      	movs	r3, #34	; 0x22
 80041a6:	e01b      	b.n	80041e0 <pow+0xa0>
 80041a8:	ec47 6b10 	vmov	d0, r6, r7
 80041ac:	f000 f838 	bl	8004220 <finite>
 80041b0:	b9e0      	cbnz	r0, 80041ec <pow+0xac>
 80041b2:	eeb0 0a48 	vmov.f32	s0, s16
 80041b6:	eef0 0a68 	vmov.f32	s1, s17
 80041ba:	f000 f831 	bl	8004220 <finite>
 80041be:	b1a8      	cbz	r0, 80041ec <pow+0xac>
 80041c0:	ec45 4b10 	vmov	d0, r4, r5
 80041c4:	f000 f82c 	bl	8004220 <finite>
 80041c8:	b180      	cbz	r0, 80041ec <pow+0xac>
 80041ca:	4632      	mov	r2, r6
 80041cc:	463b      	mov	r3, r7
 80041ce:	4630      	mov	r0, r6
 80041d0:	4639      	mov	r1, r7
 80041d2:	f7fc fc57 	bl	8000a84 <__aeabi_dcmpun>
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d0e2      	beq.n	80041a0 <pow+0x60>
 80041da:	f7ff ff87 	bl	80040ec <__errno>
 80041de:	2321      	movs	r3, #33	; 0x21
 80041e0:	6003      	str	r3, [r0, #0]
 80041e2:	ecbd 8b02 	vpop	{d8}
 80041e6:	ec47 6b10 	vmov	d0, r6, r7
 80041ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041ec:	2200      	movs	r2, #0
 80041ee:	2300      	movs	r3, #0
 80041f0:	4630      	mov	r0, r6
 80041f2:	4639      	mov	r1, r7
 80041f4:	f7fc fc14 	bl	8000a20 <__aeabi_dcmpeq>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d0f2      	beq.n	80041e2 <pow+0xa2>
 80041fc:	eeb0 0a48 	vmov.f32	s0, s16
 8004200:	eef0 0a68 	vmov.f32	s1, s17
 8004204:	f000 f80c 	bl	8004220 <finite>
 8004208:	2800      	cmp	r0, #0
 800420a:	d0ea      	beq.n	80041e2 <pow+0xa2>
 800420c:	ec45 4b10 	vmov	d0, r4, r5
 8004210:	f000 f806 	bl	8004220 <finite>
 8004214:	e7c3      	b.n	800419e <pow+0x5e>
 8004216:	4f01      	ldr	r7, [pc, #4]	; (800421c <pow+0xdc>)
 8004218:	2600      	movs	r6, #0
 800421a:	e7e2      	b.n	80041e2 <pow+0xa2>
 800421c:	3ff00000 	.word	0x3ff00000

08004220 <finite>:
 8004220:	b082      	sub	sp, #8
 8004222:	ed8d 0b00 	vstr	d0, [sp]
 8004226:	9801      	ldr	r0, [sp, #4]
 8004228:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800422c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004230:	0fc0      	lsrs	r0, r0, #31
 8004232:	b002      	add	sp, #8
 8004234:	4770      	bx	lr
	...

08004238 <__ieee754_pow>:
 8004238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423c:	ed2d 8b06 	vpush	{d8-d10}
 8004240:	b089      	sub	sp, #36	; 0x24
 8004242:	ed8d 1b00 	vstr	d1, [sp]
 8004246:	e9dd 2900 	ldrd	r2, r9, [sp]
 800424a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800424e:	ea58 0102 	orrs.w	r1, r8, r2
 8004252:	ec57 6b10 	vmov	r6, r7, d0
 8004256:	d115      	bne.n	8004284 <__ieee754_pow+0x4c>
 8004258:	19b3      	adds	r3, r6, r6
 800425a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800425e:	4152      	adcs	r2, r2
 8004260:	4299      	cmp	r1, r3
 8004262:	4b89      	ldr	r3, [pc, #548]	; (8004488 <__ieee754_pow+0x250>)
 8004264:	4193      	sbcs	r3, r2
 8004266:	f080 84d1 	bcs.w	8004c0c <__ieee754_pow+0x9d4>
 800426a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800426e:	4630      	mov	r0, r6
 8004270:	4639      	mov	r1, r7
 8004272:	f7fb ffb7 	bl	80001e4 <__adddf3>
 8004276:	ec41 0b10 	vmov	d0, r0, r1
 800427a:	b009      	add	sp, #36	; 0x24
 800427c:	ecbd 8b06 	vpop	{d8-d10}
 8004280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004284:	4b81      	ldr	r3, [pc, #516]	; (800448c <__ieee754_pow+0x254>)
 8004286:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800428a:	429c      	cmp	r4, r3
 800428c:	ee10 aa10 	vmov	sl, s0
 8004290:	463d      	mov	r5, r7
 8004292:	dc06      	bgt.n	80042a2 <__ieee754_pow+0x6a>
 8004294:	d101      	bne.n	800429a <__ieee754_pow+0x62>
 8004296:	2e00      	cmp	r6, #0
 8004298:	d1e7      	bne.n	800426a <__ieee754_pow+0x32>
 800429a:	4598      	cmp	r8, r3
 800429c:	dc01      	bgt.n	80042a2 <__ieee754_pow+0x6a>
 800429e:	d10f      	bne.n	80042c0 <__ieee754_pow+0x88>
 80042a0:	b172      	cbz	r2, 80042c0 <__ieee754_pow+0x88>
 80042a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80042a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80042aa:	ea55 050a 	orrs.w	r5, r5, sl
 80042ae:	d1dc      	bne.n	800426a <__ieee754_pow+0x32>
 80042b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80042b4:	18db      	adds	r3, r3, r3
 80042b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80042ba:	4152      	adcs	r2, r2
 80042bc:	429d      	cmp	r5, r3
 80042be:	e7d0      	b.n	8004262 <__ieee754_pow+0x2a>
 80042c0:	2d00      	cmp	r5, #0
 80042c2:	da3b      	bge.n	800433c <__ieee754_pow+0x104>
 80042c4:	4b72      	ldr	r3, [pc, #456]	; (8004490 <__ieee754_pow+0x258>)
 80042c6:	4598      	cmp	r8, r3
 80042c8:	dc51      	bgt.n	800436e <__ieee754_pow+0x136>
 80042ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80042ce:	4598      	cmp	r8, r3
 80042d0:	f340 84ab 	ble.w	8004c2a <__ieee754_pow+0x9f2>
 80042d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80042d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80042dc:	2b14      	cmp	r3, #20
 80042de:	dd0f      	ble.n	8004300 <__ieee754_pow+0xc8>
 80042e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80042e4:	fa22 f103 	lsr.w	r1, r2, r3
 80042e8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ec:	4293      	cmp	r3, r2
 80042ee:	f040 849c 	bne.w	8004c2a <__ieee754_pow+0x9f2>
 80042f2:	f001 0101 	and.w	r1, r1, #1
 80042f6:	f1c1 0302 	rsb	r3, r1, #2
 80042fa:	9304      	str	r3, [sp, #16]
 80042fc:	b182      	cbz	r2, 8004320 <__ieee754_pow+0xe8>
 80042fe:	e05f      	b.n	80043c0 <__ieee754_pow+0x188>
 8004300:	2a00      	cmp	r2, #0
 8004302:	d15b      	bne.n	80043bc <__ieee754_pow+0x184>
 8004304:	f1c3 0314 	rsb	r3, r3, #20
 8004308:	fa48 f103 	asr.w	r1, r8, r3
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	4543      	cmp	r3, r8
 8004312:	f040 8487 	bne.w	8004c24 <__ieee754_pow+0x9ec>
 8004316:	f001 0101 	and.w	r1, r1, #1
 800431a:	f1c1 0302 	rsb	r3, r1, #2
 800431e:	9304      	str	r3, [sp, #16]
 8004320:	4b5c      	ldr	r3, [pc, #368]	; (8004494 <__ieee754_pow+0x25c>)
 8004322:	4598      	cmp	r8, r3
 8004324:	d132      	bne.n	800438c <__ieee754_pow+0x154>
 8004326:	f1b9 0f00 	cmp.w	r9, #0
 800432a:	f280 8477 	bge.w	8004c1c <__ieee754_pow+0x9e4>
 800432e:	4959      	ldr	r1, [pc, #356]	; (8004494 <__ieee754_pow+0x25c>)
 8004330:	4632      	mov	r2, r6
 8004332:	463b      	mov	r3, r7
 8004334:	2000      	movs	r0, #0
 8004336:	f7fc fa35 	bl	80007a4 <__aeabi_ddiv>
 800433a:	e79c      	b.n	8004276 <__ieee754_pow+0x3e>
 800433c:	2300      	movs	r3, #0
 800433e:	9304      	str	r3, [sp, #16]
 8004340:	2a00      	cmp	r2, #0
 8004342:	d13d      	bne.n	80043c0 <__ieee754_pow+0x188>
 8004344:	4b51      	ldr	r3, [pc, #324]	; (800448c <__ieee754_pow+0x254>)
 8004346:	4598      	cmp	r8, r3
 8004348:	d1ea      	bne.n	8004320 <__ieee754_pow+0xe8>
 800434a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800434e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004352:	ea53 030a 	orrs.w	r3, r3, sl
 8004356:	f000 8459 	beq.w	8004c0c <__ieee754_pow+0x9d4>
 800435a:	4b4f      	ldr	r3, [pc, #316]	; (8004498 <__ieee754_pow+0x260>)
 800435c:	429c      	cmp	r4, r3
 800435e:	dd08      	ble.n	8004372 <__ieee754_pow+0x13a>
 8004360:	f1b9 0f00 	cmp.w	r9, #0
 8004364:	f2c0 8456 	blt.w	8004c14 <__ieee754_pow+0x9dc>
 8004368:	e9dd 0100 	ldrd	r0, r1, [sp]
 800436c:	e783      	b.n	8004276 <__ieee754_pow+0x3e>
 800436e:	2302      	movs	r3, #2
 8004370:	e7e5      	b.n	800433e <__ieee754_pow+0x106>
 8004372:	f1b9 0f00 	cmp.w	r9, #0
 8004376:	f04f 0000 	mov.w	r0, #0
 800437a:	f04f 0100 	mov.w	r1, #0
 800437e:	f6bf af7a 	bge.w	8004276 <__ieee754_pow+0x3e>
 8004382:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004386:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800438a:	e774      	b.n	8004276 <__ieee754_pow+0x3e>
 800438c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004390:	d106      	bne.n	80043a0 <__ieee754_pow+0x168>
 8004392:	4632      	mov	r2, r6
 8004394:	463b      	mov	r3, r7
 8004396:	4630      	mov	r0, r6
 8004398:	4639      	mov	r1, r7
 800439a:	f7fc f8d9 	bl	8000550 <__aeabi_dmul>
 800439e:	e76a      	b.n	8004276 <__ieee754_pow+0x3e>
 80043a0:	4b3e      	ldr	r3, [pc, #248]	; (800449c <__ieee754_pow+0x264>)
 80043a2:	4599      	cmp	r9, r3
 80043a4:	d10c      	bne.n	80043c0 <__ieee754_pow+0x188>
 80043a6:	2d00      	cmp	r5, #0
 80043a8:	db0a      	blt.n	80043c0 <__ieee754_pow+0x188>
 80043aa:	ec47 6b10 	vmov	d0, r6, r7
 80043ae:	b009      	add	sp, #36	; 0x24
 80043b0:	ecbd 8b06 	vpop	{d8-d10}
 80043b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b8:	f000 bd20 	b.w	8004dfc <__ieee754_sqrt>
 80043bc:	2300      	movs	r3, #0
 80043be:	9304      	str	r3, [sp, #16]
 80043c0:	ec47 6b10 	vmov	d0, r6, r7
 80043c4:	f000 fc62 	bl	8004c8c <fabs>
 80043c8:	ec51 0b10 	vmov	r0, r1, d0
 80043cc:	f1ba 0f00 	cmp.w	sl, #0
 80043d0:	d129      	bne.n	8004426 <__ieee754_pow+0x1ee>
 80043d2:	b124      	cbz	r4, 80043de <__ieee754_pow+0x1a6>
 80043d4:	4b2f      	ldr	r3, [pc, #188]	; (8004494 <__ieee754_pow+0x25c>)
 80043d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80043da:	429a      	cmp	r2, r3
 80043dc:	d123      	bne.n	8004426 <__ieee754_pow+0x1ee>
 80043de:	f1b9 0f00 	cmp.w	r9, #0
 80043e2:	da05      	bge.n	80043f0 <__ieee754_pow+0x1b8>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	2000      	movs	r0, #0
 80043ea:	492a      	ldr	r1, [pc, #168]	; (8004494 <__ieee754_pow+0x25c>)
 80043ec:	f7fc f9da 	bl	80007a4 <__aeabi_ddiv>
 80043f0:	2d00      	cmp	r5, #0
 80043f2:	f6bf af40 	bge.w	8004276 <__ieee754_pow+0x3e>
 80043f6:	9b04      	ldr	r3, [sp, #16]
 80043f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80043fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004400:	431c      	orrs	r4, r3
 8004402:	d108      	bne.n	8004416 <__ieee754_pow+0x1de>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4610      	mov	r0, r2
 800440a:	4619      	mov	r1, r3
 800440c:	f7fb fee8 	bl	80001e0 <__aeabi_dsub>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	e78f      	b.n	8004336 <__ieee754_pow+0xfe>
 8004416:	9b04      	ldr	r3, [sp, #16]
 8004418:	2b01      	cmp	r3, #1
 800441a:	f47f af2c 	bne.w	8004276 <__ieee754_pow+0x3e>
 800441e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004422:	4619      	mov	r1, r3
 8004424:	e727      	b.n	8004276 <__ieee754_pow+0x3e>
 8004426:	0feb      	lsrs	r3, r5, #31
 8004428:	3b01      	subs	r3, #1
 800442a:	9306      	str	r3, [sp, #24]
 800442c:	9a06      	ldr	r2, [sp, #24]
 800442e:	9b04      	ldr	r3, [sp, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	d102      	bne.n	800443a <__ieee754_pow+0x202>
 8004434:	4632      	mov	r2, r6
 8004436:	463b      	mov	r3, r7
 8004438:	e7e6      	b.n	8004408 <__ieee754_pow+0x1d0>
 800443a:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <__ieee754_pow+0x268>)
 800443c:	4598      	cmp	r8, r3
 800443e:	f340 80fb 	ble.w	8004638 <__ieee754_pow+0x400>
 8004442:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004446:	4598      	cmp	r8, r3
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <__ieee754_pow+0x260>)
 800444a:	dd0c      	ble.n	8004466 <__ieee754_pow+0x22e>
 800444c:	429c      	cmp	r4, r3
 800444e:	dc0f      	bgt.n	8004470 <__ieee754_pow+0x238>
 8004450:	f1b9 0f00 	cmp.w	r9, #0
 8004454:	da0f      	bge.n	8004476 <__ieee754_pow+0x23e>
 8004456:	2000      	movs	r0, #0
 8004458:	b009      	add	sp, #36	; 0x24
 800445a:	ecbd 8b06 	vpop	{d8-d10}
 800445e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004462:	f000 bcc2 	b.w	8004dea <__math_oflow>
 8004466:	429c      	cmp	r4, r3
 8004468:	dbf2      	blt.n	8004450 <__ieee754_pow+0x218>
 800446a:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <__ieee754_pow+0x25c>)
 800446c:	429c      	cmp	r4, r3
 800446e:	dd19      	ble.n	80044a4 <__ieee754_pow+0x26c>
 8004470:	f1b9 0f00 	cmp.w	r9, #0
 8004474:	dcef      	bgt.n	8004456 <__ieee754_pow+0x21e>
 8004476:	2000      	movs	r0, #0
 8004478:	b009      	add	sp, #36	; 0x24
 800447a:	ecbd 8b06 	vpop	{d8-d10}
 800447e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004482:	f000 bca9 	b.w	8004dd8 <__math_uflow>
 8004486:	bf00      	nop
 8004488:	fff00000 	.word	0xfff00000
 800448c:	7ff00000 	.word	0x7ff00000
 8004490:	433fffff 	.word	0x433fffff
 8004494:	3ff00000 	.word	0x3ff00000
 8004498:	3fefffff 	.word	0x3fefffff
 800449c:	3fe00000 	.word	0x3fe00000
 80044a0:	41e00000 	.word	0x41e00000
 80044a4:	4b60      	ldr	r3, [pc, #384]	; (8004628 <__ieee754_pow+0x3f0>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	f7fb fe9a 	bl	80001e0 <__aeabi_dsub>
 80044ac:	a354      	add	r3, pc, #336	; (adr r3, 8004600 <__ieee754_pow+0x3c8>)
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	4604      	mov	r4, r0
 80044b4:	460d      	mov	r5, r1
 80044b6:	f7fc f84b 	bl	8000550 <__aeabi_dmul>
 80044ba:	a353      	add	r3, pc, #332	; (adr r3, 8004608 <__ieee754_pow+0x3d0>)
 80044bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c0:	4606      	mov	r6, r0
 80044c2:	460f      	mov	r7, r1
 80044c4:	4620      	mov	r0, r4
 80044c6:	4629      	mov	r1, r5
 80044c8:	f7fc f842 	bl	8000550 <__aeabi_dmul>
 80044cc:	4b57      	ldr	r3, [pc, #348]	; (800462c <__ieee754_pow+0x3f4>)
 80044ce:	4682      	mov	sl, r0
 80044d0:	468b      	mov	fp, r1
 80044d2:	2200      	movs	r2, #0
 80044d4:	4620      	mov	r0, r4
 80044d6:	4629      	mov	r1, r5
 80044d8:	f7fc f83a 	bl	8000550 <__aeabi_dmul>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	a14b      	add	r1, pc, #300	; (adr r1, 8004610 <__ieee754_pow+0x3d8>)
 80044e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044e6:	f7fb fe7b 	bl	80001e0 <__aeabi_dsub>
 80044ea:	4622      	mov	r2, r4
 80044ec:	462b      	mov	r3, r5
 80044ee:	f7fc f82f 	bl	8000550 <__aeabi_dmul>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	2000      	movs	r0, #0
 80044f8:	494d      	ldr	r1, [pc, #308]	; (8004630 <__ieee754_pow+0x3f8>)
 80044fa:	f7fb fe71 	bl	80001e0 <__aeabi_dsub>
 80044fe:	4622      	mov	r2, r4
 8004500:	4680      	mov	r8, r0
 8004502:	4689      	mov	r9, r1
 8004504:	462b      	mov	r3, r5
 8004506:	4620      	mov	r0, r4
 8004508:	4629      	mov	r1, r5
 800450a:	f7fc f821 	bl	8000550 <__aeabi_dmul>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4640      	mov	r0, r8
 8004514:	4649      	mov	r1, r9
 8004516:	f7fc f81b 	bl	8000550 <__aeabi_dmul>
 800451a:	a33f      	add	r3, pc, #252	; (adr r3, 8004618 <__ieee754_pow+0x3e0>)
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	f7fc f816 	bl	8000550 <__aeabi_dmul>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4650      	mov	r0, sl
 800452a:	4659      	mov	r1, fp
 800452c:	f7fb fe58 	bl	80001e0 <__aeabi_dsub>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4680      	mov	r8, r0
 8004536:	4689      	mov	r9, r1
 8004538:	4630      	mov	r0, r6
 800453a:	4639      	mov	r1, r7
 800453c:	f7fb fe52 	bl	80001e4 <__adddf3>
 8004540:	2000      	movs	r0, #0
 8004542:	4632      	mov	r2, r6
 8004544:	463b      	mov	r3, r7
 8004546:	4604      	mov	r4, r0
 8004548:	460d      	mov	r5, r1
 800454a:	f7fb fe49 	bl	80001e0 <__aeabi_dsub>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4640      	mov	r0, r8
 8004554:	4649      	mov	r1, r9
 8004556:	f7fb fe43 	bl	80001e0 <__aeabi_dsub>
 800455a:	9b04      	ldr	r3, [sp, #16]
 800455c:	9a06      	ldr	r2, [sp, #24]
 800455e:	3b01      	subs	r3, #1
 8004560:	4313      	orrs	r3, r2
 8004562:	4682      	mov	sl, r0
 8004564:	468b      	mov	fp, r1
 8004566:	f040 81e7 	bne.w	8004938 <__ieee754_pow+0x700>
 800456a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004620 <__ieee754_pow+0x3e8>
 800456e:	eeb0 8a47 	vmov.f32	s16, s14
 8004572:	eef0 8a67 	vmov.f32	s17, s15
 8004576:	e9dd 6700 	ldrd	r6, r7, [sp]
 800457a:	2600      	movs	r6, #0
 800457c:	4632      	mov	r2, r6
 800457e:	463b      	mov	r3, r7
 8004580:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004584:	f7fb fe2c 	bl	80001e0 <__aeabi_dsub>
 8004588:	4622      	mov	r2, r4
 800458a:	462b      	mov	r3, r5
 800458c:	f7fb ffe0 	bl	8000550 <__aeabi_dmul>
 8004590:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004594:	4680      	mov	r8, r0
 8004596:	4689      	mov	r9, r1
 8004598:	4650      	mov	r0, sl
 800459a:	4659      	mov	r1, fp
 800459c:	f7fb ffd8 	bl	8000550 <__aeabi_dmul>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4640      	mov	r0, r8
 80045a6:	4649      	mov	r1, r9
 80045a8:	f7fb fe1c 	bl	80001e4 <__adddf3>
 80045ac:	4632      	mov	r2, r6
 80045ae:	463b      	mov	r3, r7
 80045b0:	4680      	mov	r8, r0
 80045b2:	4689      	mov	r9, r1
 80045b4:	4620      	mov	r0, r4
 80045b6:	4629      	mov	r1, r5
 80045b8:	f7fb ffca 	bl	8000550 <__aeabi_dmul>
 80045bc:	460b      	mov	r3, r1
 80045be:	4604      	mov	r4, r0
 80045c0:	460d      	mov	r5, r1
 80045c2:	4602      	mov	r2, r0
 80045c4:	4649      	mov	r1, r9
 80045c6:	4640      	mov	r0, r8
 80045c8:	f7fb fe0c 	bl	80001e4 <__adddf3>
 80045cc:	4b19      	ldr	r3, [pc, #100]	; (8004634 <__ieee754_pow+0x3fc>)
 80045ce:	4299      	cmp	r1, r3
 80045d0:	ec45 4b19 	vmov	d9, r4, r5
 80045d4:	4606      	mov	r6, r0
 80045d6:	460f      	mov	r7, r1
 80045d8:	468b      	mov	fp, r1
 80045da:	f340 82f0 	ble.w	8004bbe <__ieee754_pow+0x986>
 80045de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80045e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80045e6:	4303      	orrs	r3, r0
 80045e8:	f000 81e4 	beq.w	80049b4 <__ieee754_pow+0x77c>
 80045ec:	ec51 0b18 	vmov	r0, r1, d8
 80045f0:	2200      	movs	r2, #0
 80045f2:	2300      	movs	r3, #0
 80045f4:	f7fc fa1e 	bl	8000a34 <__aeabi_dcmplt>
 80045f8:	3800      	subs	r0, #0
 80045fa:	bf18      	it	ne
 80045fc:	2001      	movne	r0, #1
 80045fe:	e72b      	b.n	8004458 <__ieee754_pow+0x220>
 8004600:	60000000 	.word	0x60000000
 8004604:	3ff71547 	.word	0x3ff71547
 8004608:	f85ddf44 	.word	0xf85ddf44
 800460c:	3e54ae0b 	.word	0x3e54ae0b
 8004610:	55555555 	.word	0x55555555
 8004614:	3fd55555 	.word	0x3fd55555
 8004618:	652b82fe 	.word	0x652b82fe
 800461c:	3ff71547 	.word	0x3ff71547
 8004620:	00000000 	.word	0x00000000
 8004624:	bff00000 	.word	0xbff00000
 8004628:	3ff00000 	.word	0x3ff00000
 800462c:	3fd00000 	.word	0x3fd00000
 8004630:	3fe00000 	.word	0x3fe00000
 8004634:	408fffff 	.word	0x408fffff
 8004638:	4bd5      	ldr	r3, [pc, #852]	; (8004990 <__ieee754_pow+0x758>)
 800463a:	402b      	ands	r3, r5
 800463c:	2200      	movs	r2, #0
 800463e:	b92b      	cbnz	r3, 800464c <__ieee754_pow+0x414>
 8004640:	4bd4      	ldr	r3, [pc, #848]	; (8004994 <__ieee754_pow+0x75c>)
 8004642:	f7fb ff85 	bl	8000550 <__aeabi_dmul>
 8004646:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800464a:	460c      	mov	r4, r1
 800464c:	1523      	asrs	r3, r4, #20
 800464e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004652:	4413      	add	r3, r2
 8004654:	9305      	str	r3, [sp, #20]
 8004656:	4bd0      	ldr	r3, [pc, #832]	; (8004998 <__ieee754_pow+0x760>)
 8004658:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800465c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004660:	429c      	cmp	r4, r3
 8004662:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004666:	dd08      	ble.n	800467a <__ieee754_pow+0x442>
 8004668:	4bcc      	ldr	r3, [pc, #816]	; (800499c <__ieee754_pow+0x764>)
 800466a:	429c      	cmp	r4, r3
 800466c:	f340 8162 	ble.w	8004934 <__ieee754_pow+0x6fc>
 8004670:	9b05      	ldr	r3, [sp, #20]
 8004672:	3301      	adds	r3, #1
 8004674:	9305      	str	r3, [sp, #20]
 8004676:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800467a:	2400      	movs	r4, #0
 800467c:	00e3      	lsls	r3, r4, #3
 800467e:	9307      	str	r3, [sp, #28]
 8004680:	4bc7      	ldr	r3, [pc, #796]	; (80049a0 <__ieee754_pow+0x768>)
 8004682:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004686:	ed93 7b00 	vldr	d7, [r3]
 800468a:	4629      	mov	r1, r5
 800468c:	ec53 2b17 	vmov	r2, r3, d7
 8004690:	eeb0 9a47 	vmov.f32	s18, s14
 8004694:	eef0 9a67 	vmov.f32	s19, s15
 8004698:	4682      	mov	sl, r0
 800469a:	f7fb fda1 	bl	80001e0 <__aeabi_dsub>
 800469e:	4652      	mov	r2, sl
 80046a0:	4606      	mov	r6, r0
 80046a2:	460f      	mov	r7, r1
 80046a4:	462b      	mov	r3, r5
 80046a6:	ec51 0b19 	vmov	r0, r1, d9
 80046aa:	f7fb fd9b 	bl	80001e4 <__adddf3>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	2000      	movs	r0, #0
 80046b4:	49bb      	ldr	r1, [pc, #748]	; (80049a4 <__ieee754_pow+0x76c>)
 80046b6:	f7fc f875 	bl	80007a4 <__aeabi_ddiv>
 80046ba:	ec41 0b1a 	vmov	d10, r0, r1
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4630      	mov	r0, r6
 80046c4:	4639      	mov	r1, r7
 80046c6:	f7fb ff43 	bl	8000550 <__aeabi_dmul>
 80046ca:	2300      	movs	r3, #0
 80046cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046d0:	9302      	str	r3, [sp, #8]
 80046d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80046d6:	46ab      	mov	fp, r5
 80046d8:	106d      	asrs	r5, r5, #1
 80046da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80046de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80046e2:	ec41 0b18 	vmov	d8, r0, r1
 80046e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80046ea:	2200      	movs	r2, #0
 80046ec:	4640      	mov	r0, r8
 80046ee:	4649      	mov	r1, r9
 80046f0:	4614      	mov	r4, r2
 80046f2:	461d      	mov	r5, r3
 80046f4:	f7fb ff2c 	bl	8000550 <__aeabi_dmul>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4630      	mov	r0, r6
 80046fe:	4639      	mov	r1, r7
 8004700:	f7fb fd6e 	bl	80001e0 <__aeabi_dsub>
 8004704:	ec53 2b19 	vmov	r2, r3, d9
 8004708:	4606      	mov	r6, r0
 800470a:	460f      	mov	r7, r1
 800470c:	4620      	mov	r0, r4
 800470e:	4629      	mov	r1, r5
 8004710:	f7fb fd66 	bl	80001e0 <__aeabi_dsub>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4650      	mov	r0, sl
 800471a:	4659      	mov	r1, fp
 800471c:	f7fb fd60 	bl	80001e0 <__aeabi_dsub>
 8004720:	4642      	mov	r2, r8
 8004722:	464b      	mov	r3, r9
 8004724:	f7fb ff14 	bl	8000550 <__aeabi_dmul>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4630      	mov	r0, r6
 800472e:	4639      	mov	r1, r7
 8004730:	f7fb fd56 	bl	80001e0 <__aeabi_dsub>
 8004734:	ec53 2b1a 	vmov	r2, r3, d10
 8004738:	f7fb ff0a 	bl	8000550 <__aeabi_dmul>
 800473c:	ec53 2b18 	vmov	r2, r3, d8
 8004740:	ec41 0b19 	vmov	d9, r0, r1
 8004744:	ec51 0b18 	vmov	r0, r1, d8
 8004748:	f7fb ff02 	bl	8000550 <__aeabi_dmul>
 800474c:	a37c      	add	r3, pc, #496	; (adr r3, 8004940 <__ieee754_pow+0x708>)
 800474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004752:	4604      	mov	r4, r0
 8004754:	460d      	mov	r5, r1
 8004756:	f7fb fefb 	bl	8000550 <__aeabi_dmul>
 800475a:	a37b      	add	r3, pc, #492	; (adr r3, 8004948 <__ieee754_pow+0x710>)
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f7fb fd40 	bl	80001e4 <__adddf3>
 8004764:	4622      	mov	r2, r4
 8004766:	462b      	mov	r3, r5
 8004768:	f7fb fef2 	bl	8000550 <__aeabi_dmul>
 800476c:	a378      	add	r3, pc, #480	; (adr r3, 8004950 <__ieee754_pow+0x718>)
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	f7fb fd37 	bl	80001e4 <__adddf3>
 8004776:	4622      	mov	r2, r4
 8004778:	462b      	mov	r3, r5
 800477a:	f7fb fee9 	bl	8000550 <__aeabi_dmul>
 800477e:	a376      	add	r3, pc, #472	; (adr r3, 8004958 <__ieee754_pow+0x720>)
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	f7fb fd2e 	bl	80001e4 <__adddf3>
 8004788:	4622      	mov	r2, r4
 800478a:	462b      	mov	r3, r5
 800478c:	f7fb fee0 	bl	8000550 <__aeabi_dmul>
 8004790:	a373      	add	r3, pc, #460	; (adr r3, 8004960 <__ieee754_pow+0x728>)
 8004792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004796:	f7fb fd25 	bl	80001e4 <__adddf3>
 800479a:	4622      	mov	r2, r4
 800479c:	462b      	mov	r3, r5
 800479e:	f7fb fed7 	bl	8000550 <__aeabi_dmul>
 80047a2:	a371      	add	r3, pc, #452	; (adr r3, 8004968 <__ieee754_pow+0x730>)
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	f7fb fd1c 	bl	80001e4 <__adddf3>
 80047ac:	4622      	mov	r2, r4
 80047ae:	4606      	mov	r6, r0
 80047b0:	460f      	mov	r7, r1
 80047b2:	462b      	mov	r3, r5
 80047b4:	4620      	mov	r0, r4
 80047b6:	4629      	mov	r1, r5
 80047b8:	f7fb feca 	bl	8000550 <__aeabi_dmul>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4630      	mov	r0, r6
 80047c2:	4639      	mov	r1, r7
 80047c4:	f7fb fec4 	bl	8000550 <__aeabi_dmul>
 80047c8:	4642      	mov	r2, r8
 80047ca:	4604      	mov	r4, r0
 80047cc:	460d      	mov	r5, r1
 80047ce:	464b      	mov	r3, r9
 80047d0:	ec51 0b18 	vmov	r0, r1, d8
 80047d4:	f7fb fd06 	bl	80001e4 <__adddf3>
 80047d8:	ec53 2b19 	vmov	r2, r3, d9
 80047dc:	f7fb feb8 	bl	8000550 <__aeabi_dmul>
 80047e0:	4622      	mov	r2, r4
 80047e2:	462b      	mov	r3, r5
 80047e4:	f7fb fcfe 	bl	80001e4 <__adddf3>
 80047e8:	4642      	mov	r2, r8
 80047ea:	4682      	mov	sl, r0
 80047ec:	468b      	mov	fp, r1
 80047ee:	464b      	mov	r3, r9
 80047f0:	4640      	mov	r0, r8
 80047f2:	4649      	mov	r1, r9
 80047f4:	f7fb feac 	bl	8000550 <__aeabi_dmul>
 80047f8:	4b6b      	ldr	r3, [pc, #428]	; (80049a8 <__ieee754_pow+0x770>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	4606      	mov	r6, r0
 80047fe:	460f      	mov	r7, r1
 8004800:	f7fb fcf0 	bl	80001e4 <__adddf3>
 8004804:	4652      	mov	r2, sl
 8004806:	465b      	mov	r3, fp
 8004808:	f7fb fcec 	bl	80001e4 <__adddf3>
 800480c:	2000      	movs	r0, #0
 800480e:	4604      	mov	r4, r0
 8004810:	460d      	mov	r5, r1
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4640      	mov	r0, r8
 8004818:	4649      	mov	r1, r9
 800481a:	f7fb fe99 	bl	8000550 <__aeabi_dmul>
 800481e:	4b62      	ldr	r3, [pc, #392]	; (80049a8 <__ieee754_pow+0x770>)
 8004820:	4680      	mov	r8, r0
 8004822:	4689      	mov	r9, r1
 8004824:	2200      	movs	r2, #0
 8004826:	4620      	mov	r0, r4
 8004828:	4629      	mov	r1, r5
 800482a:	f7fb fcd9 	bl	80001e0 <__aeabi_dsub>
 800482e:	4632      	mov	r2, r6
 8004830:	463b      	mov	r3, r7
 8004832:	f7fb fcd5 	bl	80001e0 <__aeabi_dsub>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4650      	mov	r0, sl
 800483c:	4659      	mov	r1, fp
 800483e:	f7fb fccf 	bl	80001e0 <__aeabi_dsub>
 8004842:	ec53 2b18 	vmov	r2, r3, d8
 8004846:	f7fb fe83 	bl	8000550 <__aeabi_dmul>
 800484a:	4622      	mov	r2, r4
 800484c:	4606      	mov	r6, r0
 800484e:	460f      	mov	r7, r1
 8004850:	462b      	mov	r3, r5
 8004852:	ec51 0b19 	vmov	r0, r1, d9
 8004856:	f7fb fe7b 	bl	8000550 <__aeabi_dmul>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4630      	mov	r0, r6
 8004860:	4639      	mov	r1, r7
 8004862:	f7fb fcbf 	bl	80001e4 <__adddf3>
 8004866:	4606      	mov	r6, r0
 8004868:	460f      	mov	r7, r1
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4640      	mov	r0, r8
 8004870:	4649      	mov	r1, r9
 8004872:	f7fb fcb7 	bl	80001e4 <__adddf3>
 8004876:	a33e      	add	r3, pc, #248	; (adr r3, 8004970 <__ieee754_pow+0x738>)
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	2000      	movs	r0, #0
 800487e:	4604      	mov	r4, r0
 8004880:	460d      	mov	r5, r1
 8004882:	f7fb fe65 	bl	8000550 <__aeabi_dmul>
 8004886:	4642      	mov	r2, r8
 8004888:	ec41 0b18 	vmov	d8, r0, r1
 800488c:	464b      	mov	r3, r9
 800488e:	4620      	mov	r0, r4
 8004890:	4629      	mov	r1, r5
 8004892:	f7fb fca5 	bl	80001e0 <__aeabi_dsub>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4630      	mov	r0, r6
 800489c:	4639      	mov	r1, r7
 800489e:	f7fb fc9f 	bl	80001e0 <__aeabi_dsub>
 80048a2:	a335      	add	r3, pc, #212	; (adr r3, 8004978 <__ieee754_pow+0x740>)
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f7fb fe52 	bl	8000550 <__aeabi_dmul>
 80048ac:	a334      	add	r3, pc, #208	; (adr r3, 8004980 <__ieee754_pow+0x748>)
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	4606      	mov	r6, r0
 80048b4:	460f      	mov	r7, r1
 80048b6:	4620      	mov	r0, r4
 80048b8:	4629      	mov	r1, r5
 80048ba:	f7fb fe49 	bl	8000550 <__aeabi_dmul>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4630      	mov	r0, r6
 80048c4:	4639      	mov	r1, r7
 80048c6:	f7fb fc8d 	bl	80001e4 <__adddf3>
 80048ca:	9a07      	ldr	r2, [sp, #28]
 80048cc:	4b37      	ldr	r3, [pc, #220]	; (80049ac <__ieee754_pow+0x774>)
 80048ce:	4413      	add	r3, r2
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	f7fb fc86 	bl	80001e4 <__adddf3>
 80048d8:	4682      	mov	sl, r0
 80048da:	9805      	ldr	r0, [sp, #20]
 80048dc:	468b      	mov	fp, r1
 80048de:	f7fb fdcd 	bl	800047c <__aeabi_i2d>
 80048e2:	9a07      	ldr	r2, [sp, #28]
 80048e4:	4b32      	ldr	r3, [pc, #200]	; (80049b0 <__ieee754_pow+0x778>)
 80048e6:	4413      	add	r3, r2
 80048e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048ec:	4606      	mov	r6, r0
 80048ee:	460f      	mov	r7, r1
 80048f0:	4652      	mov	r2, sl
 80048f2:	465b      	mov	r3, fp
 80048f4:	ec51 0b18 	vmov	r0, r1, d8
 80048f8:	f7fb fc74 	bl	80001e4 <__adddf3>
 80048fc:	4642      	mov	r2, r8
 80048fe:	464b      	mov	r3, r9
 8004900:	f7fb fc70 	bl	80001e4 <__adddf3>
 8004904:	4632      	mov	r2, r6
 8004906:	463b      	mov	r3, r7
 8004908:	f7fb fc6c 	bl	80001e4 <__adddf3>
 800490c:	2000      	movs	r0, #0
 800490e:	4632      	mov	r2, r6
 8004910:	463b      	mov	r3, r7
 8004912:	4604      	mov	r4, r0
 8004914:	460d      	mov	r5, r1
 8004916:	f7fb fc63 	bl	80001e0 <__aeabi_dsub>
 800491a:	4642      	mov	r2, r8
 800491c:	464b      	mov	r3, r9
 800491e:	f7fb fc5f 	bl	80001e0 <__aeabi_dsub>
 8004922:	ec53 2b18 	vmov	r2, r3, d8
 8004926:	f7fb fc5b 	bl	80001e0 <__aeabi_dsub>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4650      	mov	r0, sl
 8004930:	4659      	mov	r1, fp
 8004932:	e610      	b.n	8004556 <__ieee754_pow+0x31e>
 8004934:	2401      	movs	r4, #1
 8004936:	e6a1      	b.n	800467c <__ieee754_pow+0x444>
 8004938:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004988 <__ieee754_pow+0x750>
 800493c:	e617      	b.n	800456e <__ieee754_pow+0x336>
 800493e:	bf00      	nop
 8004940:	4a454eef 	.word	0x4a454eef
 8004944:	3fca7e28 	.word	0x3fca7e28
 8004948:	93c9db65 	.word	0x93c9db65
 800494c:	3fcd864a 	.word	0x3fcd864a
 8004950:	a91d4101 	.word	0xa91d4101
 8004954:	3fd17460 	.word	0x3fd17460
 8004958:	518f264d 	.word	0x518f264d
 800495c:	3fd55555 	.word	0x3fd55555
 8004960:	db6fabff 	.word	0xdb6fabff
 8004964:	3fdb6db6 	.word	0x3fdb6db6
 8004968:	33333303 	.word	0x33333303
 800496c:	3fe33333 	.word	0x3fe33333
 8004970:	e0000000 	.word	0xe0000000
 8004974:	3feec709 	.word	0x3feec709
 8004978:	dc3a03fd 	.word	0xdc3a03fd
 800497c:	3feec709 	.word	0x3feec709
 8004980:	145b01f5 	.word	0x145b01f5
 8004984:	be3e2fe0 	.word	0xbe3e2fe0
 8004988:	00000000 	.word	0x00000000
 800498c:	3ff00000 	.word	0x3ff00000
 8004990:	7ff00000 	.word	0x7ff00000
 8004994:	43400000 	.word	0x43400000
 8004998:	0003988e 	.word	0x0003988e
 800499c:	000bb679 	.word	0x000bb679
 80049a0:	08004fe0 	.word	0x08004fe0
 80049a4:	3ff00000 	.word	0x3ff00000
 80049a8:	40080000 	.word	0x40080000
 80049ac:	08005000 	.word	0x08005000
 80049b0:	08004ff0 	.word	0x08004ff0
 80049b4:	a3b3      	add	r3, pc, #716	; (adr r3, 8004c84 <__ieee754_pow+0xa4c>)
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	4640      	mov	r0, r8
 80049bc:	4649      	mov	r1, r9
 80049be:	f7fb fc11 	bl	80001e4 <__adddf3>
 80049c2:	4622      	mov	r2, r4
 80049c4:	ec41 0b1a 	vmov	d10, r0, r1
 80049c8:	462b      	mov	r3, r5
 80049ca:	4630      	mov	r0, r6
 80049cc:	4639      	mov	r1, r7
 80049ce:	f7fb fc07 	bl	80001e0 <__aeabi_dsub>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	ec51 0b1a 	vmov	r0, r1, d10
 80049da:	f7fc f849 	bl	8000a70 <__aeabi_dcmpgt>
 80049de:	2800      	cmp	r0, #0
 80049e0:	f47f ae04 	bne.w	80045ec <__ieee754_pow+0x3b4>
 80049e4:	4aa2      	ldr	r2, [pc, #648]	; (8004c70 <__ieee754_pow+0xa38>)
 80049e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80049ea:	4293      	cmp	r3, r2
 80049ec:	f340 8107 	ble.w	8004bfe <__ieee754_pow+0x9c6>
 80049f0:	151b      	asrs	r3, r3, #20
 80049f2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80049f6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80049fa:	fa4a fa03 	asr.w	sl, sl, r3
 80049fe:	44da      	add	sl, fp
 8004a00:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004a04:	489b      	ldr	r0, [pc, #620]	; (8004c74 <__ieee754_pow+0xa3c>)
 8004a06:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004a0a:	4108      	asrs	r0, r1
 8004a0c:	ea00 030a 	and.w	r3, r0, sl
 8004a10:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004a14:	f1c1 0114 	rsb	r1, r1, #20
 8004a18:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004a1c:	fa4a fa01 	asr.w	sl, sl, r1
 8004a20:	f1bb 0f00 	cmp.w	fp, #0
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	4620      	mov	r0, r4
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	bfb8      	it	lt
 8004a2e:	f1ca 0a00 	rsblt	sl, sl, #0
 8004a32:	f7fb fbd5 	bl	80001e0 <__aeabi_dsub>
 8004a36:	ec41 0b19 	vmov	d9, r0, r1
 8004a3a:	4642      	mov	r2, r8
 8004a3c:	464b      	mov	r3, r9
 8004a3e:	ec51 0b19 	vmov	r0, r1, d9
 8004a42:	f7fb fbcf 	bl	80001e4 <__adddf3>
 8004a46:	a37a      	add	r3, pc, #488	; (adr r3, 8004c30 <__ieee754_pow+0x9f8>)
 8004a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	4604      	mov	r4, r0
 8004a50:	460d      	mov	r5, r1
 8004a52:	f7fb fd7d 	bl	8000550 <__aeabi_dmul>
 8004a56:	ec53 2b19 	vmov	r2, r3, d9
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	460f      	mov	r7, r1
 8004a5e:	4620      	mov	r0, r4
 8004a60:	4629      	mov	r1, r5
 8004a62:	f7fb fbbd 	bl	80001e0 <__aeabi_dsub>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4640      	mov	r0, r8
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	f7fb fbb7 	bl	80001e0 <__aeabi_dsub>
 8004a72:	a371      	add	r3, pc, #452	; (adr r3, 8004c38 <__ieee754_pow+0xa00>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f7fb fd6a 	bl	8000550 <__aeabi_dmul>
 8004a7c:	a370      	add	r3, pc, #448	; (adr r3, 8004c40 <__ieee754_pow+0xa08>)
 8004a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a82:	4680      	mov	r8, r0
 8004a84:	4689      	mov	r9, r1
 8004a86:	4620      	mov	r0, r4
 8004a88:	4629      	mov	r1, r5
 8004a8a:	f7fb fd61 	bl	8000550 <__aeabi_dmul>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4640      	mov	r0, r8
 8004a94:	4649      	mov	r1, r9
 8004a96:	f7fb fba5 	bl	80001e4 <__adddf3>
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	460d      	mov	r5, r1
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	4639      	mov	r1, r7
 8004aa6:	f7fb fb9d 	bl	80001e4 <__adddf3>
 8004aaa:	4632      	mov	r2, r6
 8004aac:	463b      	mov	r3, r7
 8004aae:	4680      	mov	r8, r0
 8004ab0:	4689      	mov	r9, r1
 8004ab2:	f7fb fb95 	bl	80001e0 <__aeabi_dsub>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4620      	mov	r0, r4
 8004abc:	4629      	mov	r1, r5
 8004abe:	f7fb fb8f 	bl	80001e0 <__aeabi_dsub>
 8004ac2:	4642      	mov	r2, r8
 8004ac4:	4606      	mov	r6, r0
 8004ac6:	460f      	mov	r7, r1
 8004ac8:	464b      	mov	r3, r9
 8004aca:	4640      	mov	r0, r8
 8004acc:	4649      	mov	r1, r9
 8004ace:	f7fb fd3f 	bl	8000550 <__aeabi_dmul>
 8004ad2:	a35d      	add	r3, pc, #372	; (adr r3, 8004c48 <__ieee754_pow+0xa10>)
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	4604      	mov	r4, r0
 8004ada:	460d      	mov	r5, r1
 8004adc:	f7fb fd38 	bl	8000550 <__aeabi_dmul>
 8004ae0:	a35b      	add	r3, pc, #364	; (adr r3, 8004c50 <__ieee754_pow+0xa18>)
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f7fb fb7b 	bl	80001e0 <__aeabi_dsub>
 8004aea:	4622      	mov	r2, r4
 8004aec:	462b      	mov	r3, r5
 8004aee:	f7fb fd2f 	bl	8000550 <__aeabi_dmul>
 8004af2:	a359      	add	r3, pc, #356	; (adr r3, 8004c58 <__ieee754_pow+0xa20>)
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	f7fb fb74 	bl	80001e4 <__adddf3>
 8004afc:	4622      	mov	r2, r4
 8004afe:	462b      	mov	r3, r5
 8004b00:	f7fb fd26 	bl	8000550 <__aeabi_dmul>
 8004b04:	a356      	add	r3, pc, #344	; (adr r3, 8004c60 <__ieee754_pow+0xa28>)
 8004b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0a:	f7fb fb69 	bl	80001e0 <__aeabi_dsub>
 8004b0e:	4622      	mov	r2, r4
 8004b10:	462b      	mov	r3, r5
 8004b12:	f7fb fd1d 	bl	8000550 <__aeabi_dmul>
 8004b16:	a354      	add	r3, pc, #336	; (adr r3, 8004c68 <__ieee754_pow+0xa30>)
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f7fb fb62 	bl	80001e4 <__adddf3>
 8004b20:	4622      	mov	r2, r4
 8004b22:	462b      	mov	r3, r5
 8004b24:	f7fb fd14 	bl	8000550 <__aeabi_dmul>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4640      	mov	r0, r8
 8004b2e:	4649      	mov	r1, r9
 8004b30:	f7fb fb56 	bl	80001e0 <__aeabi_dsub>
 8004b34:	4604      	mov	r4, r0
 8004b36:	460d      	mov	r5, r1
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4640      	mov	r0, r8
 8004b3e:	4649      	mov	r1, r9
 8004b40:	f7fb fd06 	bl	8000550 <__aeabi_dmul>
 8004b44:	2200      	movs	r2, #0
 8004b46:	ec41 0b19 	vmov	d9, r0, r1
 8004b4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b4e:	4620      	mov	r0, r4
 8004b50:	4629      	mov	r1, r5
 8004b52:	f7fb fb45 	bl	80001e0 <__aeabi_dsub>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	ec51 0b19 	vmov	r0, r1, d9
 8004b5e:	f7fb fe21 	bl	80007a4 <__aeabi_ddiv>
 8004b62:	4632      	mov	r2, r6
 8004b64:	4604      	mov	r4, r0
 8004b66:	460d      	mov	r5, r1
 8004b68:	463b      	mov	r3, r7
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	f7fb fcef 	bl	8000550 <__aeabi_dmul>
 8004b72:	4632      	mov	r2, r6
 8004b74:	463b      	mov	r3, r7
 8004b76:	f7fb fb35 	bl	80001e4 <__adddf3>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4620      	mov	r0, r4
 8004b80:	4629      	mov	r1, r5
 8004b82:	f7fb fb2d 	bl	80001e0 <__aeabi_dsub>
 8004b86:	4642      	mov	r2, r8
 8004b88:	464b      	mov	r3, r9
 8004b8a:	f7fb fb29 	bl	80001e0 <__aeabi_dsub>
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4602      	mov	r2, r0
 8004b92:	4939      	ldr	r1, [pc, #228]	; (8004c78 <__ieee754_pow+0xa40>)
 8004b94:	2000      	movs	r0, #0
 8004b96:	f7fb fb23 	bl	80001e0 <__aeabi_dsub>
 8004b9a:	ec41 0b10 	vmov	d0, r0, r1
 8004b9e:	ee10 3a90 	vmov	r3, s1
 8004ba2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004baa:	da2b      	bge.n	8004c04 <__ieee754_pow+0x9cc>
 8004bac:	4650      	mov	r0, sl
 8004bae:	f000 f877 	bl	8004ca0 <scalbn>
 8004bb2:	ec51 0b10 	vmov	r0, r1, d0
 8004bb6:	ec53 2b18 	vmov	r2, r3, d8
 8004bba:	f7ff bbee 	b.w	800439a <__ieee754_pow+0x162>
 8004bbe:	4b2f      	ldr	r3, [pc, #188]	; (8004c7c <__ieee754_pow+0xa44>)
 8004bc0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004bc4:	429e      	cmp	r6, r3
 8004bc6:	f77f af0d 	ble.w	80049e4 <__ieee754_pow+0x7ac>
 8004bca:	4b2d      	ldr	r3, [pc, #180]	; (8004c80 <__ieee754_pow+0xa48>)
 8004bcc:	440b      	add	r3, r1
 8004bce:	4303      	orrs	r3, r0
 8004bd0:	d009      	beq.n	8004be6 <__ieee754_pow+0x9ae>
 8004bd2:	ec51 0b18 	vmov	r0, r1, d8
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f7fb ff2b 	bl	8000a34 <__aeabi_dcmplt>
 8004bde:	3800      	subs	r0, #0
 8004be0:	bf18      	it	ne
 8004be2:	2001      	movne	r0, #1
 8004be4:	e448      	b.n	8004478 <__ieee754_pow+0x240>
 8004be6:	4622      	mov	r2, r4
 8004be8:	462b      	mov	r3, r5
 8004bea:	f7fb faf9 	bl	80001e0 <__aeabi_dsub>
 8004bee:	4642      	mov	r2, r8
 8004bf0:	464b      	mov	r3, r9
 8004bf2:	f7fb ff33 	bl	8000a5c <__aeabi_dcmpge>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	f43f aef4 	beq.w	80049e4 <__ieee754_pow+0x7ac>
 8004bfc:	e7e9      	b.n	8004bd2 <__ieee754_pow+0x99a>
 8004bfe:	f04f 0a00 	mov.w	sl, #0
 8004c02:	e71a      	b.n	8004a3a <__ieee754_pow+0x802>
 8004c04:	ec51 0b10 	vmov	r0, r1, d0
 8004c08:	4619      	mov	r1, r3
 8004c0a:	e7d4      	b.n	8004bb6 <__ieee754_pow+0x97e>
 8004c0c:	491a      	ldr	r1, [pc, #104]	; (8004c78 <__ieee754_pow+0xa40>)
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f7ff bb31 	b.w	8004276 <__ieee754_pow+0x3e>
 8004c14:	2000      	movs	r0, #0
 8004c16:	2100      	movs	r1, #0
 8004c18:	f7ff bb2d 	b.w	8004276 <__ieee754_pow+0x3e>
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	4639      	mov	r1, r7
 8004c20:	f7ff bb29 	b.w	8004276 <__ieee754_pow+0x3e>
 8004c24:	9204      	str	r2, [sp, #16]
 8004c26:	f7ff bb7b 	b.w	8004320 <__ieee754_pow+0xe8>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f7ff bb65 	b.w	80042fa <__ieee754_pow+0xc2>
 8004c30:	00000000 	.word	0x00000000
 8004c34:	3fe62e43 	.word	0x3fe62e43
 8004c38:	fefa39ef 	.word	0xfefa39ef
 8004c3c:	3fe62e42 	.word	0x3fe62e42
 8004c40:	0ca86c39 	.word	0x0ca86c39
 8004c44:	be205c61 	.word	0xbe205c61
 8004c48:	72bea4d0 	.word	0x72bea4d0
 8004c4c:	3e663769 	.word	0x3e663769
 8004c50:	c5d26bf1 	.word	0xc5d26bf1
 8004c54:	3ebbbd41 	.word	0x3ebbbd41
 8004c58:	af25de2c 	.word	0xaf25de2c
 8004c5c:	3f11566a 	.word	0x3f11566a
 8004c60:	16bebd93 	.word	0x16bebd93
 8004c64:	3f66c16c 	.word	0x3f66c16c
 8004c68:	5555553e 	.word	0x5555553e
 8004c6c:	3fc55555 	.word	0x3fc55555
 8004c70:	3fe00000 	.word	0x3fe00000
 8004c74:	fff00000 	.word	0xfff00000
 8004c78:	3ff00000 	.word	0x3ff00000
 8004c7c:	4090cbff 	.word	0x4090cbff
 8004c80:	3f6f3400 	.word	0x3f6f3400
 8004c84:	652b82fe 	.word	0x652b82fe
 8004c88:	3c971547 	.word	0x3c971547

08004c8c <fabs>:
 8004c8c:	ec51 0b10 	vmov	r0, r1, d0
 8004c90:	ee10 2a10 	vmov	r2, s0
 8004c94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c98:	ec43 2b10 	vmov	d0, r2, r3
 8004c9c:	4770      	bx	lr
	...

08004ca0 <scalbn>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	ec55 4b10 	vmov	r4, r5, d0
 8004ca6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004caa:	4606      	mov	r6, r0
 8004cac:	462b      	mov	r3, r5
 8004cae:	b999      	cbnz	r1, 8004cd8 <scalbn+0x38>
 8004cb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004cb4:	4323      	orrs	r3, r4
 8004cb6:	d03f      	beq.n	8004d38 <scalbn+0x98>
 8004cb8:	4b35      	ldr	r3, [pc, #212]	; (8004d90 <scalbn+0xf0>)
 8004cba:	4629      	mov	r1, r5
 8004cbc:	ee10 0a10 	vmov	r0, s0
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f7fb fc45 	bl	8000550 <__aeabi_dmul>
 8004cc6:	4b33      	ldr	r3, [pc, #204]	; (8004d94 <scalbn+0xf4>)
 8004cc8:	429e      	cmp	r6, r3
 8004cca:	4604      	mov	r4, r0
 8004ccc:	460d      	mov	r5, r1
 8004cce:	da10      	bge.n	8004cf2 <scalbn+0x52>
 8004cd0:	a327      	add	r3, pc, #156	; (adr r3, 8004d70 <scalbn+0xd0>)
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	e01f      	b.n	8004d18 <scalbn+0x78>
 8004cd8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004cdc:	4291      	cmp	r1, r2
 8004cde:	d10c      	bne.n	8004cfa <scalbn+0x5a>
 8004ce0:	ee10 2a10 	vmov	r2, s0
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	f7fb fa7c 	bl	80001e4 <__adddf3>
 8004cec:	4604      	mov	r4, r0
 8004cee:	460d      	mov	r5, r1
 8004cf0:	e022      	b.n	8004d38 <scalbn+0x98>
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004cf8:	3936      	subs	r1, #54	; 0x36
 8004cfa:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004cfe:	4296      	cmp	r6, r2
 8004d00:	dd0d      	ble.n	8004d1e <scalbn+0x7e>
 8004d02:	2d00      	cmp	r5, #0
 8004d04:	a11c      	add	r1, pc, #112	; (adr r1, 8004d78 <scalbn+0xd8>)
 8004d06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d0a:	da02      	bge.n	8004d12 <scalbn+0x72>
 8004d0c:	a11c      	add	r1, pc, #112	; (adr r1, 8004d80 <scalbn+0xe0>)
 8004d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d12:	a319      	add	r3, pc, #100	; (adr r3, 8004d78 <scalbn+0xd8>)
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	f7fb fc1a 	bl	8000550 <__aeabi_dmul>
 8004d1c:	e7e6      	b.n	8004cec <scalbn+0x4c>
 8004d1e:	1872      	adds	r2, r6, r1
 8004d20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004d24:	428a      	cmp	r2, r1
 8004d26:	dcec      	bgt.n	8004d02 <scalbn+0x62>
 8004d28:	2a00      	cmp	r2, #0
 8004d2a:	dd08      	ble.n	8004d3e <scalbn+0x9e>
 8004d2c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004d30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004d38:	ec45 4b10 	vmov	d0, r4, r5
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}
 8004d3e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004d42:	da08      	bge.n	8004d56 <scalbn+0xb6>
 8004d44:	2d00      	cmp	r5, #0
 8004d46:	a10a      	add	r1, pc, #40	; (adr r1, 8004d70 <scalbn+0xd0>)
 8004d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d4c:	dac0      	bge.n	8004cd0 <scalbn+0x30>
 8004d4e:	a10e      	add	r1, pc, #56	; (adr r1, 8004d88 <scalbn+0xe8>)
 8004d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d54:	e7bc      	b.n	8004cd0 <scalbn+0x30>
 8004d56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004d5a:	3236      	adds	r2, #54	; 0x36
 8004d5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004d64:	4620      	mov	r0, r4
 8004d66:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <scalbn+0xf8>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	e7d5      	b.n	8004d18 <scalbn+0x78>
 8004d6c:	f3af 8000 	nop.w
 8004d70:	c2f8f359 	.word	0xc2f8f359
 8004d74:	01a56e1f 	.word	0x01a56e1f
 8004d78:	8800759c 	.word	0x8800759c
 8004d7c:	7e37e43c 	.word	0x7e37e43c
 8004d80:	8800759c 	.word	0x8800759c
 8004d84:	fe37e43c 	.word	0xfe37e43c
 8004d88:	c2f8f359 	.word	0xc2f8f359
 8004d8c:	81a56e1f 	.word	0x81a56e1f
 8004d90:	43500000 	.word	0x43500000
 8004d94:	ffff3cb0 	.word	0xffff3cb0
 8004d98:	3c900000 	.word	0x3c900000

08004d9c <with_errno>:
 8004d9c:	b570      	push	{r4, r5, r6, lr}
 8004d9e:	4604      	mov	r4, r0
 8004da0:	460d      	mov	r5, r1
 8004da2:	4616      	mov	r6, r2
 8004da4:	f7ff f9a2 	bl	80040ec <__errno>
 8004da8:	4629      	mov	r1, r5
 8004daa:	6006      	str	r6, [r0, #0]
 8004dac:	4620      	mov	r0, r4
 8004dae:	bd70      	pop	{r4, r5, r6, pc}

08004db0 <xflow>:
 8004db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004db2:	4614      	mov	r4, r2
 8004db4:	461d      	mov	r5, r3
 8004db6:	b108      	cbz	r0, 8004dbc <xflow+0xc>
 8004db8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004dbc:	e9cd 2300 	strd	r2, r3, [sp]
 8004dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	f7fb fbc2 	bl	8000550 <__aeabi_dmul>
 8004dcc:	2222      	movs	r2, #34	; 0x22
 8004dce:	b003      	add	sp, #12
 8004dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dd4:	f7ff bfe2 	b.w	8004d9c <with_errno>

08004dd8 <__math_uflow>:
 8004dd8:	b508      	push	{r3, lr}
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004de0:	f7ff ffe6 	bl	8004db0 <xflow>
 8004de4:	ec41 0b10 	vmov	d0, r0, r1
 8004de8:	bd08      	pop	{r3, pc}

08004dea <__math_oflow>:
 8004dea:	b508      	push	{r3, lr}
 8004dec:	2200      	movs	r2, #0
 8004dee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004df2:	f7ff ffdd 	bl	8004db0 <xflow>
 8004df6:	ec41 0b10 	vmov	d0, r0, r1
 8004dfa:	bd08      	pop	{r3, pc}

08004dfc <__ieee754_sqrt>:
 8004dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e00:	ec55 4b10 	vmov	r4, r5, d0
 8004e04:	4e67      	ldr	r6, [pc, #412]	; (8004fa4 <__ieee754_sqrt+0x1a8>)
 8004e06:	43ae      	bics	r6, r5
 8004e08:	ee10 0a10 	vmov	r0, s0
 8004e0c:	ee10 2a10 	vmov	r2, s0
 8004e10:	4629      	mov	r1, r5
 8004e12:	462b      	mov	r3, r5
 8004e14:	d10d      	bne.n	8004e32 <__ieee754_sqrt+0x36>
 8004e16:	f7fb fb9b 	bl	8000550 <__aeabi_dmul>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4620      	mov	r0, r4
 8004e20:	4629      	mov	r1, r5
 8004e22:	f7fb f9df 	bl	80001e4 <__adddf3>
 8004e26:	4604      	mov	r4, r0
 8004e28:	460d      	mov	r5, r1
 8004e2a:	ec45 4b10 	vmov	d0, r4, r5
 8004e2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e32:	2d00      	cmp	r5, #0
 8004e34:	dc0b      	bgt.n	8004e4e <__ieee754_sqrt+0x52>
 8004e36:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004e3a:	4326      	orrs	r6, r4
 8004e3c:	d0f5      	beq.n	8004e2a <__ieee754_sqrt+0x2e>
 8004e3e:	b135      	cbz	r5, 8004e4e <__ieee754_sqrt+0x52>
 8004e40:	f7fb f9ce 	bl	80001e0 <__aeabi_dsub>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	f7fb fcac 	bl	80007a4 <__aeabi_ddiv>
 8004e4c:	e7eb      	b.n	8004e26 <__ieee754_sqrt+0x2a>
 8004e4e:	1509      	asrs	r1, r1, #20
 8004e50:	f000 808d 	beq.w	8004f6e <__ieee754_sqrt+0x172>
 8004e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e58:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8004e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e60:	07c9      	lsls	r1, r1, #31
 8004e62:	bf5c      	itt	pl
 8004e64:	005b      	lslpl	r3, r3, #1
 8004e66:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8004e6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004e6e:	bf58      	it	pl
 8004e70:	0052      	lslpl	r2, r2, #1
 8004e72:	2500      	movs	r5, #0
 8004e74:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004e78:	1076      	asrs	r6, r6, #1
 8004e7a:	0052      	lsls	r2, r2, #1
 8004e7c:	f04f 0e16 	mov.w	lr, #22
 8004e80:	46ac      	mov	ip, r5
 8004e82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e86:	eb0c 0001 	add.w	r0, ip, r1
 8004e8a:	4298      	cmp	r0, r3
 8004e8c:	bfde      	ittt	le
 8004e8e:	1a1b      	suble	r3, r3, r0
 8004e90:	eb00 0c01 	addle.w	ip, r0, r1
 8004e94:	186d      	addle	r5, r5, r1
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	f1be 0e01 	subs.w	lr, lr, #1
 8004e9c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004ea0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004ea4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004ea8:	d1ed      	bne.n	8004e86 <__ieee754_sqrt+0x8a>
 8004eaa:	4674      	mov	r4, lr
 8004eac:	2720      	movs	r7, #32
 8004eae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004eb2:	4563      	cmp	r3, ip
 8004eb4:	eb01 000e 	add.w	r0, r1, lr
 8004eb8:	dc02      	bgt.n	8004ec0 <__ieee754_sqrt+0xc4>
 8004eba:	d113      	bne.n	8004ee4 <__ieee754_sqrt+0xe8>
 8004ebc:	4290      	cmp	r0, r2
 8004ebe:	d811      	bhi.n	8004ee4 <__ieee754_sqrt+0xe8>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	eb00 0e01 	add.w	lr, r0, r1
 8004ec6:	da57      	bge.n	8004f78 <__ieee754_sqrt+0x17c>
 8004ec8:	f1be 0f00 	cmp.w	lr, #0
 8004ecc:	db54      	blt.n	8004f78 <__ieee754_sqrt+0x17c>
 8004ece:	f10c 0801 	add.w	r8, ip, #1
 8004ed2:	eba3 030c 	sub.w	r3, r3, ip
 8004ed6:	4290      	cmp	r0, r2
 8004ed8:	bf88      	it	hi
 8004eda:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004ede:	1a12      	subs	r2, r2, r0
 8004ee0:	440c      	add	r4, r1
 8004ee2:	46c4      	mov	ip, r8
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	3f01      	subs	r7, #1
 8004ee8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004eec:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004ef0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004ef4:	d1dd      	bne.n	8004eb2 <__ieee754_sqrt+0xb6>
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	d01b      	beq.n	8004f32 <__ieee754_sqrt+0x136>
 8004efa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004fa8 <__ieee754_sqrt+0x1ac>
 8004efe:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004fac <__ieee754_sqrt+0x1b0>
 8004f02:	e9da 0100 	ldrd	r0, r1, [sl]
 8004f06:	e9db 2300 	ldrd	r2, r3, [fp]
 8004f0a:	f7fb f969 	bl	80001e0 <__aeabi_dsub>
 8004f0e:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4640      	mov	r0, r8
 8004f18:	4649      	mov	r1, r9
 8004f1a:	f7fb fd95 	bl	8000a48 <__aeabi_dcmple>
 8004f1e:	b140      	cbz	r0, 8004f32 <__ieee754_sqrt+0x136>
 8004f20:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004f24:	e9da 0100 	ldrd	r0, r1, [sl]
 8004f28:	e9db 2300 	ldrd	r2, r3, [fp]
 8004f2c:	d126      	bne.n	8004f7c <__ieee754_sqrt+0x180>
 8004f2e:	3501      	adds	r5, #1
 8004f30:	463c      	mov	r4, r7
 8004f32:	106a      	asrs	r2, r5, #1
 8004f34:	0863      	lsrs	r3, r4, #1
 8004f36:	07e9      	lsls	r1, r5, #31
 8004f38:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004f3c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004f40:	bf48      	it	mi
 8004f42:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004f46:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8004f4a:	461c      	mov	r4, r3
 8004f4c:	e76d      	b.n	8004e2a <__ieee754_sqrt+0x2e>
 8004f4e:	0ad3      	lsrs	r3, r2, #11
 8004f50:	3815      	subs	r0, #21
 8004f52:	0552      	lsls	r2, r2, #21
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0fa      	beq.n	8004f4e <__ieee754_sqrt+0x152>
 8004f58:	02dc      	lsls	r4, r3, #11
 8004f5a:	d50a      	bpl.n	8004f72 <__ieee754_sqrt+0x176>
 8004f5c:	f1c1 0420 	rsb	r4, r1, #32
 8004f60:	fa22 f404 	lsr.w	r4, r2, r4
 8004f64:	1e4d      	subs	r5, r1, #1
 8004f66:	408a      	lsls	r2, r1
 8004f68:	4323      	orrs	r3, r4
 8004f6a:	1b41      	subs	r1, r0, r5
 8004f6c:	e772      	b.n	8004e54 <__ieee754_sqrt+0x58>
 8004f6e:	4608      	mov	r0, r1
 8004f70:	e7f0      	b.n	8004f54 <__ieee754_sqrt+0x158>
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	3101      	adds	r1, #1
 8004f76:	e7ef      	b.n	8004f58 <__ieee754_sqrt+0x15c>
 8004f78:	46e0      	mov	r8, ip
 8004f7a:	e7aa      	b.n	8004ed2 <__ieee754_sqrt+0xd6>
 8004f7c:	f7fb f932 	bl	80001e4 <__adddf3>
 8004f80:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4640      	mov	r0, r8
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	f7fb fd52 	bl	8000a34 <__aeabi_dcmplt>
 8004f90:	b120      	cbz	r0, 8004f9c <__ieee754_sqrt+0x1a0>
 8004f92:	1ca0      	adds	r0, r4, #2
 8004f94:	bf08      	it	eq
 8004f96:	3501      	addeq	r5, #1
 8004f98:	3402      	adds	r4, #2
 8004f9a:	e7ca      	b.n	8004f32 <__ieee754_sqrt+0x136>
 8004f9c:	3401      	adds	r4, #1
 8004f9e:	f024 0401 	bic.w	r4, r4, #1
 8004fa2:	e7c6      	b.n	8004f32 <__ieee754_sqrt+0x136>
 8004fa4:	7ff00000 	.word	0x7ff00000
 8004fa8:	20000290 	.word	0x20000290
 8004fac:	20000298 	.word	0x20000298

08004fb0 <_init>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr

08004fbc <_fini>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr
