
screen_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005540  08005540  00015540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800566c  0800566c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800566c  0800566c  0001566c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005674  08005674  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005674  08005674  00015674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800567c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ea4  20000074  080056f0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005f18  080056f0  00025f18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e768  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021cf  00000000  00000000  0002e84f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00030a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c94  00000000  00000000  00031a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b8d  00000000  00000000  000326cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001225e  00000000  00000000  0004a259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000936b7  00000000  00000000  0005c4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fc0  00000000  00000000  000efb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f4b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005528 	.word	0x08005528

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005528 	.word	0x08005528

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b970 	b.w	8000a00 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9e08      	ldr	r6, [sp, #32]
 800073e:	460d      	mov	r5, r1
 8000740:	4604      	mov	r4, r0
 8000742:	460f      	mov	r7, r1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d14a      	bne.n	80007de <__udivmoddi4+0xa6>
 8000748:	428a      	cmp	r2, r1
 800074a:	4694      	mov	ip, r2
 800074c:	d965      	bls.n	800081a <__udivmoddi4+0xe2>
 800074e:	fab2 f382 	clz	r3, r2
 8000752:	b143      	cbz	r3, 8000766 <__udivmoddi4+0x2e>
 8000754:	fa02 fc03 	lsl.w	ip, r2, r3
 8000758:	f1c3 0220 	rsb	r2, r3, #32
 800075c:	409f      	lsls	r7, r3
 800075e:	fa20 f202 	lsr.w	r2, r0, r2
 8000762:	4317      	orrs	r7, r2
 8000764:	409c      	lsls	r4, r3
 8000766:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800076a:	fa1f f58c 	uxth.w	r5, ip
 800076e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000772:	0c22      	lsrs	r2, r4, #16
 8000774:	fb0e 7711 	mls	r7, lr, r1, r7
 8000778:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800077c:	fb01 f005 	mul.w	r0, r1, r5
 8000780:	4290      	cmp	r0, r2
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x62>
 8000784:	eb1c 0202 	adds.w	r2, ip, r2
 8000788:	f101 37ff 	add.w	r7, r1, #4294967295
 800078c:	f080 811c 	bcs.w	80009c8 <__udivmoddi4+0x290>
 8000790:	4290      	cmp	r0, r2
 8000792:	f240 8119 	bls.w	80009c8 <__udivmoddi4+0x290>
 8000796:	3902      	subs	r1, #2
 8000798:	4462      	add	r2, ip
 800079a:	1a12      	subs	r2, r2, r0
 800079c:	b2a4      	uxth	r4, r4
 800079e:	fbb2 f0fe 	udiv	r0, r2, lr
 80007a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007aa:	fb00 f505 	mul.w	r5, r0, r5
 80007ae:	42a5      	cmp	r5, r4
 80007b0:	d90a      	bls.n	80007c8 <__udivmoddi4+0x90>
 80007b2:	eb1c 0404 	adds.w	r4, ip, r4
 80007b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ba:	f080 8107 	bcs.w	80009cc <__udivmoddi4+0x294>
 80007be:	42a5      	cmp	r5, r4
 80007c0:	f240 8104 	bls.w	80009cc <__udivmoddi4+0x294>
 80007c4:	4464      	add	r4, ip
 80007c6:	3802      	subs	r0, #2
 80007c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007cc:	1b64      	subs	r4, r4, r5
 80007ce:	2100      	movs	r1, #0
 80007d0:	b11e      	cbz	r6, 80007da <__udivmoddi4+0xa2>
 80007d2:	40dc      	lsrs	r4, r3
 80007d4:	2300      	movs	r3, #0
 80007d6:	e9c6 4300 	strd	r4, r3, [r6]
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	428b      	cmp	r3, r1
 80007e0:	d908      	bls.n	80007f4 <__udivmoddi4+0xbc>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	f000 80ed 	beq.w	80009c2 <__udivmoddi4+0x28a>
 80007e8:	2100      	movs	r1, #0
 80007ea:	e9c6 0500 	strd	r0, r5, [r6]
 80007ee:	4608      	mov	r0, r1
 80007f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f4:	fab3 f183 	clz	r1, r3
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d149      	bne.n	8000890 <__udivmoddi4+0x158>
 80007fc:	42ab      	cmp	r3, r5
 80007fe:	d302      	bcc.n	8000806 <__udivmoddi4+0xce>
 8000800:	4282      	cmp	r2, r0
 8000802:	f200 80f8 	bhi.w	80009f6 <__udivmoddi4+0x2be>
 8000806:	1a84      	subs	r4, r0, r2
 8000808:	eb65 0203 	sbc.w	r2, r5, r3
 800080c:	2001      	movs	r0, #1
 800080e:	4617      	mov	r7, r2
 8000810:	2e00      	cmp	r6, #0
 8000812:	d0e2      	beq.n	80007da <__udivmoddi4+0xa2>
 8000814:	e9c6 4700 	strd	r4, r7, [r6]
 8000818:	e7df      	b.n	80007da <__udivmoddi4+0xa2>
 800081a:	b902      	cbnz	r2, 800081e <__udivmoddi4+0xe6>
 800081c:	deff      	udf	#255	; 0xff
 800081e:	fab2 f382 	clz	r3, r2
 8000822:	2b00      	cmp	r3, #0
 8000824:	f040 8090 	bne.w	8000948 <__udivmoddi4+0x210>
 8000828:	1a8a      	subs	r2, r1, r2
 800082a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082e:	fa1f fe8c 	uxth.w	lr, ip
 8000832:	2101      	movs	r1, #1
 8000834:	fbb2 f5f7 	udiv	r5, r2, r7
 8000838:	fb07 2015 	mls	r0, r7, r5, r2
 800083c:	0c22      	lsrs	r2, r4, #16
 800083e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000842:	fb0e f005 	mul.w	r0, lr, r5
 8000846:	4290      	cmp	r0, r2
 8000848:	d908      	bls.n	800085c <__udivmoddi4+0x124>
 800084a:	eb1c 0202 	adds.w	r2, ip, r2
 800084e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000852:	d202      	bcs.n	800085a <__udivmoddi4+0x122>
 8000854:	4290      	cmp	r0, r2
 8000856:	f200 80cb 	bhi.w	80009f0 <__udivmoddi4+0x2b8>
 800085a:	4645      	mov	r5, r8
 800085c:	1a12      	subs	r2, r2, r0
 800085e:	b2a4      	uxth	r4, r4
 8000860:	fbb2 f0f7 	udiv	r0, r2, r7
 8000864:	fb07 2210 	mls	r2, r7, r0, r2
 8000868:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800086c:	fb0e fe00 	mul.w	lr, lr, r0
 8000870:	45a6      	cmp	lr, r4
 8000872:	d908      	bls.n	8000886 <__udivmoddi4+0x14e>
 8000874:	eb1c 0404 	adds.w	r4, ip, r4
 8000878:	f100 32ff 	add.w	r2, r0, #4294967295
 800087c:	d202      	bcs.n	8000884 <__udivmoddi4+0x14c>
 800087e:	45a6      	cmp	lr, r4
 8000880:	f200 80bb 	bhi.w	80009fa <__udivmoddi4+0x2c2>
 8000884:	4610      	mov	r0, r2
 8000886:	eba4 040e 	sub.w	r4, r4, lr
 800088a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800088e:	e79f      	b.n	80007d0 <__udivmoddi4+0x98>
 8000890:	f1c1 0720 	rsb	r7, r1, #32
 8000894:	408b      	lsls	r3, r1
 8000896:	fa22 fc07 	lsr.w	ip, r2, r7
 800089a:	ea4c 0c03 	orr.w	ip, ip, r3
 800089e:	fa05 f401 	lsl.w	r4, r5, r1
 80008a2:	fa20 f307 	lsr.w	r3, r0, r7
 80008a6:	40fd      	lsrs	r5, r7
 80008a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008ac:	4323      	orrs	r3, r4
 80008ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80008b2:	fa1f fe8c 	uxth.w	lr, ip
 80008b6:	fb09 5518 	mls	r5, r9, r8, r5
 80008ba:	0c1c      	lsrs	r4, r3, #16
 80008bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008c0:	fb08 f50e 	mul.w	r5, r8, lr
 80008c4:	42a5      	cmp	r5, r4
 80008c6:	fa02 f201 	lsl.w	r2, r2, r1
 80008ca:	fa00 f001 	lsl.w	r0, r0, r1
 80008ce:	d90b      	bls.n	80008e8 <__udivmoddi4+0x1b0>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008d8:	f080 8088 	bcs.w	80009ec <__udivmoddi4+0x2b4>
 80008dc:	42a5      	cmp	r5, r4
 80008de:	f240 8085 	bls.w	80009ec <__udivmoddi4+0x2b4>
 80008e2:	f1a8 0802 	sub.w	r8, r8, #2
 80008e6:	4464      	add	r4, ip
 80008e8:	1b64      	subs	r4, r4, r5
 80008ea:	b29d      	uxth	r5, r3
 80008ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80008f0:	fb09 4413 	mls	r4, r9, r3, r4
 80008f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008fc:	45a6      	cmp	lr, r4
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x1da>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f103 35ff 	add.w	r5, r3, #4294967295
 8000908:	d26c      	bcs.n	80009e4 <__udivmoddi4+0x2ac>
 800090a:	45a6      	cmp	lr, r4
 800090c:	d96a      	bls.n	80009e4 <__udivmoddi4+0x2ac>
 800090e:	3b02      	subs	r3, #2
 8000910:	4464      	add	r4, ip
 8000912:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000916:	fba3 9502 	umull	r9, r5, r3, r2
 800091a:	eba4 040e 	sub.w	r4, r4, lr
 800091e:	42ac      	cmp	r4, r5
 8000920:	46c8      	mov	r8, r9
 8000922:	46ae      	mov	lr, r5
 8000924:	d356      	bcc.n	80009d4 <__udivmoddi4+0x29c>
 8000926:	d053      	beq.n	80009d0 <__udivmoddi4+0x298>
 8000928:	b156      	cbz	r6, 8000940 <__udivmoddi4+0x208>
 800092a:	ebb0 0208 	subs.w	r2, r0, r8
 800092e:	eb64 040e 	sbc.w	r4, r4, lr
 8000932:	fa04 f707 	lsl.w	r7, r4, r7
 8000936:	40ca      	lsrs	r2, r1
 8000938:	40cc      	lsrs	r4, r1
 800093a:	4317      	orrs	r7, r2
 800093c:	e9c6 7400 	strd	r7, r4, [r6]
 8000940:	4618      	mov	r0, r3
 8000942:	2100      	movs	r1, #0
 8000944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000948:	f1c3 0120 	rsb	r1, r3, #32
 800094c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000950:	fa20 f201 	lsr.w	r2, r0, r1
 8000954:	fa25 f101 	lsr.w	r1, r5, r1
 8000958:	409d      	lsls	r5, r3
 800095a:	432a      	orrs	r2, r5
 800095c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fbb1 f0f7 	udiv	r0, r1, r7
 8000968:	fb07 1510 	mls	r5, r7, r0, r1
 800096c:	0c11      	lsrs	r1, r2, #16
 800096e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000972:	fb00 f50e 	mul.w	r5, r0, lr
 8000976:	428d      	cmp	r5, r1
 8000978:	fa04 f403 	lsl.w	r4, r4, r3
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x258>
 800097e:	eb1c 0101 	adds.w	r1, ip, r1
 8000982:	f100 38ff 	add.w	r8, r0, #4294967295
 8000986:	d22f      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 8000988:	428d      	cmp	r5, r1
 800098a:	d92d      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 800098c:	3802      	subs	r0, #2
 800098e:	4461      	add	r1, ip
 8000990:	1b49      	subs	r1, r1, r5
 8000992:	b292      	uxth	r2, r2
 8000994:	fbb1 f5f7 	udiv	r5, r1, r7
 8000998:	fb07 1115 	mls	r1, r7, r5, r1
 800099c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009a0:	fb05 f10e 	mul.w	r1, r5, lr
 80009a4:	4291      	cmp	r1, r2
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x282>
 80009a8:	eb1c 0202 	adds.w	r2, ip, r2
 80009ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80009b0:	d216      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 80009b2:	4291      	cmp	r1, r2
 80009b4:	d914      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 80009b6:	3d02      	subs	r5, #2
 80009b8:	4462      	add	r2, ip
 80009ba:	1a52      	subs	r2, r2, r1
 80009bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80009c0:	e738      	b.n	8000834 <__udivmoddi4+0xfc>
 80009c2:	4631      	mov	r1, r6
 80009c4:	4630      	mov	r0, r6
 80009c6:	e708      	b.n	80007da <__udivmoddi4+0xa2>
 80009c8:	4639      	mov	r1, r7
 80009ca:	e6e6      	b.n	800079a <__udivmoddi4+0x62>
 80009cc:	4610      	mov	r0, r2
 80009ce:	e6fb      	b.n	80007c8 <__udivmoddi4+0x90>
 80009d0:	4548      	cmp	r0, r9
 80009d2:	d2a9      	bcs.n	8000928 <__udivmoddi4+0x1f0>
 80009d4:	ebb9 0802 	subs.w	r8, r9, r2
 80009d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009dc:	3b01      	subs	r3, #1
 80009de:	e7a3      	b.n	8000928 <__udivmoddi4+0x1f0>
 80009e0:	4645      	mov	r5, r8
 80009e2:	e7ea      	b.n	80009ba <__udivmoddi4+0x282>
 80009e4:	462b      	mov	r3, r5
 80009e6:	e794      	b.n	8000912 <__udivmoddi4+0x1da>
 80009e8:	4640      	mov	r0, r8
 80009ea:	e7d1      	b.n	8000990 <__udivmoddi4+0x258>
 80009ec:	46d0      	mov	r8, sl
 80009ee:	e77b      	b.n	80008e8 <__udivmoddi4+0x1b0>
 80009f0:	3d02      	subs	r5, #2
 80009f2:	4462      	add	r2, ip
 80009f4:	e732      	b.n	800085c <__udivmoddi4+0x124>
 80009f6:	4608      	mov	r0, r1
 80009f8:	e70a      	b.n	8000810 <__udivmoddi4+0xd8>
 80009fa:	4464      	add	r4, ip
 80009fc:	3802      	subs	r0, #2
 80009fe:	e742      	b.n	8000886 <__udivmoddi4+0x14e>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <I2CStartRestart>:

#define ACCELEROMETER_READ  0x33
#define ACCELEROMETER_WRITE 0x32

void I2CStartRestart()
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	ACCESS(I2C1_CR1) |= (1 << 8);
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <I2CStartRestart+0x1c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <I2CStartRestart+0x1c>)
 8000a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40005400 	.word	0x40005400

08000a24 <I2CStop>:

void I2CStop()
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
	ACCESS(I2C1_CR1) |= (1 << 9);
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <I2CStop+0x1c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <I2CStop+0x1c>)
 8000a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40005400 	.word	0x40005400

08000a44 <I2CEnableAcknowledge>:

void I2CEnableAcknowledge()
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

	ACCESS(I2C1_CR1) |= (1 << 10);
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <I2CEnableAcknowledge+0x1c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <I2CEnableAcknowledge+0x1c>)
 8000a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40005400 	.word	0x40005400

08000a64 <I2CDisableAcknowledge>:

void I2CDisableAcknowledge()
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
	ACCESS(I2C1_CR1) &= ~(1 << 10);
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <I2CDisableAcknowledge+0x1c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <I2CDisableAcknowledge+0x1c>)
 8000a6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40005400 	.word	0x40005400

08000a84 <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(unsigned short address)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
	while((ACCESS(I2C1_SR1) & 1) == 0);
 8000a8e:	bf00      	nop
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <I2CSendSlaveAddress+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d0f9      	beq.n	8000a90 <I2CSendSlaveAddress+0xc>

	ACCESS(I2C1_DR) = address;
 8000a9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <I2CSendSlaveAddress+0x44>)
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	6013      	str	r3, [r2, #0]

	while((ACCESS(I2C1_SR1) & (1 << 1)) == 0);
 8000aa2:	bf00      	nop
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <I2CSendSlaveAddress+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0f9      	beq.n	8000aa4 <I2CSendSlaveAddress+0x20>


	ACCESS(I2C1_SR1);
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <I2CSendSlaveAddress+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
	ACCESS(I2C1_SR2);
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <I2CSendSlaveAddress+0x48>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40005414 	.word	0x40005414
 8000ac8:	40005410 	.word	0x40005410
 8000acc:	40005418 	.word	0x40005418

08000ad0 <I2CSendRegister>:

void I2CSendRegister(unsigned short registerAddress)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80fb      	strh	r3, [r7, #6]
	// See page 499. We wait until the Tx data register is empty.
	while((ACCESS(I2C1_SR1) & (1 << 7)) == 0);
 8000ada:	bf00      	nop
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <I2CSendRegister+0x3c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0f9      	beq.n	8000adc <I2CSendRegister+0xc>

	// Put the register address into the data register
	ACCESS(I2C1_DR) = registerAddress;
 8000ae8:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <I2CSendRegister+0x40>)
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	6013      	str	r3, [r2, #0]

	// Wait until the transfer is complete.
	while((ACCESS(I2C1_SR1) & (1 << 7)) == 0);
 8000aee:	bf00      	nop
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <I2CSendRegister+0x3c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0f9      	beq.n	8000af0 <I2CSendRegister+0x20>
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40005414 	.word	0x40005414
 8000b10:	40005410 	.word	0x40005410

08000b14 <I2CWaitIfBusy>:

void I2CWaitIfBusy()
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
	// See page 502 of the datasheet.  Bit 1 of SR2 will be set when the I2C bus is busy.
	while((ACCESS(I2C1_SR2) & (1 << 1)) == (1 << 1));
 8000b18:	bf00      	nop
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <I2CWaitIfBusy+0x20>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d0f9      	beq.n	8000b1a <I2CWaitIfBusy+0x6>
}
 8000b26:	bf00      	nop
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40005418 	.word	0x40005418

08000b38 <I2CWriteByte>:

void I2CWriteByte(unsigned char data)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
	ACCESS(I2C1_DR) = data;
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <I2CWriteByte+0x2c>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	6013      	str	r3, [r2, #0]

	while((ACCESS(I2C1_SR1) & (1 << 2)) == 0);
 8000b48:	bf00      	nop
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <I2CWriteByte+0x30>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0f9      	beq.n	8000b4a <I2CWriteByte+0x12>
}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	40005410 	.word	0x40005410
 8000b68:	40005414 	.word	0x40005414

08000b6c <I2CGetData>:

unsigned char I2CGetData()
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

	while((ACCESS(I2C1_SR1) & (1 << 6)) == 0) { }
 8000b70:	bf00      	nop
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <I2CGetData+0x24>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0f9      	beq.n	8000b72 <I2CGetData+0x6>

	return ACCESS(I2C1_DR);
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <I2CGetData+0x28>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	b2db      	uxtb	r3, r3
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40005414 	.word	0x40005414
 8000b94:	40005410 	.word	0x40005410

08000b98 <ReadFromAccelerometer>:

unsigned char ReadFromAccelerometer(unsigned short registerAddress)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
	I2CWaitIfBusy();
 8000ba2:	f7ff ffb7 	bl	8000b14 <I2CWaitIfBusy>

	I2CEnableAcknowledge();
 8000ba6:	f7ff ff4d 	bl	8000a44 <I2CEnableAcknowledge>

	I2CStartRestart();
 8000baa:	f7ff ff2b 	bl	8000a04 <I2CStartRestart>

	I2CSendSlaveAddress(ACCELEROMETER_WRITE);
 8000bae:	2032      	movs	r0, #50	; 0x32
 8000bb0:	f7ff ff68 	bl	8000a84 <I2CSendSlaveAddress>

	I2CSendRegister(registerAddress);
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff8a 	bl	8000ad0 <I2CSendRegister>

	I2CStartRestart();
 8000bbc:	f7ff ff22 	bl	8000a04 <I2CStartRestart>

	I2CSendSlaveAddress(ACCELEROMETER_READ);
 8000bc0:	2033      	movs	r0, #51	; 0x33
 8000bc2:	f7ff ff5f 	bl	8000a84 <I2CSendSlaveAddress>

	I2CDisableAcknowledge();
 8000bc6:	f7ff ff4d 	bl	8000a64 <I2CDisableAcknowledge>

	I2CStop();
 8000bca:	f7ff ff2b 	bl	8000a24 <I2CStop>

	return I2CGetData();
 8000bce:	f7ff ffcd 	bl	8000b6c <I2CGetData>
 8000bd2:	4603      	mov	r3, r0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <WriteToAccelerometer>:

void WriteToAccelerometer(unsigned short registerAddress, unsigned char data)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	460a      	mov	r2, r1
 8000be6:	80fb      	strh	r3, [r7, #6]
 8000be8:	4613      	mov	r3, r2
 8000bea:	717b      	strb	r3, [r7, #5]
	I2CWaitIfBusy();
 8000bec:	f7ff ff92 	bl	8000b14 <I2CWaitIfBusy>

	I2CStartRestart();
 8000bf0:	f7ff ff08 	bl	8000a04 <I2CStartRestart>

	I2CSendSlaveAddress(ACCELEROMETER_WRITE);
 8000bf4:	2032      	movs	r0, #50	; 0x32
 8000bf6:	f7ff ff45 	bl	8000a84 <I2CSendSlaveAddress>

	I2CSendRegister(registerAddress);
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff67 	bl	8000ad0 <I2CSendRegister>

	I2CWriteByte(data);
 8000c02:	797b      	ldrb	r3, [r7, #5]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff97 	bl	8000b38 <I2CWriteByte>

	I2CStop();
 8000c0a:	f7ff ff0b 	bl	8000a24 <I2CStop>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <AccelerometerInit>:


void AccelerometerInit()
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0

	ACCESS(RCC_AHB1ENR) |= (1 << 1);
 8000c1e:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <AccelerometerInit+0xd0>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a31      	ldr	r2, [pc, #196]	; (8000ce8 <AccelerometerInit+0xd0>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	6013      	str	r3, [r2, #0]

	ACCESS(GPIOB_MODER) |= ((1 << 13) | (1 << 19));
 8000c2a:	4b30      	ldr	r3, [pc, #192]	; (8000cec <AccelerometerInit+0xd4>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a2f      	ldr	r2, [pc, #188]	; (8000cec <AccelerometerInit+0xd4>)
 8000c30:	f443 2302 	orr.w	r3, r3, #532480	; 0x82000
 8000c34:	6013      	str	r3, [r2, #0]


	ACCESS(GPIOB_AFRL) |= (4 << 24);
 8000c36:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <AccelerometerInit+0xd8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a2d      	ldr	r2, [pc, #180]	; (8000cf0 <AccelerometerInit+0xd8>)
 8000c3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c40:	6013      	str	r3, [r2, #0]
	ACCESS(GPIOB_AFRH) |= (4 << 4);
 8000c42:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <AccelerometerInit+0xdc>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a2b      	ldr	r2, [pc, #172]	; (8000cf4 <AccelerometerInit+0xdc>)
 8000c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4c:	6013      	str	r3, [r2, #0]

	ACCESS(GPIOB_OSPEEDR) |= ((2 << 12) | (2 << 18));
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <AccelerometerInit+0xe0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a29      	ldr	r2, [pc, #164]	; (8000cf8 <AccelerometerInit+0xe0>)
 8000c54:	f443 2302 	orr.w	r3, r3, #532480	; 0x82000
 8000c58:	6013      	str	r3, [r2, #0]

	ACCESS(RCC_APB1ENR) |= (1 << 21);
 8000c5a:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <AccelerometerInit+0xe4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a27      	ldr	r2, [pc, #156]	; (8000cfc <AccelerometerInit+0xe4>)
 8000c60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c64:	6013      	str	r3, [r2, #0]

	ACCESS(I2C1_CR2) &= ~(0x3F);
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <AccelerometerInit+0xe8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a25      	ldr	r2, [pc, #148]	; (8000d00 <AccelerometerInit+0xe8>)
 8000c6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c70:	6013      	str	r3, [r2, #0]
	ACCESS(I2C1_CR2) |= (0x02);
 8000c72:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <AccelerometerInit+0xe8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a22      	ldr	r2, [pc, #136]	; (8000d00 <AccelerometerInit+0xe8>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6013      	str	r3, [r2, #0]


	ACCESS(I2C1_CCR) &= ~(0xFFF);
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <AccelerometerInit+0xec>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a20      	ldr	r2, [pc, #128]	; (8000d04 <AccelerometerInit+0xec>)
 8000c84:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c88:	f023 030f 	bic.w	r3, r3, #15
 8000c8c:	6013      	str	r3, [r2, #0]
	ACCESS(I2C1_CCR) |= 0x50;
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <AccelerometerInit+0xec>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <AccelerometerInit+0xec>)
 8000c94:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000c98:	6013      	str	r3, [r2, #0]


	ACCESS(I2C1_TRISE) &= ~(0x3F);
 8000c9a:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <AccelerometerInit+0xf0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a1a      	ldr	r2, [pc, #104]	; (8000d08 <AccelerometerInit+0xf0>)
 8000ca0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ca4:	6013      	str	r3, [r2, #0]
	ACCESS(I2C1_TRISE) |= 0x03;
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <AccelerometerInit+0xf0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <AccelerometerInit+0xf0>)
 8000cac:	f043 0303 	orr.w	r3, r3, #3
 8000cb0:	6013      	str	r3, [r2, #0]


	ACCESS(I2C1_OAR1) |= ((0x21 << 1) | (1 << 14));
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <AccelerometerInit+0xf4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <AccelerometerInit+0xf4>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8000cc0:	6013      	str	r3, [r2, #0]

	ACCESS(I2C1_CR1) |= 1;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <AccelerometerInit+0xf8>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <AccelerometerInit+0xf8>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6013      	str	r3, [r2, #0]


	unsigned char accelerometerID = ReadFromAccelerometer(0xF);
 8000cce:	200f      	movs	r0, #15
 8000cd0:	f7ff ff62 	bl	8000b98 <ReadFromAccelerometer>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]
	{
		// Error
	}


	WriteToAccelerometer(0x20, 0x47);
 8000cd8:	2147      	movs	r1, #71	; 0x47
 8000cda:	2020      	movs	r0, #32
 8000cdc:	f7ff ff7e 	bl	8000bdc <WriteToAccelerometer>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40023830 	.word	0x40023830
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40020420 	.word	0x40020420
 8000cf4:	40020424 	.word	0x40020424
 8000cf8:	40020408 	.word	0x40020408
 8000cfc:	40023840 	.word	0x40023840
 8000d00:	40005404 	.word	0x40005404
 8000d04:	4000541c 	.word	0x4000541c
 8000d08:	40005420 	.word	0x40005420
 8000d0c:	40005408 	.word	0x40005408
 8000d10:	40005400 	.word	0x40005400

08000d14 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <ILI9341_Select+0x14>)
 8000d1e:	f001 ff2d 	bl	8002b7c <HAL_GPIO_WritePin>
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40020000 	.word	0x40020000

08000d2c <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2110      	movs	r1, #16
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <ILI9341_Unselect+0x14>)
 8000d36:	f001 ff21 	bl	8002b7c <HAL_GPIO_WritePin>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40020000 	.word	0x40020000

08000d44 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	4806      	ldr	r0, [pc, #24]	; (8000d68 <ILI9341_Reset+0x24>)
 8000d4e:	f001 ff15 	bl	8002b7c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000d52:	2005      	movs	r0, #5
 8000d54:	f001 fc58 	bl	8002608 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <ILI9341_Reset+0x24>)
 8000d5e:	f001 ff0d 	bl	8002b7c <HAL_GPIO_WritePin>
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40020000 	.word	0x40020000

08000d6c <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2108      	movs	r1, #8
 8000d7a:	4807      	ldr	r0, [pc, #28]	; (8000d98 <ILI9341_WriteCommand+0x2c>)
 8000d7c:	f001 fefe 	bl	8002b7c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000d80:	1df9      	adds	r1, r7, #7
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	2201      	movs	r2, #1
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <ILI9341_WriteCommand+0x30>)
 8000d8a:	f002 fd22 	bl	80037d2 <HAL_SPI_Transmit>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	200000e4 	.word	0x200000e4

08000da0 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2108      	movs	r1, #8
 8000dae:	4811      	ldr	r0, [pc, #68]	; (8000df4 <ILI9341_WriteData+0x54>)
 8000db0:	f001 fee4 	bl	8002b7c <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000db4:	e015      	b.n	8000de2 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dbc:	bf28      	it	cs
 8000dbe:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000dc2:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000dc4:	89fa      	ldrh	r2, [r7, #14]
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	480a      	ldr	r0, [pc, #40]	; (8000df8 <ILI9341_WriteData+0x58>)
 8000dce:	f002 fd00 	bl	80037d2 <HAL_SPI_Transmit>
        buff += chunk_size;
 8000dd2:	89fb      	ldrh	r3, [r7, #14]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000dda:	89fb      	ldrh	r3, [r7, #14]
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1e6      	bne.n	8000db6 <ILI9341_WriteData+0x16>
    }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40020000 	.word	0x40020000
 8000df8:	200000e4 	.word	0x200000e4

08000dfc <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4604      	mov	r4, r0
 8000e04:	4608      	mov	r0, r1
 8000e06:	4611      	mov	r1, r2
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	80fb      	strh	r3, [r7, #6]
 8000e0e:	4603      	mov	r3, r0
 8000e10:	80bb      	strh	r3, [r7, #4]
 8000e12:	460b      	mov	r3, r1
 8000e14:	807b      	strh	r3, [r7, #2]
 8000e16:	4613      	mov	r3, r2
 8000e18:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000e1a:	202a      	movs	r0, #42	; 0x2a
 8000e1c:	f7ff ffa6 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	733b      	strb	r3, [r7, #12]
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	737b      	strb	r3, [r7, #13]
 8000e30:	887b      	ldrh	r3, [r7, #2]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	73bb      	strb	r3, [r7, #14]
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2104      	movs	r1, #4
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ffaa 	bl	8000da0 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8000e4c:	202b      	movs	r0, #43	; 0x2b
 8000e4e:	f7ff ff8d 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000e52:	88bb      	ldrh	r3, [r7, #4]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	723b      	strb	r3, [r7, #8]
 8000e5c:	88bb      	ldrh	r3, [r7, #4]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	727b      	strb	r3, [r7, #9]
 8000e62:	883b      	ldrh	r3, [r7, #0]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	72bb      	strb	r3, [r7, #10]
 8000e6c:	883b      	ldrh	r3, [r7, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	2104      	movs	r1, #4
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff91 	bl	8000da0 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8000e7e:	202c      	movs	r0, #44	; 0x2c
 8000e80:	f7ff ff74 	bl	8000d6c <ILI9341_WriteCommand>
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd90      	pop	{r4, r7, pc}

08000e8c <ILI9341_Init>:

void ILI9341_Init() {
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b09b      	sub	sp, #108	; 0x6c
 8000e90:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000e92:	f7ff ff3f 	bl	8000d14 <ILI9341_Select>
    ILI9341_Reset();
 8000e96:	f7ff ff55 	bl	8000d44 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f7ff ff66 	bl	8000d6c <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea4:	f001 fbb0 	bl	8002608 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000ea8:	20cb      	movs	r0, #203	; 0xcb
 8000eaa:	f7ff ff5f 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000eae:	4a87      	ldr	r2, [pc, #540]	; (80010cc <ILI9341_Init+0x240>)
 8000eb0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000eb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb8:	6018      	str	r0, [r3, #0]
 8000eba:	3304      	adds	r3, #4
 8000ebc:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000ebe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ec2:	2105      	movs	r1, #5
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff6b 	bl	8000da0 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8000eca:	20cf      	movs	r0, #207	; 0xcf
 8000ecc:	f7ff ff4e 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000ed0:	4a7f      	ldr	r2, [pc, #508]	; (80010d0 <ILI9341_Init+0x244>)
 8000ed2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ed6:	6812      	ldr	r2, [r2, #0]
 8000ed8:	4611      	mov	r1, r2
 8000eda:	8019      	strh	r1, [r3, #0]
 8000edc:	3302      	adds	r3, #2
 8000ede:	0c12      	lsrs	r2, r2, #16
 8000ee0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000ee2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ee6:	2103      	movs	r1, #3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff59 	bl	8000da0 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8000eee:	20e8      	movs	r0, #232	; 0xe8
 8000ef0:	f7ff ff3c 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000ef4:	4a77      	ldr	r2, [pc, #476]	; (80010d4 <ILI9341_Init+0x248>)
 8000ef6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000efa:	6812      	ldr	r2, [r2, #0]
 8000efc:	4611      	mov	r1, r2
 8000efe:	8019      	strh	r1, [r3, #0]
 8000f00:	3302      	adds	r3, #2
 8000f02:	0c12      	lsrs	r2, r2, #16
 8000f04:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000f06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f0a:	2103      	movs	r1, #3
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff47 	bl	8000da0 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8000f12:	20ea      	movs	r0, #234	; 0xea
 8000f14:	f7ff ff2a 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 8000f1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f22:	2102      	movs	r1, #2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff3b 	bl	8000da0 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8000f2a:	20ed      	movs	r0, #237	; 0xed
 8000f2c:	f7ff ff1e 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000f30:	4b69      	ldr	r3, [pc, #420]	; (80010d8 <ILI9341_Init+0x24c>)
 8000f32:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 8000f34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f38:	2104      	movs	r1, #4
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff30 	bl	8000da0 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8000f40:	20f7      	movs	r0, #247	; 0xf7
 8000f42:	f7ff ff13 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8000f46:	2320      	movs	r3, #32
 8000f48:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8000f4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f50:	2101      	movs	r1, #1
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff24 	bl	8000da0 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8000f58:	20c0      	movs	r0, #192	; 0xc0
 8000f5a:	f7ff ff07 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8000f5e:	2323      	movs	r3, #35	; 0x23
 8000f60:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8000f64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f68:	2101      	movs	r1, #1
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff18 	bl	8000da0 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8000f70:	20c1      	movs	r0, #193	; 0xc1
 8000f72:	f7ff fefb 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8000f76:	2310      	movs	r3, #16
 8000f78:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8000f7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f80:	2101      	movs	r1, #1
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff0c 	bl	8000da0 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8000f88:	20c5      	movs	r0, #197	; 0xc5
 8000f8a:	f7ff feef 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8000f8e:	f642 033e 	movw	r3, #10302	; 0x283e
 8000f92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 8000f96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff feff 	bl	8000da0 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000fa2:	20c7      	movs	r0, #199	; 0xc7
 8000fa4:	f7ff fee2 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000fa8:	2386      	movs	r3, #134	; 0x86
 8000faa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8000fae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fef3 	bl	8000da0 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8000fba:	2036      	movs	r0, #54	; 0x36
 8000fbc:	f7ff fed6 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000fc0:	2348      	movs	r3, #72	; 0x48
 8000fc2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 8000fc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fca:	2101      	movs	r1, #1
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fee7 	bl	8000da0 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000fd2:	203a      	movs	r0, #58	; 0x3a
 8000fd4:	f7ff feca 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000fd8:	2355      	movs	r3, #85	; 0x55
 8000fda:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 8000fde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fedb 	bl	8000da0 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8000fea:	20b1      	movs	r0, #177	; 0xb1
 8000fec:	f7ff febe 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000ff0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ff4:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 8000ff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fecf 	bl	8000da0 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8001002:	20b6      	movs	r0, #182	; 0xb6
 8001004:	f7ff feb2 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8001008:	4a34      	ldr	r2, [pc, #208]	; (80010dc <ILI9341_Init+0x250>)
 800100a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	4611      	mov	r1, r2
 8001012:	8019      	strh	r1, [r3, #0]
 8001014:	3302      	adds	r3, #2
 8001016:	0c12      	lsrs	r2, r2, #16
 8001018:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800101a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101e:	2103      	movs	r1, #3
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff febd 	bl	8000da0 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8001026:	20f2      	movs	r0, #242	; 0xf2
 8001028:	f7ff fea0 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 800102c:	2300      	movs	r3, #0
 800102e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 8001032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001036:	2101      	movs	r1, #1
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff feb1 	bl	8000da0 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800103e:	2026      	movs	r0, #38	; 0x26
 8001040:	f7ff fe94 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8001044:	2301      	movs	r3, #1
 8001046:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	2101      	movs	r1, #1
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fea5 	bl	8000da0 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8001056:	20e0      	movs	r0, #224	; 0xe0
 8001058:	f7ff fe88 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <ILI9341_Init+0x254>)
 800105e:	f107 0414 	add.w	r4, r7, #20
 8001062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001064:	c407      	stmia	r4!, {r0, r1, r2}
 8001066:	8023      	strh	r3, [r4, #0]
 8001068:	3402      	adds	r4, #2
 800106a:	0c1b      	lsrs	r3, r3, #16
 800106c:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	210f      	movs	r1, #15
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fe93 	bl	8000da0 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 800107a:	20e1      	movs	r0, #225	; 0xe1
 800107c:	f7ff fe76 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <ILI9341_Init+0x258>)
 8001082:	1d3c      	adds	r4, r7, #4
 8001084:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001086:	c407      	stmia	r4!, {r0, r1, r2}
 8001088:	8023      	strh	r3, [r4, #0]
 800108a:	3402      	adds	r4, #2
 800108c:	0c1b      	lsrs	r3, r3, #16
 800108e:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	210f      	movs	r1, #15
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fe83 	bl	8000da0 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800109a:	2011      	movs	r0, #17
 800109c:	f7ff fe66 	bl	8000d6c <ILI9341_WriteCommand>
    HAL_Delay(120);
 80010a0:	2078      	movs	r0, #120	; 0x78
 80010a2:	f001 fab1 	bl	8002608 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80010a6:	2029      	movs	r0, #41	; 0x29
 80010a8:	f7ff fe60 	bl	8000d6c <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80010ac:	2036      	movs	r0, #54	; 0x36
 80010ae:	f7ff fe5d 	bl	8000d6c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80010b2:	2348      	movs	r3, #72	; 0x48
 80010b4:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80010b6:	463b      	mov	r3, r7
 80010b8:	2101      	movs	r1, #1
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe70 	bl	8000da0 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80010c0:	f7ff fe34 	bl	8000d2c <ILI9341_Unselect>
}
 80010c4:	bf00      	nop
 80010c6:	376c      	adds	r7, #108	; 0x6c
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	08005540 	.word	0x08005540
 80010d0:	08005548 	.word	0x08005548
 80010d4:	0800554c 	.word	0x0800554c
 80010d8:	81120364 	.word	0x81120364
 80010dc:	08005550 	.word	0x08005550
 80010e0:	08005554 	.word	0x08005554
 80010e4:	08005564 	.word	0x08005564

080010e8 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
 80010f2:	460b      	mov	r3, r1
 80010f4:	80bb      	strh	r3, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	2bef      	cmp	r3, #239	; 0xef
 80010fe:	d820      	bhi.n	8001142 <ILI9341_DrawPixel+0x5a>
 8001100:	88bb      	ldrh	r3, [r7, #4]
 8001102:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001106:	d21c      	bcs.n	8001142 <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 8001108:	f7ff fe04 	bl	8000d14 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	3301      	adds	r3, #1
 8001110:	b29a      	uxth	r2, r3
 8001112:	88bb      	ldrh	r3, [r7, #4]
 8001114:	3301      	adds	r3, #1
 8001116:	b29b      	uxth	r3, r3
 8001118:	88b9      	ldrh	r1, [r7, #4]
 800111a:	88f8      	ldrh	r0, [r7, #6]
 800111c:	f7ff fe6e 	bl	8000dfc <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8001120:	887b      	ldrh	r3, [r7, #2]
 8001122:	0a1b      	lsrs	r3, r3, #8
 8001124:	b29b      	uxth	r3, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	733b      	strb	r3, [r7, #12]
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2102      	movs	r1, #2
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fe32 	bl	8000da0 <ILI9341_WriteData>

    ILI9341_Unselect();
 800113c:	f7ff fdf6 	bl	8000d2c <ILI9341_Unselect>
 8001140:	e000      	b.n	8001144 <ILI9341_DrawPixel+0x5c>
        return;
 8001142:	bf00      	nop
}
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <ILI9341_FillRectangle>:
    }

    ILI9341_Unselect();
}

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	4604      	mov	r4, r0
 8001154:	4608      	mov	r0, r1
 8001156:	4611      	mov	r1, r2
 8001158:	461a      	mov	r2, r3
 800115a:	4623      	mov	r3, r4
 800115c:	80fb      	strh	r3, [r7, #6]
 800115e:	4603      	mov	r3, r0
 8001160:	80bb      	strh	r3, [r7, #4]
 8001162:	460b      	mov	r3, r1
 8001164:	807b      	strh	r3, [r7, #2]
 8001166:	4613      	mov	r3, r2
 8001168:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	2bef      	cmp	r3, #239	; 0xef
 800116e:	d853      	bhi.n	8001218 <ILI9341_FillRectangle+0xcc>
 8001170:	88bb      	ldrh	r3, [r7, #4]
 8001172:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001176:	d24f      	bcs.n	8001218 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8001178:	88fa      	ldrh	r2, [r7, #6]
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	4413      	add	r3, r2
 800117e:	2bf0      	cmp	r3, #240	; 0xf0
 8001180:	dd03      	ble.n	800118a <ILI9341_FillRectangle+0x3e>
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001188:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 800118a:	88ba      	ldrh	r2, [r7, #4]
 800118c:	883b      	ldrh	r3, [r7, #0]
 800118e:	4413      	add	r3, r2
 8001190:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001194:	dd03      	ble.n	800119e <ILI9341_FillRectangle+0x52>
 8001196:	88bb      	ldrh	r3, [r7, #4]
 8001198:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800119c:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 800119e:	f7ff fdb9 	bl	8000d14 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80011a2:	88fa      	ldrh	r2, [r7, #6]
 80011a4:	887b      	ldrh	r3, [r7, #2]
 80011a6:	4413      	add	r3, r2
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	3b01      	subs	r3, #1
 80011ac:	b29c      	uxth	r4, r3
 80011ae:	88ba      	ldrh	r2, [r7, #4]
 80011b0:	883b      	ldrh	r3, [r7, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	3b01      	subs	r3, #1
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	88b9      	ldrh	r1, [r7, #4]
 80011bc:	88f8      	ldrh	r0, [r7, #6]
 80011be:	4622      	mov	r2, r4
 80011c0:	f7ff fe1c 	bl	8000dfc <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80011c4:	8c3b      	ldrh	r3, [r7, #32]
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	733b      	strb	r3, [r7, #12]
 80011ce:	8c3b      	ldrh	r3, [r7, #32]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2108      	movs	r1, #8
 80011d8:	4811      	ldr	r0, [pc, #68]	; (8001220 <ILI9341_FillRectangle+0xd4>)
 80011da:	f001 fccf 	bl	8002b7c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80011de:	883b      	ldrh	r3, [r7, #0]
 80011e0:	80bb      	strh	r3, [r7, #4]
 80011e2:	e013      	b.n	800120c <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	80fb      	strh	r3, [r7, #6]
 80011e8:	e00a      	b.n	8001200 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80011ea:	f107 010c 	add.w	r1, r7, #12
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	2202      	movs	r2, #2
 80011f4:	480b      	ldr	r0, [pc, #44]	; (8001224 <ILI9341_FillRectangle+0xd8>)
 80011f6:	f002 faec 	bl	80037d2 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	80fb      	strh	r3, [r7, #6]
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f1      	bne.n	80011ea <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 8001206:	88bb      	ldrh	r3, [r7, #4]
 8001208:	3b01      	subs	r3, #1
 800120a:	80bb      	strh	r3, [r7, #4]
 800120c:	88bb      	ldrh	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1e8      	bne.n	80011e4 <ILI9341_FillRectangle+0x98>
        }
    }

    ILI9341_Unselect();
 8001212:	f7ff fd8b 	bl	8000d2c <ILI9341_Unselect>
 8001216:	e000      	b.n	800121a <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8001218:	bf00      	nop
}
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	40020000 	.word	0x40020000
 8001224:	200000e4 	.word	0x200000e4

08001228 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af02      	add	r7, sp, #8
 800122e:	4603      	mov	r3, r0
 8001230:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800123a:	22f0      	movs	r2, #240	; 0xf0
 800123c:	2100      	movs	r1, #0
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff ff84 	bl	800114c <ILI9341_FillRectangle>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <start>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void start() {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  ILI9341_FillScreen(ILI9341_WHITE);
 8001250:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001254:	f7ff ffe8 	bl	8001228 <ILI9341_FillScreen>
  FillMatrix();
 8001258:	f000 f9b6 	bl	80015c8 <FillMatrix>
  DrawCenteredBigX(ILI9341_BLACK);
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f991 	bl	8001584 <DrawCenteredBigX>
  RenderMatrix();
 8001262:	f000 fa05 	bl	8001670 <RenderMatrix>
  randomSortCurrentPositions(positionsX, positionsY, 550);
 8001266:	f240 2226 	movw	r2, #550	; 0x226
 800126a:	4904      	ldr	r1, [pc, #16]	; (800127c <start+0x30>)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <start+0x34>)
 800126e:	f000 f80b 	bl	8001288 <randomSortCurrentPositions>
  HAL_TIM_Base_Start_IT(&htim4);
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <start+0x38>)
 8001274:	f002 fd1c 	bl	8003cb0 <HAL_TIM_Base_Start_IT>

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20005524 	.word	0x20005524
 8001280:	20004c8c 	.word	0x20004c8c
 8001284:	2000013c 	.word	0x2000013c

08001288 <randomSortCurrentPositions>:


void randomSortCurrentPositions(int positionsX[], int positionsY[], int size) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
    srand(time(NULL));
 8001294:	2000      	movs	r0, #0
 8001296:	f003 fa79 	bl	800478c <time>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4613      	mov	r3, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 f8f9 	bl	8004498 <srand>

    for (int i = size - 1; i > 0; --i) {
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	e039      	b.n	8001322 <randomSortCurrentPositions+0x9a>
        int j = rand() % (i + 1);
 80012ae:	f003 f921 	bl	80044f4 <rand>
 80012b2:	4602      	mov	r2, r0
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	3301      	adds	r3, #1
 80012b8:	fb92 f1f3 	sdiv	r1, r2, r3
 80012bc:	fb01 f303 	mul.w	r3, r1, r3
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	61bb      	str	r3, [r7, #24]

        int tempX = positionsX[i];
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	617b      	str	r3, [r7, #20]
        positionsX[i] = positionsX[j];
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	441a      	add	r2, r3
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	68f9      	ldr	r1, [r7, #12]
 80012de:	440b      	add	r3, r1
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	601a      	str	r2, [r3, #0]
        positionsX[j] = tempX;
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	601a      	str	r2, [r3, #0]

		int tempY = positionsY[i];
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	4413      	add	r3, r2
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	613b      	str	r3, [r7, #16]
		positionsY[i] = positionsY[j];
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	441a      	add	r2, r3
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	440b      	add	r3, r1
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	601a      	str	r2, [r3, #0]
		positionsY[j] = tempY;
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	4413      	add	r3, r2
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	601a      	str	r2, [r3, #0]
    for (int i = size - 1; i > 0; --i) {
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	3b01      	subs	r3, #1
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	2b00      	cmp	r3, #0
 8001326:	dcc2      	bgt.n	80012ae <randomSortCurrentPositions+0x26>
    }
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <randomSortNextPositions>:

void randomSortNextPositions(int possible_positions[][2], int size) {
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
    srand(time(NULL));
 800133c:	2000      	movs	r0, #0
 800133e:	f003 fa25 	bl	800478c <time>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4613      	mov	r3, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f003 f8a5 	bl	8004498 <srand>

    for (int i = size-1; i > 0; --i) {
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	3b01      	subs	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	e039      	b.n	80013ca <randomSortNextPositions+0x98>
            int j = rand() % (i + 1);
 8001356:	f003 f8cd 	bl	80044f4 <rand>
 800135a:	4602      	mov	r2, r0
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	fb92 f1f3 	sdiv	r1, r2, r3
 8001364:	fb01 f303 	mul.w	r3, r1, r3
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	613b      	str	r3, [r7, #16]

            int tempY = possible_positions[i][0];
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	60fb      	str	r3, [r7, #12]
            int tempX = possible_positions[i][1];
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4413      	add	r3, r2
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	60bb      	str	r3, [r7, #8]

            possible_positions[i][0] = possible_positions[j][0];
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	441a      	add	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	440b      	add	r3, r1
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	601a      	str	r2, [r3, #0]
            possible_positions[i][1] = possible_positions[j][1];
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	441a      	add	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	440b      	add	r3, r1
 80013a8:	6852      	ldr	r2, [r2, #4]
 80013aa:	605a      	str	r2, [r3, #4]

            possible_positions[j][0] = tempY;
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	4413      	add	r3, r2
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	601a      	str	r2, [r3, #0]
            possible_positions[j][1] = tempX;
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	605a      	str	r2, [r3, #4]
    for (int i = size-1; i > 0; --i) {
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	dcc2      	bgt.n	8001356 <randomSortNextPositions+0x24>
        }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <DrawBigX>:


void DrawBigX(uint16_t x, uint16_t y, uint16_t size, uint16_t thickness, uint16_t color) {
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b087      	sub	sp, #28
 80013e0:	af02      	add	r7, sp, #8
 80013e2:	4604      	mov	r4, r0
 80013e4:	4608      	mov	r0, r1
 80013e6:	4611      	mov	r1, r2
 80013e8:	461a      	mov	r2, r3
 80013ea:	4623      	mov	r3, r4
 80013ec:	80fb      	strh	r3, [r7, #6]
 80013ee:	4603      	mov	r3, r0
 80013f0:	80bb      	strh	r3, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	807b      	strh	r3, [r7, #2]
 80013f6:	4613      	mov	r3, r2
 80013f8:	803b      	strh	r3, [r7, #0]
  uint16_t i, j;

  for (j = 0; j < thickness; j++) {
 80013fa:	2300      	movs	r3, #0
 80013fc:	81bb      	strh	r3, [r7, #12]
 80013fe:	e036      	b.n	800146e <DrawBigX+0x92>
    for (i = 0; i < size; i++) {
 8001400:	2300      	movs	r3, #0
 8001402:	81fb      	strh	r3, [r7, #14]
 8001404:	e02c      	b.n	8001460 <DrawBigX+0x84>
      ILI9341_DrawPixel(x + i, y + i + j, color);
 8001406:	88fa      	ldrh	r2, [r7, #6]
 8001408:	89fb      	ldrh	r3, [r7, #14]
 800140a:	4413      	add	r3, r2
 800140c:	b298      	uxth	r0, r3
 800140e:	88ba      	ldrh	r2, [r7, #4]
 8001410:	89fb      	ldrh	r3, [r7, #14]
 8001412:	4413      	add	r3, r2
 8001414:	b29a      	uxth	r2, r3
 8001416:	89bb      	ldrh	r3, [r7, #12]
 8001418:	4413      	add	r3, r2
 800141a:	b29b      	uxth	r3, r3
 800141c:	8c3a      	ldrh	r2, [r7, #32]
 800141e:	4619      	mov	r1, r3
 8001420:	f7ff fe62 	bl	80010e8 <ILI9341_DrawPixel>
      matrix[(y + i + j)/4][(x + i)/4] = 2;
 8001424:	88ba      	ldrh	r2, [r7, #4]
 8001426:	89fb      	ldrh	r3, [r7, #14]
 8001428:	441a      	add	r2, r3
 800142a:	89bb      	ldrh	r3, [r7, #12]
 800142c:	4413      	add	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	da00      	bge.n	8001434 <DrawBigX+0x58>
 8001432:	3303      	adds	r3, #3
 8001434:	109b      	asrs	r3, r3, #2
 8001436:	4619      	mov	r1, r3
 8001438:	88fa      	ldrh	r2, [r7, #6]
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	4413      	add	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	da00      	bge.n	8001444 <DrawBigX+0x68>
 8001442:	3303      	adds	r3, #3
 8001444:	109b      	asrs	r3, r3, #2
 8001446:	4618      	mov	r0, r3
 8001448:	4a4d      	ldr	r2, [pc, #308]	; (8001580 <DrawBigX+0x1a4>)
 800144a:	460b      	mov	r3, r1
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	1a5b      	subs	r3, r3, r1
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4403      	add	r3, r0
 8001454:	2102      	movs	r1, #2
 8001456:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < size; i++) {
 800145a:	89fb      	ldrh	r3, [r7, #14]
 800145c:	3301      	adds	r3, #1
 800145e:	81fb      	strh	r3, [r7, #14]
 8001460:	89fa      	ldrh	r2, [r7, #14]
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	429a      	cmp	r2, r3
 8001466:	d3ce      	bcc.n	8001406 <DrawBigX+0x2a>
  for (j = 0; j < thickness; j++) {
 8001468:	89bb      	ldrh	r3, [r7, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	81bb      	strh	r3, [r7, #12]
 800146e:	89ba      	ldrh	r2, [r7, #12]
 8001470:	883b      	ldrh	r3, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d3c4      	bcc.n	8001400 <DrawBigX+0x24>

    }
  }

  for (j = 0; j < thickness; j++) {
 8001476:	2300      	movs	r3, #0
 8001478:	81bb      	strh	r3, [r7, #12]
 800147a:	e036      	b.n	80014ea <DrawBigX+0x10e>
    for (i = 0; i < size; i++) {
 800147c:	2300      	movs	r3, #0
 800147e:	81fb      	strh	r3, [r7, #14]
 8001480:	e02c      	b.n	80014dc <DrawBigX+0x100>
	  ILI9341_DrawPixel(SCREEN_WIDTH - i-1, y + i + j, color);
 8001482:	89fb      	ldrh	r3, [r7, #14]
 8001484:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8001488:	b298      	uxth	r0, r3
 800148a:	88ba      	ldrh	r2, [r7, #4]
 800148c:	89fb      	ldrh	r3, [r7, #14]
 800148e:	4413      	add	r3, r2
 8001490:	b29a      	uxth	r2, r3
 8001492:	89bb      	ldrh	r3, [r7, #12]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	8c3a      	ldrh	r2, [r7, #32]
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff fe24 	bl	80010e8 <ILI9341_DrawPixel>
	  matrix[(y + i + j)/4][(SCREEN_WIDTH - i)/4] = 2;
 80014a0:	88ba      	ldrh	r2, [r7, #4]
 80014a2:	89fb      	ldrh	r3, [r7, #14]
 80014a4:	441a      	add	r2, r3
 80014a6:	89bb      	ldrh	r3, [r7, #12]
 80014a8:	4413      	add	r3, r2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	da00      	bge.n	80014b0 <DrawBigX+0xd4>
 80014ae:	3303      	adds	r3, #3
 80014b0:	109b      	asrs	r3, r3, #2
 80014b2:	4619      	mov	r1, r3
 80014b4:	89fb      	ldrh	r3, [r7, #14]
 80014b6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	da00      	bge.n	80014c0 <DrawBigX+0xe4>
 80014be:	3303      	adds	r3, #3
 80014c0:	109b      	asrs	r3, r3, #2
 80014c2:	4618      	mov	r0, r3
 80014c4:	4a2e      	ldr	r2, [pc, #184]	; (8001580 <DrawBigX+0x1a4>)
 80014c6:	460b      	mov	r3, r1
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	1a5b      	subs	r3, r3, r1
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4403      	add	r3, r0
 80014d0:	2102      	movs	r1, #2
 80014d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < size; i++) {
 80014d6:	89fb      	ldrh	r3, [r7, #14]
 80014d8:	3301      	adds	r3, #1
 80014da:	81fb      	strh	r3, [r7, #14]
 80014dc:	89fa      	ldrh	r2, [r7, #14]
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d3ce      	bcc.n	8001482 <DrawBigX+0xa6>
  for (j = 0; j < thickness; j++) {
 80014e4:	89bb      	ldrh	r3, [r7, #12]
 80014e6:	3301      	adds	r3, #1
 80014e8:	81bb      	strh	r3, [r7, #12]
 80014ea:	89ba      	ldrh	r2, [r7, #12]
 80014ec:	883b      	ldrh	r3, [r7, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d3c4      	bcc.n	800147c <DrawBigX+0xa0>

    }
  }

  for (j = 38; j < 46; j++) {
 80014f2:	2326      	movs	r3, #38	; 0x26
 80014f4:	81bb      	strh	r3, [r7, #12]
 80014f6:	e03b      	b.n	8001570 <DrawBigX+0x194>
	  for (i = 29; i < 31; i++) {
 80014f8:	231d      	movs	r3, #29
 80014fa:	81fb      	strh	r3, [r7, #14]
 80014fc:	e032      	b.n	8001564 <DrawBigX+0x188>
		  matrix[j][i] = 0;
 80014fe:	89ba      	ldrh	r2, [r7, #12]
 8001500:	89f9      	ldrh	r1, [r7, #14]
 8001502:	481f      	ldr	r0, [pc, #124]	; (8001580 <DrawBigX+0x1a4>)
 8001504:	4613      	mov	r3, r2
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	1a9b      	subs	r3, r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	2200      	movs	r2, #0
 8001510:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		  matrix[j][i+3] = 2;
 8001514:	89ba      	ldrh	r2, [r7, #12]
 8001516:	89fb      	ldrh	r3, [r7, #14]
 8001518:	1cd9      	adds	r1, r3, #3
 800151a:	4819      	ldr	r0, [pc, #100]	; (8001580 <DrawBigX+0x1a4>)
 800151c:	4613      	mov	r3, r2
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	1a9b      	subs	r3, r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	2202      	movs	r2, #2
 8001528:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		  matrix[j][i-3] = 2;
 800152c:	89ba      	ldrh	r2, [r7, #12]
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	1ed9      	subs	r1, r3, #3
 8001532:	4813      	ldr	r0, [pc, #76]	; (8001580 <DrawBigX+0x1a4>)
 8001534:	4613      	mov	r3, r2
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	1a9b      	subs	r3, r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	2202      	movs	r2, #2
 8001540:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		  ILI9341_FillRectangle(i*4, j*4, 4, 4, ILI9341_WHITE);
 8001544:	89fb      	ldrh	r3, [r7, #14]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	b298      	uxth	r0, r3
 800154a:	89bb      	ldrh	r3, [r7, #12]
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	b299      	uxth	r1, r3
 8001550:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2304      	movs	r3, #4
 8001558:	2204      	movs	r2, #4
 800155a:	f7ff fdf7 	bl	800114c <ILI9341_FillRectangle>
	  for (i = 29; i < 31; i++) {
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	3301      	adds	r3, #1
 8001562:	81fb      	strh	r3, [r7, #14]
 8001564:	89fb      	ldrh	r3, [r7, #14]
 8001566:	2b1e      	cmp	r3, #30
 8001568:	d9c9      	bls.n	80014fe <DrawBigX+0x122>
  for (j = 38; j < 46; j++) {
 800156a:	89bb      	ldrh	r3, [r7, #12]
 800156c:	3301      	adds	r3, #1
 800156e:	81bb      	strh	r3, [r7, #12]
 8001570:	89bb      	ldrh	r3, [r7, #12]
 8001572:	2b2d      	cmp	r3, #45	; 0x2d
 8001574:	d9c0      	bls.n	80014f8 <DrawBigX+0x11c>
	  }
  }

}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	20000184 	.word	0x20000184

08001584 <DrawCenteredBigX>:

void DrawCenteredBigX(uint16_t color) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af02      	add	r7, sp, #8
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
  uint16_t size = SCREEN_WIDTH > SCREEN_HEIGHT ? SCREEN_HEIGHT : SCREEN_WIDTH;
 800158e:	23f0      	movs	r3, #240	; 0xf0
 8001590:	81fb      	strh	r3, [r7, #14]
  uint16_t x = (SCREEN_WIDTH - size) / 2;
 8001592:	89fb      	ldrh	r3, [r7, #14]
 8001594:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001598:	0fda      	lsrs	r2, r3, #31
 800159a:	4413      	add	r3, r2
 800159c:	105b      	asrs	r3, r3, #1
 800159e:	81bb      	strh	r3, [r7, #12]
  uint16_t y = (SCREEN_HEIGHT - size) / 2;
 80015a0:	89fb      	ldrh	r3, [r7, #14]
 80015a2:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80015a6:	0fda      	lsrs	r2, r3, #31
 80015a8:	4413      	add	r3, r2
 80015aa:	105b      	asrs	r3, r3, #1
 80015ac:	817b      	strh	r3, [r7, #10]

  DrawBigX(x, y, size, LINE_THICKNESS, color);
 80015ae:	89fa      	ldrh	r2, [r7, #14]
 80015b0:	8979      	ldrh	r1, [r7, #10]
 80015b2:	89b8      	ldrh	r0, [r7, #12]
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2312      	movs	r3, #18
 80015ba:	f7ff ff0f 	bl	80013dc <DrawBigX>
}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <FillMatrix>:

void FillMatrix() {
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
	int idx = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 80; i++) {
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	e03b      	b.n	8001650 <FillMatrix+0x88>
		for (int j = 0; j < 60; j++) {
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	e032      	b.n	8001644 <FillMatrix+0x7c>
			if (i < 9 || (i == 9 && j > 25  && j < 36)) {
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	dd08      	ble.n	80015f6 <FillMatrix+0x2e>
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b09      	cmp	r3, #9
 80015e8:	d11e      	bne.n	8001628 <FillMatrix+0x60>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b19      	cmp	r3, #25
 80015ee:	dd1b      	ble.n	8001628 <FillMatrix+0x60>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b23      	cmp	r3, #35	; 0x23
 80015f4:	dc18      	bgt.n	8001628 <FillMatrix+0x60>
				positionsY[idx] = i;
 80015f6:	491b      	ldr	r1, [pc, #108]	; (8001664 <FillMatrix+0x9c>)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				positionsX[idx] = j;
 8001600:	4919      	ldr	r1, [pc, #100]	; (8001668 <FillMatrix+0xa0>)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				matrix[i][j] = 1;
 800160a:	4918      	ldr	r1, [pc, #96]	; (800166c <FillMatrix+0xa4>)
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	4613      	mov	r3, r2
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	2201      	movs	r2, #1
 800161c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				idx++;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3301      	adds	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	e00a      	b.n	800163e <FillMatrix+0x76>
			} else matrix[i][j] = 0;
 8001628:	4910      	ldr	r1, [pc, #64]	; (800166c <FillMatrix+0xa4>)
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	4613      	mov	r3, r2
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	1a9b      	subs	r3, r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	2200      	movs	r2, #0
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j = 0; j < 60; j++) {
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3301      	adds	r3, #1
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b3b      	cmp	r3, #59	; 0x3b
 8001648:	ddc9      	ble.n	80015de <FillMatrix+0x16>
	for (int i = 0; i < 80; i++) {
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	3301      	adds	r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2b4f      	cmp	r3, #79	; 0x4f
 8001654:	ddc0      	ble.n	80015d8 <FillMatrix+0x10>
		}
	}

}
 8001656:	bf00      	nop
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	20005524 	.word	0x20005524
 8001668:	20004c8c 	.word	0x20004c8c
 800166c:	20000184 	.word	0x20000184

08001670 <RenderMatrix>:

void RenderMatrix() {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af02      	add	r7, sp, #8
	for (int i = 0; i < SCREEN_HEIGHT ; i++) {
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	e046      	b.n	800170a <RenderMatrix+0x9a>
		for (int j = 0; j < SCREEN_WIDTH; j++) {
 800167c:	2300      	movs	r3, #0
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	e03d      	b.n	80016fe <RenderMatrix+0x8e>
			if (matrix[i][j] == 1) ILI9341_FillRectangle(j*4, i*4, 4, 4, colors[step-1]);
 8001682:	4926      	ldr	r1, [pc, #152]	; (800171c <RenderMatrix+0xac>)
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	4413      	add	r3, r2
 8001692:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d113      	bne.n	80016c2 <RenderMatrix+0x52>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	b298      	uxth	r0, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	b299      	uxth	r1, r3
 80016aa:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <RenderMatrix+0xb0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	4a1c      	ldr	r2, [pc, #112]	; (8001724 <RenderMatrix+0xb4>)
 80016b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2304      	movs	r3, #4
 80016ba:	2204      	movs	r2, #4
 80016bc:	f7ff fd46 	bl	800114c <ILI9341_FillRectangle>
 80016c0:	e01a      	b.n	80016f8 <RenderMatrix+0x88>
			else if (matrix[i][j] == 0) ILI9341_FillRectangle(j*4, i*4, 4, 4, ILI9341_WHITE);
 80016c2:	4916      	ldr	r1, [pc, #88]	; (800171c <RenderMatrix+0xac>)
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	1a9b      	subs	r3, r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	4413      	add	r3, r2
 80016d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10e      	bne.n	80016f8 <RenderMatrix+0x88>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	b298      	uxth	r0, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	b299      	uxth	r1, r3
 80016ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2304      	movs	r3, #4
 80016f2:	2204      	movs	r2, #4
 80016f4:	f7ff fd2a 	bl	800114c <ILI9341_FillRectangle>
		for (int j = 0; j < SCREEN_WIDTH; j++) {
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2bef      	cmp	r3, #239	; 0xef
 8001702:	ddbe      	ble.n	8001682 <RenderMatrix+0x12>
	for (int i = 0; i < SCREEN_HEIGHT ; i++) {
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3301      	adds	r3, #1
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001710:	dbb4      	blt.n	800167c <RenderMatrix+0xc>
		}
	}
}
 8001712:	bf00      	nop
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000184 	.word	0x20000184
 8001720:	20000008 	.word	0x20000008
 8001724:	20000000 	.word	0x20000000

08001728 <SetGoal>:



void SetGoal(int *goal_y, int * goal_x) {
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
	x = ((ReadFromAccelerometer(0x29) << 8) | ReadFromAccelerometer(0x28));
 8001732:	2029      	movs	r0, #41	; 0x29
 8001734:	f7ff fa30 	bl	8000b98 <ReadFromAccelerometer>
 8001738:	4603      	mov	r3, r0
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	b21c      	sxth	r4, r3
 800173e:	2028      	movs	r0, #40	; 0x28
 8001740:	f7ff fa2a 	bl	8000b98 <ReadFromAccelerometer>
 8001744:	4603      	mov	r3, r0
 8001746:	b21b      	sxth	r3, r3
 8001748:	4323      	orrs	r3, r4
 800174a:	b21b      	sxth	r3, r3
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b98      	ldr	r3, [pc, #608]	; (80019b0 <SetGoal+0x288>)
 8001750:	801a      	strh	r2, [r3, #0]
	y = ((ReadFromAccelerometer(0x2B) << 8) | ReadFromAccelerometer(0x2A));
 8001752:	202b      	movs	r0, #43	; 0x2b
 8001754:	f7ff fa20 	bl	8000b98 <ReadFromAccelerometer>
 8001758:	4603      	mov	r3, r0
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	b21c      	sxth	r4, r3
 800175e:	202a      	movs	r0, #42	; 0x2a
 8001760:	f7ff fa1a 	bl	8000b98 <ReadFromAccelerometer>
 8001764:	4603      	mov	r3, r0
 8001766:	b21b      	sxth	r3, r3
 8001768:	4323      	orrs	r3, r4
 800176a:	b21b      	sxth	r3, r3
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b91      	ldr	r3, [pc, #580]	; (80019b4 <SetGoal+0x28c>)
 8001770:	801a      	strh	r2, [r3, #0]
	z = ((ReadFromAccelerometer(0x2D) << 8) | ReadFromAccelerometer(0x2C));
 8001772:	202d      	movs	r0, #45	; 0x2d
 8001774:	f7ff fa10 	bl	8000b98 <ReadFromAccelerometer>
 8001778:	4603      	mov	r3, r0
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	b21c      	sxth	r4, r3
 800177e:	202c      	movs	r0, #44	; 0x2c
 8001780:	f7ff fa0a 	bl	8000b98 <ReadFromAccelerometer>
 8001784:	4603      	mov	r3, r0
 8001786:	b21b      	sxth	r3, r3
 8001788:	4323      	orrs	r3, r4
 800178a:	b21b      	sxth	r3, r3
 800178c:	b29a      	uxth	r2, r3
 800178e:	4b8a      	ldr	r3, [pc, #552]	; (80019b8 <SetGoal+0x290>)
 8001790:	801a      	strh	r2, [r3, #0]
	if (z <= 20000 && z >= 14000) {
 8001792:	4b89      	ldr	r3, [pc, #548]	; (80019b8 <SetGoal+0x290>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	f644 6220 	movw	r2, #20000	; 0x4e20
 800179a:	4293      	cmp	r3, r2
 800179c:	d818      	bhi.n	80017d0 <SetGoal+0xa8>
 800179e:	4b86      	ldr	r3, [pc, #536]	; (80019b8 <SetGoal+0x290>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	f243 62af 	movw	r2, #13999	; 0x36af
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d912      	bls.n	80017d0 <SetGoal+0xa8>
		step++;
 80017aa:	4b84      	ldr	r3, [pc, #528]	; (80019bc <SetGoal+0x294>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	4a82      	ldr	r2, [pc, #520]	; (80019bc <SetGoal+0x294>)
 80017b2:	6013      	str	r3, [r2, #0]
		step = step > 3 ? 1 : step;
 80017b4:	4b81      	ldr	r3, [pc, #516]	; (80019bc <SetGoal+0x294>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	dc02      	bgt.n	80017c2 <SetGoal+0x9a>
 80017bc:	4b7f      	ldr	r3, [pc, #508]	; (80019bc <SetGoal+0x294>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	e000      	b.n	80017c4 <SetGoal+0x9c>
 80017c2:	2301      	movs	r3, #1
 80017c4:	4a7d      	ldr	r2, [pc, #500]	; (80019bc <SetGoal+0x294>)
 80017c6:	6013      	str	r3, [r2, #0]
		MX_TIM4_Init();
 80017c8:	f000 fbf4 	bl	8001fb4 <MX_TIM4_Init>
		start();
 80017cc:	f7ff fd3e 	bl	800124c <start>
	}

	if (y >= 13001 && y <=16000) {
 80017d0:	4b78      	ldr	r3, [pc, #480]	; (80019b4 <SetGoal+0x28c>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80017d8:	4293      	cmp	r3, r2
 80017da:	d90b      	bls.n	80017f4 <SetGoal+0xcc>
 80017dc:	4b75      	ldr	r3, [pc, #468]	; (80019b4 <SetGoal+0x28c>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80017e4:	d806      	bhi.n	80017f4 <SetGoal+0xcc>
		*goal_y = 40;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2228      	movs	r2, #40	; 0x28
 80017ea:	601a      	str	r2, [r3, #0]
		*goal_x = 1;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	2201      	movs	r2, #1
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	e0d8      	b.n	80019a6 <SetGoal+0x27e>
	}
	else if ( y >= 49000 && y <= 55999 ) {
 80017f4:	4b6f      	ldr	r3, [pc, #444]	; (80019b4 <SetGoal+0x28c>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	f64b 7267 	movw	r2, #48999	; 0xbf67
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d90d      	bls.n	800181c <SetGoal+0xf4>
 8001800:	4b6c      	ldr	r3, [pc, #432]	; (80019b4 <SetGoal+0x28c>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8001808:	4293      	cmp	r3, r2
 800180a:	d807      	bhi.n	800181c <SetGoal+0xf4>
		*goal_y = 40;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2228      	movs	r2, #40	; 0x28
 8001810:	601a      	str	r2, [r3, #0]
		*goal_x = -1;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	e0c4      	b.n	80019a6 <SetGoal+0x27e>
	}

	else if ( x < 40000 && x > 5000) {
 800181c:	4b64      	ldr	r3, [pc, #400]	; (80019b0 <SetGoal+0x288>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001824:	4293      	cmp	r3, r2
 8001826:	d861      	bhi.n	80018ec <SetGoal+0x1c4>
 8001828:	4b61      	ldr	r3, [pc, #388]	; (80019b0 <SetGoal+0x288>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d95b      	bls.n	80018ec <SetGoal+0x1c4>

		if (y < 2000 || y > 64000) {
 8001834:	4b5f      	ldr	r3, [pc, #380]	; (80019b4 <SetGoal+0x28c>)
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800183c:	d304      	bcc.n	8001848 <SetGoal+0x120>
 800183e:	4b5d      	ldr	r3, [pc, #372]	; (80019b4 <SetGoal+0x28c>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001846:	d906      	bls.n	8001856 <SetGoal+0x12e>
			*goal_y = 105;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2269      	movs	r2, #105	; 0x69
 800184c:	601a      	str	r2, [r3, #0]
			*goal_x = 30;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	221e      	movs	r2, #30
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e049      	b.n	80018ea <SetGoal+0x1c2>
		}
		else if (y >= 60000 && y <= 64000) {
 8001856:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <SetGoal+0x28c>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800185e:	4293      	cmp	r3, r2
 8001860:	d90b      	bls.n	800187a <SetGoal+0x152>
 8001862:	4b54      	ldr	r3, [pc, #336]	; (80019b4 <SetGoal+0x28c>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 800186a:	d806      	bhi.n	800187a <SetGoal+0x152>
			*goal_y = 105;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2269      	movs	r2, #105	; 0x69
 8001870:	601a      	str	r2, [r3, #0]
			*goal_x = 15;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	220f      	movs	r2, #15
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e037      	b.n	80018ea <SetGoal+0x1c2>
		}
		else if ( y >= 56000 && y <= 59999 ) {
 800187a:	4b4e      	ldr	r3, [pc, #312]	; (80019b4 <SetGoal+0x28c>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8001882:	4293      	cmp	r3, r2
 8001884:	d90c      	bls.n	80018a0 <SetGoal+0x178>
 8001886:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <SetGoal+0x28c>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800188e:	4293      	cmp	r3, r2
 8001890:	d806      	bhi.n	80018a0 <SetGoal+0x178>
			*goal_y = 80;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2250      	movs	r2, #80	; 0x50
 8001896:	601a      	str	r2, [r3, #0]
			*goal_x = 0;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	e024      	b.n	80018ea <SetGoal+0x1c2>
		}

		else if ( y >= 2000 && y <= 7000) {
 80018a0:	4b44      	ldr	r3, [pc, #272]	; (80019b4 <SetGoal+0x28c>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018a8:	d30c      	bcc.n	80018c4 <SetGoal+0x19c>
 80018aa:	4b42      	ldr	r3, [pc, #264]	; (80019b4 <SetGoal+0x28c>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	f641 3258 	movw	r2, #7000	; 0x1b58
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d806      	bhi.n	80018c4 <SetGoal+0x19c>
			*goal_y = 105;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2269      	movs	r2, #105	; 0x69
 80018ba:	601a      	str	r2, [r3, #0]
			*goal_x = 45;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	222d      	movs	r2, #45	; 0x2d
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e012      	b.n	80018ea <SetGoal+0x1c2>
		}
		else if (y >= 7001 && y <=13000) {
 80018c4:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <SetGoal+0x28c>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	f641 3258 	movw	r2, #7000	; 0x1b58
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d969      	bls.n	80019a4 <SetGoal+0x27c>
 80018d0:	4b38      	ldr	r3, [pc, #224]	; (80019b4 <SetGoal+0x28c>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80018d8:	4293      	cmp	r3, r2
 80018da:	d863      	bhi.n	80019a4 <SetGoal+0x27c>
			*goal_y = 80;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2250      	movs	r2, #80	; 0x50
 80018e0:	601a      	str	r2, [r3, #0]
			*goal_x = 60;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	223c      	movs	r2, #60	; 0x3c
 80018e6:	601a      	str	r2, [r3, #0]
		if (y < 2000 || y > 64000) {
 80018e8:	e05c      	b.n	80019a4 <SetGoal+0x27c>
 80018ea:	e05b      	b.n	80019a4 <SetGoal+0x27c>
		}

	}
	else {
		if ((y <= 4000 && y >= 0) || (y <= 66000 && y >= 62000) ) {
 80018ec:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <SetGoal+0x28c>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80018f4:	d905      	bls.n	8001902 <SetGoal+0x1da>
 80018f6:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <SetGoal+0x28c>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	f24f 222f 	movw	r2, #61999	; 0xf22f
 80018fe:	4293      	cmp	r3, r2
 8001900:	d907      	bls.n	8001912 <SetGoal+0x1ea>
			*goal_y = -20;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f06f 0213 	mvn.w	r2, #19
 8001908:	601a      	str	r2, [r3, #0]
			*goal_x = 30;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	221e      	movs	r2, #30
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e049      	b.n	80019a6 <SetGoal+0x27e>
		} else if (y < 62000 && y >= 58000) {
 8001912:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <SetGoal+0x28c>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	f24f 222f 	movw	r2, #61999	; 0xf22f
 800191a:	4293      	cmp	r3, r2
 800191c:	d80c      	bhi.n	8001938 <SetGoal+0x210>
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <SetGoal+0x28c>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	f24e 228f 	movw	r2, #57999	; 0xe28f
 8001926:	4293      	cmp	r3, r2
 8001928:	d906      	bls.n	8001938 <SetGoal+0x210>
			*goal_y = 0;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
			*goal_x = 15;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	220f      	movs	r2, #15
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e036      	b.n	80019a6 <SetGoal+0x27e>
		} else if (y < 58000 && y >= 54000) {
 8001938:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <SetGoal+0x28c>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	f24e 228f 	movw	r2, #57999	; 0xe28f
 8001940:	4293      	cmp	r3, r2
 8001942:	d80c      	bhi.n	800195e <SetGoal+0x236>
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <SetGoal+0x28c>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 800194c:	4293      	cmp	r3, r2
 800194e:	d906      	bls.n	800195e <SetGoal+0x236>
			*goal_y = 0;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
			*goal_x = 0;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e023      	b.n	80019a6 <SetGoal+0x27e>
		}
		else if (y <= 8000 && y > 4000) {
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <SetGoal+0x28c>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001966:	d80b      	bhi.n	8001980 <SetGoal+0x258>
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <SetGoal+0x28c>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001970:	d906      	bls.n	8001980 <SetGoal+0x258>
			*goal_y = 0;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
			*goal_x = 45;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	222d      	movs	r2, #45	; 0x2d
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e012      	b.n	80019a6 <SetGoal+0x27e>
		}
		else if (y <= 12000 && y > 8000) {
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <SetGoal+0x28c>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001988:	4293      	cmp	r3, r2
 800198a:	d80c      	bhi.n	80019a6 <SetGoal+0x27e>
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <SetGoal+0x28c>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001994:	d907      	bls.n	80019a6 <SetGoal+0x27e>
			*goal_y = 0;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
			*goal_x = 60;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	223c      	movs	r2, #60	; 0x3c
 80019a0:	601a      	str	r2, [r3, #0]
		}
	}
}
 80019a2:	e000      	b.n	80019a6 <SetGoal+0x27e>
		if (y < 2000 || y > 64000) {
 80019a4:	bf00      	nop
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd90      	pop	{r4, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20005dbe 	.word	0x20005dbe
 80019b4:	20005dbc 	.word	0x20005dbc
 80019b8:	20005dc0 	.word	0x20005dc0
 80019bc:	20000008 	.word	0x20000008

080019c0 <NextPosition>:

void NextPosition(int y, int x, int *result_y, int *result_x) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b0c0      	sub	sp, #256	; 0x100
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80019d0:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80019d4:	6013      	str	r3, [r2, #0]
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3b01      	subs	r3, #1
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	637b      	str	r3, [r7, #52]	; 0x34
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	3301      	adds	r3, #1
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	643b      	str	r3, [r7, #64]	; 0x40
                                    {y, x - 1}, {y, x + 1}, {y + 1, x}, {y + 1, x - 1},
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	3b01      	subs	r3, #1
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a00:	647b      	str	r3, [r7, #68]	; 0x44
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	64bb      	str	r3, [r7, #72]	; 0x48
                                    {y, x - 1}, {y, x + 1}, {y + 1, x}, {y + 1, x - 1},
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3301      	adds	r3, #1
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
                                    {y, x - 1}, {y, x + 1}, {y + 1, x}, {y + 1, x - 1},
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3301      	adds	r3, #1
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a10:	653b      	str	r3, [r7, #80]	; 0x50
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	657b      	str	r3, [r7, #84]	; 0x54
                                    {y, x - 1}, {y, x + 1}, {y + 1, x}, {y + 1, x - 1},
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3301      	adds	r3, #1
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a1a:	65bb      	str	r3, [r7, #88]	; 0x58
                                    {y, x - 1}, {y, x + 1}, {y + 1, x}, {y + 1, x - 1},
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	3b01      	subs	r3, #1
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a20:	65fb      	str	r3, [r7, #92]	; 0x5c
									{y + 1, x + 1}},
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3301      	adds	r3, #1
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a26:	663b      	str	r3, [r7, #96]	; 0x60
									{y + 1, x + 1}},
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	3301      	adds	r3, #1
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a2c:	667b      	str	r3, [r7, #100]	; 0x64
    								{{y - 2, x}, {y - 2, x - 2}, {y - 2, x + 2},
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3b02      	subs	r3, #2
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a32:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	66fb      	str	r3, [r7, #108]	; 0x6c
    								{{y - 2, x}, {y - 2, x - 2}, {y - 2, x + 2},
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3b02      	subs	r3, #2
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a3c:	673b      	str	r3, [r7, #112]	; 0x70
    								{{y - 2, x}, {y - 2, x - 2}, {y - 2, x + 2},
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	3b02      	subs	r3, #2
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a42:	677b      	str	r3, [r7, #116]	; 0x74
    								{{y - 2, x}, {y - 2, x - 2}, {y - 2, x + 2},
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3b02      	subs	r3, #2
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a48:	67bb      	str	r3, [r7, #120]	; 0x78
    								{{y - 2, x}, {y - 2, x - 2}, {y - 2, x + 2},
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	3302      	adds	r3, #2
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    		                        {y, x - 2}, {y, x + 2}, {y + 2, x}, {y + 2, x - 2},
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	3b02      	subs	r3, #2
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    		                        {y, x - 2}, {y, x + 2}, {y + 2, x}, {y + 2, x - 2},
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	3302      	adds	r3, #2
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    		                        {y, x - 2}, {y, x + 2}, {y + 2, x}, {y + 2, x - 2},
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3302      	adds	r3, #2
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    		                        {y, x - 2}, {y, x + 2}, {y + 2, x}, {y + 2, x - 2},
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3302      	adds	r3, #2
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    		                        {y, x - 2}, {y, x + 2}, {y + 2, x}, {y + 2, x - 2},
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3b02      	subs	r3, #2
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    								{y + 2, x + 2}},
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3302      	adds	r3, #2
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    								{y + 2, x + 2}},
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3302      	adds	r3, #2
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
									{{y - 3, x}, {y - 3, x - 3}, {y - 3, x + 3},
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3b03      	subs	r3, #3
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
									{{y - 3, x}, {y - 3, x - 3}, {y - 3, x + 3},
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3b03      	subs	r3, #3
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
									{{y - 3, x}, {y - 3, x - 3}, {y - 3, x + 3},
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	3b03      	subs	r3, #3
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
									{{y - 3, x}, {y - 3, x - 3}, {y - 3, x + 3},
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3b03      	subs	r3, #3
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001abc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
									{{y - 3, x}, {y - 3, x - 3}, {y - 3, x + 3},
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	3303      	adds	r3, #3
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001ac4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
									{y, x - 3}, {y, x + 3}, {y + 3, x}, {y + 3, x - 3},
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	3b03      	subs	r3, #3
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001ad2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
									{y, x - 3}, {y, x + 3}, {y + 3, x}, {y + 3, x - 3},
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	3303      	adds	r3, #3
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
									{y, x - 3}, {y, x + 3}, {y + 3, x}, {y + 3, x - 3},
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	3303      	adds	r3, #3
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
									{y, x - 3}, {y, x + 3}, {y + 3, x}, {y + 3, x - 3},
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	3303      	adds	r3, #3
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001af6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
									{y, x - 3}, {y, x + 3}, {y + 3, x}, {y + 3, x - 3},
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	3b03      	subs	r3, #3
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001afe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
									{y + 3, x + 3}}};
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3303      	adds	r3, #3
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001b06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
									{y + 3, x + 3}}};
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	3303      	adds	r3, #3
    int possible_positions[3][8][2] = {{{y - 1, x}, {y - 1, x - 1}, {y - 1, x + 1},
 8001b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    int closest_pos[2] = {y, x};
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	623b      	str	r3, [r7, #32]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
    int current_goal[2] = {goal[0], goal[1]};
 8001b1a:	4b62      	ldr	r3, [pc, #392]	; (8001ca4 <NextPosition+0x2e4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	61bb      	str	r3, [r7, #24]
 8001b20:	4b60      	ldr	r3, [pc, #384]	; (8001ca4 <NextPosition+0x2e4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	61fb      	str	r3, [r7, #28]
    if (goal[1] == 1 || goal[1] == -1) {
 8001b26:	4b5f      	ldr	r3, [pc, #380]	; (8001ca4 <NextPosition+0x2e4>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d004      	beq.n	8001b38 <NextPosition+0x178>
 8001b2e:	4b5d      	ldr	r3, [pc, #372]	; (8001ca4 <NextPosition+0x2e4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b36:	d10c      	bne.n	8001b52 <NextPosition+0x192>
    	current_goal[0] = y > 40? 75 : 5;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b28      	cmp	r3, #40	; 0x28
 8001b3c:	dd01      	ble.n	8001b42 <NextPosition+0x182>
 8001b3e:	234b      	movs	r3, #75	; 0x4b
 8001b40:	e000      	b.n	8001b44 <NextPosition+0x184>
 8001b42:	2305      	movs	r3, #5
 8001b44:	61bb      	str	r3, [r7, #24]
    	current_goal[1] = goal[1] * 200;
 8001b46:	4b57      	ldr	r3, [pc, #348]	; (8001ca4 <NextPosition+0x2e4>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	22c8      	movs	r2, #200	; 0xc8
 8001b4c:	fb02 f303 	mul.w	r3, r2, r3
 8001b50:	61fb      	str	r3, [r7, #28]
    }
    double min_dist = (current_goal[0] - closest_pos[0]) * (current_goal[0] - closest_pos[0]) +
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	69b9      	ldr	r1, [r7, #24]
 8001b5a:	6a3a      	ldr	r2, [r7, #32]
 8001b5c:	1a8a      	subs	r2, r1, r2
 8001b5e:	fb03 f202 	mul.w	r2, r3, r2
    			(current_goal[1] - closest_pos[1]) * (current_goal[1] - closest_pos[1]);
 8001b62:	69f9      	ldr	r1, [r7, #28]
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	1acb      	subs	r3, r1, r3
 8001b68:	69f8      	ldr	r0, [r7, #28]
 8001b6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b6c:	1a41      	subs	r1, r0, r1
 8001b6e:	fb01 f303 	mul.w	r3, r1, r3
    double min_dist = (current_goal[0] - closest_pos[0]) * (current_goal[0] - closest_pos[0]) +
 8001b72:	4413      	add	r3, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fcd5 	bl	8000524 <__aeabi_i2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8

    for (int s = 0; s < step; s++) {
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001b88:	e076      	b.n	8001c78 <NextPosition+0x2b8>
        randomSortNextPositions(possible_positions[s], 8);
 8001b8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b92:	019b      	lsls	r3, r3, #6
 8001b94:	4413      	add	r3, r2
 8001b96:	2108      	movs	r1, #8
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fbca 	bl	8001332 <randomSortNextPositions>
    	for (int i = 0; i < 8; i++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001ba4:	e05f      	b.n	8001c66 <NextPosition+0x2a6>
    		int pos[2] = {possible_positions[s][i][0], possible_positions[s][i][1]};
 8001ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001baa:	00da      	lsls	r2, r3, #3
 8001bac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001bb8:	443b      	add	r3, r7
 8001bba:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bc4:	00da      	lsls	r2, r3, #3
 8001bc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001bd2:	443b      	add	r3, r7
 8001bd4:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8001bd8:	617b      	str	r3, [r7, #20]
    		if ( (pos[0] >= 0 && pos[0] < 80) && (pos[1] >= 0 && pos[1] < 60 &&
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db3d      	blt.n	8001c5c <NextPosition+0x29c>
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b4f      	cmp	r3, #79	; 0x4f
 8001be4:	dc3a      	bgt.n	8001c5c <NextPosition+0x29c>
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	db37      	blt.n	8001c5c <NextPosition+0x29c>
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2b3b      	cmp	r3, #59	; 0x3b
 8001bf0:	dc34      	bgt.n	8001c5c <NextPosition+0x29c>
    				matrix[pos[0]][pos[1]] == 0) ) {
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	6979      	ldr	r1, [r7, #20]
 8001bf6:	482c      	ldr	r0, [pc, #176]	; (8001ca8 <NextPosition+0x2e8>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	1a9b      	subs	r3, r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    		if ( (pos[0] >= 0 && pos[0] < 80) && (pos[1] >= 0 && pos[1] < 60 &&
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d128      	bne.n	8001c5c <NextPosition+0x29c>
    			double dist = (current_goal[0] - pos[0]) * (current_goal[0] - pos[0]) +
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	69b9      	ldr	r1, [r7, #24]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	1a8a      	subs	r2, r1, r2
 8001c16:	fb03 f202 	mul.w	r2, r3, r2
    							(current_goal[1] - pos[1]) * (current_goal[1] - pos[1]);
 8001c1a:	69f9      	ldr	r1, [r7, #28]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	1acb      	subs	r3, r1, r3
 8001c20:	69f8      	ldr	r0, [r7, #28]
 8001c22:	6979      	ldr	r1, [r7, #20]
 8001c24:	1a41      	subs	r1, r0, r1
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
    			double dist = (current_goal[0] - pos[0]) * (current_goal[0] - pos[0]) +
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc79 	bl	8000524 <__aeabi_i2d>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

    			if (dist < min_dist) {
 8001c3a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8001c3e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001c42:	f7fe fd39 	bl	80006b8 <__aeabi_dcmplt>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d007      	beq.n	8001c5c <NextPosition+0x29c>
    				min_dist = dist;
 8001c4c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001c50:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    				closest_pos[0] = pos[0];
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	623b      	str	r3, [r7, #32]
    				closest_pos[1] = pos[1];
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
    	for (int i = 0; i < 8; i++) {
 8001c5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001c60:	3301      	adds	r3, #1
 8001c62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001c66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001c6a:	2b07      	cmp	r3, #7
 8001c6c:	dd9b      	ble.n	8001ba6 <NextPosition+0x1e6>
    for (int s = 0; s < step; s++) {
 8001c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c72:	3301      	adds	r3, #1
 8001c74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <NextPosition+0x2ec>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001c80:	429a      	cmp	r2, r3
 8001c82:	db82      	blt.n	8001b8a <NextPosition+0x1ca>
    		}
    	}
    }


    *result_y = closest_pos[0];
 8001c84:	6a3a      	ldr	r2, [r7, #32]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	601a      	str	r2, [r3, #0]
    *result_x = closest_pos[1];
 8001c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	601a      	str	r2, [r3, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20004c84 	.word	0x20004c84
 8001ca8:	20000184 	.word	0x20000184
 8001cac:	20000008 	.word	0x20000008

08001cb0 <RunEpoch>:




void RunEpoch(){
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	; 0x28
 8001cb4:	af02      	add	r7, sp, #8
	int goal_x = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
	int goal_y = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
	SetGoal(&goal_y, &goal_x);
 8001cbe:	f107 0210 	add.w	r2, r7, #16
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fd2d 	bl	8001728 <SetGoal>

	goal[0] = goal_y;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4a39      	ldr	r2, [pc, #228]	; (8001db8 <RunEpoch+0x108>)
 8001cd2:	6013      	str	r3, [r2, #0]
	goal[1] = goal_x;
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4a38      	ldr	r2, [pc, #224]	; (8001db8 <RunEpoch+0x108>)
 8001cd8:	6053      	str	r3, [r2, #4]

	for (int i = 0; i < 550; i ++) {
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	e061      	b.n	8001da4 <RunEpoch+0xf4>
		int y = positionsY[i];
 8001ce0:	4a36      	ldr	r2, [pc, #216]	; (8001dbc <RunEpoch+0x10c>)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce8:	61bb      	str	r3, [r7, #24]
		int x = positionsX[i];
 8001cea:	4a35      	ldr	r2, [pc, #212]	; (8001dc0 <RunEpoch+0x110>)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf2:	617b      	str	r3, [r7, #20]
		int result_y = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
		int result_x = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
		NextPosition(y, x, &result_y, &result_x);
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	f107 0208 	add.w	r2, r7, #8
 8001d02:	6979      	ldr	r1, [r7, #20]
 8001d04:	69b8      	ldr	r0, [r7, #24]
 8001d06:	f7ff fe5b 	bl	80019c0 <NextPosition>

		if ( y != result_y || x != result_x) {
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d103      	bne.n	8001d1a <RunEpoch+0x6a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d041      	beq.n	8001d9e <RunEpoch+0xee>
			ILI9341_FillRectangle(x*4, y*4, 4, 4, ILI9341_WHITE);
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	b298      	uxth	r0, r3
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	b299      	uxth	r1, r3
 8001d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2304      	movs	r3, #4
 8001d32:	2204      	movs	r2, #4
 8001d34:	f7ff fa0a 	bl	800114c <ILI9341_FillRectangle>
			ILI9341_FillRectangle(result_x*4, result_y*4, 4, 4, colors[step-1]);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	b298      	uxth	r0, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	b299      	uxth	r1, r3
 8001d48:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <RunEpoch+0x114>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <RunEpoch+0x118>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2304      	movs	r3, #4
 8001d58:	2204      	movs	r2, #4
 8001d5a:	f7ff f9f7 	bl	800114c <ILI9341_FillRectangle>
			matrix[y][x] = 0;
 8001d5e:	491b      	ldr	r1, [pc, #108]	; (8001dcc <RunEpoch+0x11c>)
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4613      	mov	r3, r2
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	1a9b      	subs	r3, r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			matrix[result_y][result_x] = 1;
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4814      	ldr	r0, [pc, #80]	; (8001dcc <RunEpoch+0x11c>)
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	2201      	movs	r2, #1
 8001d86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

			positionsY[i] = result_y;
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	490b      	ldr	r1, [pc, #44]	; (8001dbc <RunEpoch+0x10c>)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			positionsX[i] = result_x;
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	490a      	ldr	r1, [pc, #40]	; (8001dc0 <RunEpoch+0x110>)
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 550; i ++) {
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f240 2225 	movw	r2, #549	; 0x225
 8001daa:	4293      	cmp	r3, r2
 8001dac:	dd98      	ble.n	8001ce0 <RunEpoch+0x30>
		}
	}

}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20004c84 	.word	0x20004c84
 8001dbc:	20005524 	.word	0x20005524
 8001dc0:	20004c8c 	.word	0x20004c8c
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000184 	.word	0x20000184

08001dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dd4:	f000 fba6 	bl	8002524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dd8:	f000 f81e 	bl	8001e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ddc:	f000 f940 	bl	8002060 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001de0:	f000 f8b0 	bl	8001f44 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001de4:	f000 f880 	bl	8001ee8 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001de8:	f000 f8e4 	bl	8001fb4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  AccelerometerInit();
 8001dec:	f7fe ff14 	bl	8000c18 <AccelerometerInit>
  HAL_Delay(100);
 8001df0:	2064      	movs	r0, #100	; 0x64
 8001df2:	f000 fc09 	bl	8002608 <HAL_Delay>

  ILI9341_Init();
 8001df6:	f7ff f849 	bl	8000e8c <ILI9341_Init>
  start();
 8001dfa:	f7ff fa27 	bl	800124c <start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <main+0x2e>

08001e00 <TIM4_IRQHandler>:
  }
  /* USER CODE END 3 */
}

void TIM4_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  RunEpoch();
 8001e04:	f7ff ff54 	bl	8001cb0 <RunEpoch>

  HAL_TIM_IRQHandler(&htim4);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <TIM4_IRQHandler+0x14>)
 8001e0a:	f001 ffb3 	bl	8003d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000013c 	.word	0x2000013c

08001e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b094      	sub	sp, #80	; 0x50
 8001e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1e:	f107 0320 	add.w	r3, r7, #32
 8001e22:	2230      	movs	r2, #48	; 0x30
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f002 fca7 	bl	800477a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <SystemClock_Config+0xc8>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	4a26      	ldr	r2, [pc, #152]	; (8001ee0 <SystemClock_Config+0xc8>)
 8001e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <SystemClock_Config+0xc8>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <SystemClock_Config+0xcc>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a20      	ldr	r2, [pc, #128]	; (8001ee4 <SystemClock_Config+0xcc>)
 8001e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <SystemClock_Config+0xcc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e74:	2301      	movs	r3, #1
 8001e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e88:	2319      	movs	r3, #25
 8001e8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001e8c:	23c0      	movs	r3, #192	; 0xc0
 8001e8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e90:	2302      	movs	r3, #2
 8001e92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e94:	2304      	movs	r3, #4
 8001e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e98:	f107 0320 	add.w	r3, r7, #32
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 ffcb 	bl	8002e38 <HAL_RCC_OscConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ea8:	f000 f92a 	bl	8002100 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eac:	230f      	movs	r3, #15
 8001eae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ebc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	2103      	movs	r1, #3
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f001 fa2d 	bl	8003328 <HAL_RCC_ClockConfig>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ed4:	f000 f914 	bl	8002100 <Error_Handler>
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3750      	adds	r7, #80	; 0x50
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40007000 	.word	0x40007000

08001ee8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001eee:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <MX_I2C1_Init+0x54>)
 8001ef0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001ef4:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <MX_I2C1_Init+0x58>)
 8001ef6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001f06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001f26:	f000 fe43 	bl	8002bb0 <HAL_I2C_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f30:	f000 f8e6 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000090 	.word	0x20000090
 8001f3c:	40005400 	.word	0x40005400
 8001f40:	000186a0 	.word	0x000186a0

08001f44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <MX_SPI1_Init+0x68>)
 8001f4a:	4a19      	ldr	r2, [pc, #100]	; (8001fb0 <MX_SPI1_Init+0x6c>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <MX_SPI1_Init+0x68>)
 8001f50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <MX_SPI1_Init+0x68>)
 8001f58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f5c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <MX_SPI1_Init+0x68>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <MX_SPI1_Init+0x68>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <MX_SPI1_Init+0x68>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <MX_SPI1_Init+0x68>)
 8001f72:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <MX_SPI1_Init+0x68>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <MX_SPI1_Init+0x68>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <MX_SPI1_Init+0x68>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <MX_SPI1_Init+0x68>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <MX_SPI1_Init+0x68>)
 8001f92:	220a      	movs	r2, #10
 8001f94:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_SPI1_Init+0x68>)
 8001f98:	f001 fb92 	bl	80036c0 <HAL_SPI_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001fa2:	f000 f8ad 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200000e4 	.word	0x200000e4
 8001fb0:	40013000 	.word	0x40013000

08001fb4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fba:	f107 0308 	add.w	r3, r7, #8
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc8:	463b      	mov	r3, r7
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fd0:	4b20      	ldr	r3, [pc, #128]	; (8002054 <MX_TIM4_Init+0xa0>)
 8001fd2:	4a21      	ldr	r2, [pc, #132]	; (8002058 <MX_TIM4_Init+0xa4>)
 8001fd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9600-1;
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <MX_TIM4_Init+0xa0>)
 8001fd8:	f242 527f 	movw	r2, #9599	; 0x257f
 8001fdc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fde:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <MX_TIM4_Init+0xa0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = step !=2 ? 100-1: 650-1;
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <MX_TIM4_Init+0xa8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM4_Init+0x3c>
 8001fec:	2363      	movs	r3, #99	; 0x63
 8001fee:	e001      	b.n	8001ff4 <MX_TIM4_Init+0x40>
 8001ff0:	f240 2389 	movw	r3, #649	; 0x289
 8001ff4:	4a17      	ldr	r2, [pc, #92]	; (8002054 <MX_TIM4_Init+0xa0>)
 8001ff6:	60d3      	str	r3, [r2, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <MX_TIM4_Init+0xa0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <MX_TIM4_Init+0xa0>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002004:	4813      	ldr	r0, [pc, #76]	; (8002054 <MX_TIM4_Init+0xa0>)
 8002006:	f001 fe03 	bl	8003c10 <HAL_TIM_Base_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002010:	f000 f876 	bl	8002100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002018:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	4619      	mov	r1, r3
 8002020:	480c      	ldr	r0, [pc, #48]	; (8002054 <MX_TIM4_Init+0xa0>)
 8002022:	f001 ff97 	bl	8003f54 <HAL_TIM_ConfigClockSource>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800202c:	f000 f868 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002038:	463b      	mov	r3, r7
 800203a:	4619      	mov	r1, r3
 800203c:	4805      	ldr	r0, [pc, #20]	; (8002054 <MX_TIM4_Init+0xa0>)
 800203e:	f002 f9a9 	bl	8004394 <HAL_TIMEx_MasterConfigSynchronization>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002048:	f000 f85a 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	2000013c 	.word	0x2000013c
 8002058:	40000800 	.word	0x40000800
 800205c:	20000008 	.word	0x20000008

08002060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
 8002074:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <MX_GPIO_Init+0x98>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a1e      	ldr	r2, [pc, #120]	; (80020f8 <MX_GPIO_Init+0x98>)
 8002080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <MX_GPIO_Init+0x98>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <MX_GPIO_Init+0x98>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <MX_GPIO_Init+0x98>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <MX_GPIO_Init+0x98>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <MX_GPIO_Init+0x98>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <MX_GPIO_Init+0x98>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <MX_GPIO_Init+0x98>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_RESET_Pin|DISP_DC_Pin, GPIO_PIN_RESET);
 80020ca:	2200      	movs	r2, #0
 80020cc:	210c      	movs	r1, #12
 80020ce:	480b      	ldr	r0, [pc, #44]	; (80020fc <MX_GPIO_Init+0x9c>)
 80020d0:	f000 fd54 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISP_RESET_Pin DISP_DC_Pin */
  GPIO_InitStruct.Pin = DISP_RESET_Pin|DISP_DC_Pin;
 80020d4:	230c      	movs	r3, #12
 80020d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d8:	2301      	movs	r3, #1
 80020da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	4619      	mov	r1, r3
 80020ea:	4804      	ldr	r0, [pc, #16]	; (80020fc <MX_GPIO_Init+0x9c>)
 80020ec:	f000 fbc2 	bl	8002874 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020f0:	bf00      	nop
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020000 	.word	0x40020000

08002100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002104:	b672      	cpsid	i
}
 8002106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002108:	e7fe      	b.n	8002108 <Error_Handler+0x8>
	...

0800210c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_MspInit+0x4c>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <HAL_MspInit+0x4c>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_MspInit+0x4c>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_MspInit+0x4c>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_MspInit+0x4c>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_MspInit+0x4c>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800

0800215c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a19      	ldr	r2, [pc, #100]	; (80021e0 <HAL_I2C_MspInit+0x84>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d12b      	bne.n	80021d6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <HAL_I2C_MspInit+0x88>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a17      	ldr	r2, [pc, #92]	; (80021e4 <HAL_I2C_MspInit+0x88>)
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <HAL_I2C_MspInit+0x88>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800219a:	23c0      	movs	r3, #192	; 0xc0
 800219c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800219e:	2312      	movs	r3, #18
 80021a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021aa:	2304      	movs	r3, #4
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4619      	mov	r1, r3
 80021b4:	480c      	ldr	r0, [pc, #48]	; (80021e8 <HAL_I2C_MspInit+0x8c>)
 80021b6:	f000 fb5d 	bl	8002874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_I2C_MspInit+0x88>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <HAL_I2C_MspInit+0x88>)
 80021c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_I2C_MspInit+0x88>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021d6:	bf00      	nop
 80021d8:	3728      	adds	r7, #40	; 0x28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40005400 	.word	0x40005400
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020400 	.word	0x40020400

080021ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a19      	ldr	r2, [pc, #100]	; (8002270 <HAL_SPI_MspInit+0x84>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d12b      	bne.n	8002266 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <HAL_SPI_MspInit+0x88>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	4a17      	ldr	r2, [pc, #92]	; (8002274 <HAL_SPI_MspInit+0x88>)
 8002218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800221c:	6453      	str	r3, [r2, #68]	; 0x44
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <HAL_SPI_MspInit+0x88>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_SPI_MspInit+0x88>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a10      	ldr	r2, [pc, #64]	; (8002274 <HAL_SPI_MspInit+0x88>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <HAL_SPI_MspInit+0x88>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DISP_CS_Pin|DISP_SCK_Pin|DISP_MOSI_Pin;
 8002246:	23b0      	movs	r3, #176	; 0xb0
 8002248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002252:	2303      	movs	r3, #3
 8002254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002256:	2305      	movs	r3, #5
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4619      	mov	r1, r3
 8002260:	4805      	ldr	r0, [pc, #20]	; (8002278 <HAL_SPI_MspInit+0x8c>)
 8002262:	f000 fb07 	bl	8002874 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	3728      	adds	r7, #40	; 0x28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40013000 	.word	0x40013000
 8002274:	40023800 	.word	0x40023800
 8002278:	40020000 	.word	0x40020000

0800227c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <HAL_TIM_Base_MspInit+0x48>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d115      	bne.n	80022ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_TIM_Base_MspInit+0x4c>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <HAL_TIM_Base_MspInit+0x4c>)
 8002298:	f043 0304 	orr.w	r3, r3, #4
 800229c:	6413      	str	r3, [r2, #64]	; 0x40
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_TIM_Base_MspInit+0x4c>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	201e      	movs	r0, #30
 80022b0:	f000 faa9 	bl	8002806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80022b4:	201e      	movs	r0, #30
 80022b6:	f000 fac2 	bl	800283e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40000800 	.word	0x40000800
 80022c8:	40023800 	.word	0x40023800

080022cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022d0:	e7fe      	b.n	80022d0 <NMI_Handler+0x4>

080022d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <HardFault_Handler+0x4>

080022d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <MemManage_Handler+0x4>

080022de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <BusFault_Handler+0x4>

080022e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <UsageFault_Handler+0x4>

080022ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002318:	f000 f956 	bl	80025c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}

08002320 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return 1;
 8002324:	2301      	movs	r3, #1
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <_kill>:

int _kill(int pid, int sig)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800233a:	f002 fa99 	bl	8004870 <__errno>
 800233e:	4603      	mov	r3, r0
 8002340:	2216      	movs	r2, #22
 8002342:	601a      	str	r2, [r3, #0]
  return -1;
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <_exit>:

void _exit (int status)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002358:	f04f 31ff 	mov.w	r1, #4294967295
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ffe7 	bl	8002330 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002362:	e7fe      	b.n	8002362 <_exit+0x12>

08002364 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	e00a      	b.n	800238c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002376:	f3af 8000 	nop.w
 800237a:	4601      	mov	r1, r0
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	60ba      	str	r2, [r7, #8]
 8002382:	b2ca      	uxtb	r2, r1
 8002384:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	dbf0      	blt.n	8002376 <_read+0x12>
  }

  return len;
 8002394:	687b      	ldr	r3, [r7, #4]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	e009      	b.n	80023c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	60ba      	str	r2, [r7, #8]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	3301      	adds	r3, #1
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	dbf1      	blt.n	80023b0 <_write+0x12>
  }
  return len;
 80023cc:	687b      	ldr	r3, [r7, #4]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <_close>:

int _close(int file)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023fe:	605a      	str	r2, [r3, #4]
  return 0;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <_isatty>:

int _isatty(int file)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002416:	2301      	movs	r3, #1
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002448:	4a14      	ldr	r2, [pc, #80]	; (800249c <_sbrk+0x5c>)
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <_sbrk+0x60>)
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002454:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <_sbrk+0x64>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d102      	bne.n	8002462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <_sbrk+0x64>)
 800245e:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <_sbrk+0x68>)
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	429a      	cmp	r2, r3
 800246e:	d207      	bcs.n	8002480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002470:	f002 f9fe 	bl	8004870 <__errno>
 8002474:	4603      	mov	r3, r0
 8002476:	220c      	movs	r2, #12
 8002478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800247a:	f04f 33ff 	mov.w	r3, #4294967295
 800247e:	e009      	b.n	8002494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <_sbrk+0x64>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <_sbrk+0x64>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <_sbrk+0x64>)
 8002490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002492:	68fb      	ldr	r3, [r7, #12]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20020000 	.word	0x20020000
 80024a0:	00000400 	.word	0x00000400
 80024a4:	20005dc4 	.word	0x20005dc4
 80024a8:	20005f18 	.word	0x20005f18

080024ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <SystemInit+0x20>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	4a05      	ldr	r2, [pc, #20]	; (80024cc <SystemInit+0x20>)
 80024b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002508 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024d4:	f7ff ffea 	bl	80024ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024d8:	480c      	ldr	r0, [pc, #48]	; (800250c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024da:	490d      	ldr	r1, [pc, #52]	; (8002510 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024dc:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e0:	e002      	b.n	80024e8 <LoopCopyDataInit>

080024e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e6:	3304      	adds	r3, #4

080024e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ec:	d3f9      	bcc.n	80024e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024f0:	4c0a      	ldr	r4, [pc, #40]	; (800251c <LoopFillZerobss+0x22>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f4:	e001      	b.n	80024fa <LoopFillZerobss>

080024f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f8:	3204      	adds	r2, #4

080024fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024fc:	d3fb      	bcc.n	80024f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024fe:	f002 f9bd 	bl	800487c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002502:	f7ff fc65 	bl	8001dd0 <main>
  bx  lr    
 8002506:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800250c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002510:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002514:	0800567c 	.word	0x0800567c
  ldr r2, =_sbss
 8002518:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800251c:	20005f18 	.word	0x20005f18

08002520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002520:	e7fe      	b.n	8002520 <ADC_IRQHandler>
	...

08002524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <HAL_Init+0x40>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0d      	ldr	r2, [pc, #52]	; (8002564 <HAL_Init+0x40>)
 800252e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_Init+0x40>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <HAL_Init+0x40>)
 800253a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800253e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <HAL_Init+0x40>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a07      	ldr	r2, [pc, #28]	; (8002564 <HAL_Init+0x40>)
 8002546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800254c:	2003      	movs	r0, #3
 800254e:	f000 f94f 	bl	80027f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002552:	200f      	movs	r0, #15
 8002554:	f000 f808 	bl	8002568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002558:	f7ff fdd8 	bl	800210c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40023c00 	.word	0x40023c00

08002568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_InitTick+0x54>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_InitTick+0x58>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4619      	mov	r1, r3
 800257a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002582:	fbb2 f3f3 	udiv	r3, r2, r3
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f967 	bl	800285a <HAL_SYSTICK_Config>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e00e      	b.n	80025b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b0f      	cmp	r3, #15
 800259a:	d80a      	bhi.n	80025b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800259c:	2200      	movs	r2, #0
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
 80025a4:	f000 f92f 	bl	8002806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a8:	4a06      	ldr	r2, [pc, #24]	; (80025c4 <HAL_InitTick+0x5c>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e000      	b.n	80025b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	2000000c 	.word	0x2000000c
 80025c0:	20000014 	.word	0x20000014
 80025c4:	20000010 	.word	0x20000010

080025c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_IncTick+0x20>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_IncTick+0x24>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_IncTick+0x24>)
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000014 	.word	0x20000014
 80025ec:	20005dc8 	.word	0x20005dc8

080025f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return uwTick;
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_GetTick+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20005dc8 	.word	0x20005dc8

08002608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002610:	f7ff ffee 	bl	80025f0 <HAL_GetTick>
 8002614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d005      	beq.n	800262e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_Delay+0x44>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4413      	add	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800262e:	bf00      	nop
 8002630:	f7ff ffde 	bl	80025f0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	429a      	cmp	r2, r3
 800263e:	d8f7      	bhi.n	8002630 <HAL_Delay+0x28>
  {
  }
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000014 	.word	0x20000014

08002650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800266c:	4013      	ands	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002682:	4a04      	ldr	r2, [pc, #16]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	60d3      	str	r3, [r2, #12]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <__NVIC_GetPriorityGrouping+0x18>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	f003 0307 	and.w	r3, r3, #7
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	db0b      	blt.n	80026de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	4907      	ldr	r1, [pc, #28]	; (80026ec <__NVIC_EnableIRQ+0x38>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2001      	movs	r0, #1
 80026d6:	fa00 f202 	lsl.w	r2, r0, r2
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000e100 	.word	0xe000e100

080026f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	6039      	str	r1, [r7, #0]
 80026fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002700:	2b00      	cmp	r3, #0
 8002702:	db0a      	blt.n	800271a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	b2da      	uxtb	r2, r3
 8002708:	490c      	ldr	r1, [pc, #48]	; (800273c <__NVIC_SetPriority+0x4c>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	0112      	lsls	r2, r2, #4
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	440b      	add	r3, r1
 8002714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002718:	e00a      	b.n	8002730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4908      	ldr	r1, [pc, #32]	; (8002740 <__NVIC_SetPriority+0x50>)
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	3b04      	subs	r3, #4
 8002728:	0112      	lsls	r2, r2, #4
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	440b      	add	r3, r1
 800272e:	761a      	strb	r2, [r3, #24]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000e100 	.word	0xe000e100
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f1c3 0307 	rsb	r3, r3, #7
 800275e:	2b04      	cmp	r3, #4
 8002760:	bf28      	it	cs
 8002762:	2304      	movcs	r3, #4
 8002764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3304      	adds	r3, #4
 800276a:	2b06      	cmp	r3, #6
 800276c:	d902      	bls.n	8002774 <NVIC_EncodePriority+0x30>
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3b03      	subs	r3, #3
 8002772:	e000      	b.n	8002776 <NVIC_EncodePriority+0x32>
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002778:	f04f 32ff 	mov.w	r2, #4294967295
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	401a      	ands	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800278c:	f04f 31ff 	mov.w	r1, #4294967295
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	43d9      	mvns	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	4313      	orrs	r3, r2
         );
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3724      	adds	r7, #36	; 0x24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027bc:	d301      	bcc.n	80027c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027be:	2301      	movs	r3, #1
 80027c0:	e00f      	b.n	80027e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <SysTick_Config+0x40>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ca:	210f      	movs	r1, #15
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	f7ff ff8e 	bl	80026f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <SysTick_Config+0x40>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027da:	4b04      	ldr	r3, [pc, #16]	; (80027ec <SysTick_Config+0x40>)
 80027dc:	2207      	movs	r2, #7
 80027de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	e000e010 	.word	0xe000e010

080027f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ff29 	bl	8002650 <__NVIC_SetPriorityGrouping>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002818:	f7ff ff3e 	bl	8002698 <__NVIC_GetPriorityGrouping>
 800281c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	6978      	ldr	r0, [r7, #20]
 8002824:	f7ff ff8e 	bl	8002744 <NVIC_EncodePriority>
 8002828:	4602      	mov	r2, r0
 800282a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff5d 	bl	80026f0 <__NVIC_SetPriority>
}
 8002836:	bf00      	nop
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff31 	bl	80026b4 <__NVIC_EnableIRQ>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ffa2 	bl	80027ac <SysTick_Config>
 8002868:	4603      	mov	r3, r0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002874:	b480      	push	{r7}
 8002876:	b089      	sub	sp, #36	; 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	e159      	b.n	8002b44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002890:	2201      	movs	r2, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	f040 8148 	bne.w	8002b3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d005      	beq.n	80028c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d130      	bne.n	8002928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	2203      	movs	r2, #3
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028fc:	2201      	movs	r2, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 0201 	and.w	r2, r3, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b03      	cmp	r3, #3
 8002932:	d017      	beq.n	8002964 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d123      	bne.n	80029b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	08da      	lsrs	r2, r3, #3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3208      	adds	r2, #8
 8002978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	220f      	movs	r2, #15
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	08da      	lsrs	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3208      	adds	r2, #8
 80029b2:	69b9      	ldr	r1, [r7, #24]
 80029b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0203 	and.w	r2, r3, #3
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a2 	beq.w	8002b3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b57      	ldr	r3, [pc, #348]	; (8002b5c <HAL_GPIO_Init+0x2e8>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	4a56      	ldr	r2, [pc, #344]	; (8002b5c <HAL_GPIO_Init+0x2e8>)
 8002a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a08:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0a:	4b54      	ldr	r3, [pc, #336]	; (8002b5c <HAL_GPIO_Init+0x2e8>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a16:	4a52      	ldr	r2, [pc, #328]	; (8002b60 <HAL_GPIO_Init+0x2ec>)
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	220f      	movs	r2, #15
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a49      	ldr	r2, [pc, #292]	; (8002b64 <HAL_GPIO_Init+0x2f0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d019      	beq.n	8002a76 <HAL_GPIO_Init+0x202>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a48      	ldr	r2, [pc, #288]	; (8002b68 <HAL_GPIO_Init+0x2f4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <HAL_GPIO_Init+0x1fe>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a47      	ldr	r2, [pc, #284]	; (8002b6c <HAL_GPIO_Init+0x2f8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00d      	beq.n	8002a6e <HAL_GPIO_Init+0x1fa>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a46      	ldr	r2, [pc, #280]	; (8002b70 <HAL_GPIO_Init+0x2fc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d007      	beq.n	8002a6a <HAL_GPIO_Init+0x1f6>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a45      	ldr	r2, [pc, #276]	; (8002b74 <HAL_GPIO_Init+0x300>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d101      	bne.n	8002a66 <HAL_GPIO_Init+0x1f2>
 8002a62:	2304      	movs	r3, #4
 8002a64:	e008      	b.n	8002a78 <HAL_GPIO_Init+0x204>
 8002a66:	2307      	movs	r3, #7
 8002a68:	e006      	b.n	8002a78 <HAL_GPIO_Init+0x204>
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e004      	b.n	8002a78 <HAL_GPIO_Init+0x204>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e002      	b.n	8002a78 <HAL_GPIO_Init+0x204>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_GPIO_Init+0x204>
 8002a76:	2300      	movs	r3, #0
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	f002 0203 	and.w	r2, r2, #3
 8002a7e:	0092      	lsls	r2, r2, #2
 8002a80:	4093      	lsls	r3, r2
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a88:	4935      	ldr	r1, [pc, #212]	; (8002b60 <HAL_GPIO_Init+0x2ec>)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	3302      	adds	r3, #2
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a96:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aba:	4a2f      	ldr	r2, [pc, #188]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ae4:	4a24      	ldr	r2, [pc, #144]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aea:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b0e:	4a1a      	ldr	r2, [pc, #104]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b38:	4a0f      	ldr	r2, [pc, #60]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3301      	adds	r3, #1
 8002b42:	61fb      	str	r3, [r7, #28]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	2b0f      	cmp	r3, #15
 8002b48:	f67f aea2 	bls.w	8002890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	3724      	adds	r7, #36	; 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40013800 	.word	0x40013800
 8002b64:	40020000 	.word	0x40020000
 8002b68:	40020400 	.word	0x40020400
 8002b6c:	40020800 	.word	0x40020800
 8002b70:	40020c00 	.word	0x40020c00
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40013c00 	.word	0x40013c00

08002b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b8c:	787b      	ldrb	r3, [r7, #1]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b98:	e003      	b.n	8002ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b9a:	887b      	ldrh	r3, [r7, #2]
 8002b9c:	041a      	lsls	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	619a      	str	r2, [r3, #24]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e12b      	b.n	8002e1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff fac0 	bl	800215c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2224      	movs	r2, #36	; 0x24
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c14:	f000 fd40 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8002c18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4a81      	ldr	r2, [pc, #516]	; (8002e24 <HAL_I2C_Init+0x274>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d807      	bhi.n	8002c34 <HAL_I2C_Init+0x84>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a80      	ldr	r2, [pc, #512]	; (8002e28 <HAL_I2C_Init+0x278>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	bf94      	ite	ls
 8002c2c:	2301      	movls	r3, #1
 8002c2e:	2300      	movhi	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e006      	b.n	8002c42 <HAL_I2C_Init+0x92>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a7d      	ldr	r2, [pc, #500]	; (8002e2c <HAL_I2C_Init+0x27c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	bf94      	ite	ls
 8002c3c:	2301      	movls	r3, #1
 8002c3e:	2300      	movhi	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0e7      	b.n	8002e1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4a78      	ldr	r2, [pc, #480]	; (8002e30 <HAL_I2C_Init+0x280>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	0c9b      	lsrs	r3, r3, #18
 8002c54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4a6a      	ldr	r2, [pc, #424]	; (8002e24 <HAL_I2C_Init+0x274>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d802      	bhi.n	8002c84 <HAL_I2C_Init+0xd4>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	3301      	adds	r3, #1
 8002c82:	e009      	b.n	8002c98 <HAL_I2C_Init+0xe8>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	4a69      	ldr	r2, [pc, #420]	; (8002e34 <HAL_I2C_Init+0x284>)
 8002c90:	fba2 2303 	umull	r2, r3, r2, r3
 8002c94:	099b      	lsrs	r3, r3, #6
 8002c96:	3301      	adds	r3, #1
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002caa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	495c      	ldr	r1, [pc, #368]	; (8002e24 <HAL_I2C_Init+0x274>)
 8002cb4:	428b      	cmp	r3, r1
 8002cb6:	d819      	bhi.n	8002cec <HAL_I2C_Init+0x13c>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	1e59      	subs	r1, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc6:	1c59      	adds	r1, r3, #1
 8002cc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ccc:	400b      	ands	r3, r1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_I2C_Init+0x138>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1e59      	subs	r1, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce6:	e051      	b.n	8002d8c <HAL_I2C_Init+0x1dc>
 8002ce8:	2304      	movs	r3, #4
 8002cea:	e04f      	b.n	8002d8c <HAL_I2C_Init+0x1dc>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d111      	bne.n	8002d18 <HAL_I2C_Init+0x168>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1e58      	subs	r0, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	440b      	add	r3, r1
 8002d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d06:	3301      	adds	r3, #1
 8002d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	e012      	b.n	8002d3e <HAL_I2C_Init+0x18e>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1e58      	subs	r0, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	0099      	lsls	r1, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bf0c      	ite	eq
 8002d38:	2301      	moveq	r3, #1
 8002d3a:	2300      	movne	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_Init+0x196>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e022      	b.n	8002d8c <HAL_I2C_Init+0x1dc>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10e      	bne.n	8002d6c <HAL_I2C_Init+0x1bc>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1e58      	subs	r0, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6859      	ldr	r1, [r3, #4]
 8002d56:	460b      	mov	r3, r1
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	440b      	add	r3, r1
 8002d5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d60:	3301      	adds	r3, #1
 8002d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d6a:	e00f      	b.n	8002d8c <HAL_I2C_Init+0x1dc>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1e58      	subs	r0, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6859      	ldr	r1, [r3, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	0099      	lsls	r1, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d82:	3301      	adds	r3, #1
 8002d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	6809      	ldr	r1, [r1, #0]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6911      	ldr	r1, [r2, #16]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68d2      	ldr	r2, [r2, #12]
 8002dc6:	4311      	orrs	r1, r2
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	000186a0 	.word	0x000186a0
 8002e28:	001e847f 	.word	0x001e847f
 8002e2c:	003d08ff 	.word	0x003d08ff
 8002e30:	431bde83 	.word	0x431bde83
 8002e34:	10624dd3 	.word	0x10624dd3

08002e38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e267      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d075      	beq.n	8002f42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e56:	4b88      	ldr	r3, [pc, #544]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d00c      	beq.n	8002e7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e62:	4b85      	ldr	r3, [pc, #532]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d112      	bne.n	8002e94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6e:	4b82      	ldr	r3, [pc, #520]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e7a:	d10b      	bne.n	8002e94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	4b7e      	ldr	r3, [pc, #504]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d05b      	beq.n	8002f40 <HAL_RCC_OscConfig+0x108>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d157      	bne.n	8002f40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e242      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9c:	d106      	bne.n	8002eac <HAL_RCC_OscConfig+0x74>
 8002e9e:	4b76      	ldr	r3, [pc, #472]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a75      	ldr	r2, [pc, #468]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	e01d      	b.n	8002ee8 <HAL_RCC_OscConfig+0xb0>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x98>
 8002eb6:	4b70      	ldr	r3, [pc, #448]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a6f      	ldr	r2, [pc, #444]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	4b6d      	ldr	r3, [pc, #436]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a6c      	ldr	r2, [pc, #432]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e00b      	b.n	8002ee8 <HAL_RCC_OscConfig+0xb0>
 8002ed0:	4b69      	ldr	r3, [pc, #420]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a68      	ldr	r2, [pc, #416]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	4b66      	ldr	r3, [pc, #408]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a65      	ldr	r2, [pc, #404]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d013      	beq.n	8002f18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7ff fb7e 	bl	80025f0 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef8:	f7ff fb7a 	bl	80025f0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	; 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e207      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	4b5b      	ldr	r3, [pc, #364]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0xc0>
 8002f16:	e014      	b.n	8002f42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7ff fb6a 	bl	80025f0 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f20:	f7ff fb66 	bl	80025f0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e1f3      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f32:	4b51      	ldr	r3, [pc, #324]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0xe8>
 8002f3e:	e000      	b.n	8002f42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d063      	beq.n	8003016 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f4e:	4b4a      	ldr	r3, [pc, #296]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00b      	beq.n	8002f72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f5a:	4b47      	ldr	r3, [pc, #284]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d11c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f66:	4b44      	ldr	r3, [pc, #272]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d116      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f72:	4b41      	ldr	r3, [pc, #260]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <HAL_RCC_OscConfig+0x152>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d001      	beq.n	8002f8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e1c7      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4937      	ldr	r1, [pc, #220]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9e:	e03a      	b.n	8003016 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d020      	beq.n	8002fea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa8:	4b34      	ldr	r3, [pc, #208]	; (800307c <HAL_RCC_OscConfig+0x244>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fae:	f7ff fb1f 	bl	80025f0 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb6:	f7ff fb1b 	bl	80025f0 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e1a8      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd4:	4b28      	ldr	r3, [pc, #160]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4925      	ldr	r1, [pc, #148]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	600b      	str	r3, [r1, #0]
 8002fe8:	e015      	b.n	8003016 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fea:	4b24      	ldr	r3, [pc, #144]	; (800307c <HAL_RCC_OscConfig+0x244>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7ff fafe 	bl	80025f0 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff8:	f7ff fafa 	bl	80025f0 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e187      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300a:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d036      	beq.n	8003090 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d016      	beq.n	8003058 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <HAL_RCC_OscConfig+0x248>)
 800302c:	2201      	movs	r2, #1
 800302e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003030:	f7ff fade 	bl	80025f0 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003038:	f7ff fada 	bl	80025f0 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e167      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304a:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_OscConfig+0x240>)
 800304c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x200>
 8003056:	e01b      	b.n	8003090 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003058:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_RCC_OscConfig+0x248>)
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305e:	f7ff fac7 	bl	80025f0 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003064:	e00e      	b.n	8003084 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003066:	f7ff fac3 	bl	80025f0 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d907      	bls.n	8003084 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e150      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
 8003078:	40023800 	.word	0x40023800
 800307c:	42470000 	.word	0x42470000
 8003080:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003084:	4b88      	ldr	r3, [pc, #544]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1ea      	bne.n	8003066 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8097 	beq.w	80031cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309e:	2300      	movs	r3, #0
 80030a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a2:	4b81      	ldr	r3, [pc, #516]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10f      	bne.n	80030ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	4b7d      	ldr	r3, [pc, #500]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	4a7c      	ldr	r2, [pc, #496]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 80030b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030bc:	6413      	str	r3, [r2, #64]	; 0x40
 80030be:	4b7a      	ldr	r3, [pc, #488]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ca:	2301      	movs	r3, #1
 80030cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ce:	4b77      	ldr	r3, [pc, #476]	; (80032ac <HAL_RCC_OscConfig+0x474>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d118      	bne.n	800310c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030da:	4b74      	ldr	r3, [pc, #464]	; (80032ac <HAL_RCC_OscConfig+0x474>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a73      	ldr	r2, [pc, #460]	; (80032ac <HAL_RCC_OscConfig+0x474>)
 80030e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e6:	f7ff fa83 	bl	80025f0 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ee:	f7ff fa7f 	bl	80025f0 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e10c      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	4b6a      	ldr	r3, [pc, #424]	; (80032ac <HAL_RCC_OscConfig+0x474>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d106      	bne.n	8003122 <HAL_RCC_OscConfig+0x2ea>
 8003114:	4b64      	ldr	r3, [pc, #400]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	4a63      	ldr	r2, [pc, #396]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	6713      	str	r3, [r2, #112]	; 0x70
 8003120:	e01c      	b.n	800315c <HAL_RCC_OscConfig+0x324>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b05      	cmp	r3, #5
 8003128:	d10c      	bne.n	8003144 <HAL_RCC_OscConfig+0x30c>
 800312a:	4b5f      	ldr	r3, [pc, #380]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	4a5e      	ldr	r2, [pc, #376]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003130:	f043 0304 	orr.w	r3, r3, #4
 8003134:	6713      	str	r3, [r2, #112]	; 0x70
 8003136:	4b5c      	ldr	r3, [pc, #368]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313a:	4a5b      	ldr	r2, [pc, #364]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6713      	str	r3, [r2, #112]	; 0x70
 8003142:	e00b      	b.n	800315c <HAL_RCC_OscConfig+0x324>
 8003144:	4b58      	ldr	r3, [pc, #352]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	4a57      	ldr	r2, [pc, #348]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 800314a:	f023 0301 	bic.w	r3, r3, #1
 800314e:	6713      	str	r3, [r2, #112]	; 0x70
 8003150:	4b55      	ldr	r3, [pc, #340]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	4a54      	ldr	r2, [pc, #336]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003156:	f023 0304 	bic.w	r3, r3, #4
 800315a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d015      	beq.n	8003190 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003164:	f7ff fa44 	bl	80025f0 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316a:	e00a      	b.n	8003182 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800316c:	f7ff fa40 	bl	80025f0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e0cb      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003182:	4b49      	ldr	r3, [pc, #292]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0ee      	beq.n	800316c <HAL_RCC_OscConfig+0x334>
 800318e:	e014      	b.n	80031ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003190:	f7ff fa2e 	bl	80025f0 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003196:	e00a      	b.n	80031ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003198:	f7ff fa2a 	bl	80025f0 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e0b5      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ae:	4b3e      	ldr	r3, [pc, #248]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1ee      	bne.n	8003198 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d105      	bne.n	80031cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c0:	4b39      	ldr	r3, [pc, #228]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	4a38      	ldr	r2, [pc, #224]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 80031c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80a1 	beq.w	8003318 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031d6:	4b34      	ldr	r3, [pc, #208]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d05c      	beq.n	800329c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d141      	bne.n	800326e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ea:	4b31      	ldr	r3, [pc, #196]	; (80032b0 <HAL_RCC_OscConfig+0x478>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7ff f9fe 	bl	80025f0 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f8:	f7ff f9fa 	bl	80025f0 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e087      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320a:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69da      	ldr	r2, [r3, #28]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	019b      	lsls	r3, r3, #6
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	085b      	lsrs	r3, r3, #1
 800322e:	3b01      	subs	r3, #1
 8003230:	041b      	lsls	r3, r3, #16
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	061b      	lsls	r3, r3, #24
 800323a:	491b      	ldr	r1, [pc, #108]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <HAL_RCC_OscConfig+0x478>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003246:	f7ff f9d3 	bl	80025f0 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800324e:	f7ff f9cf 	bl	80025f0 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e05c      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003260:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x416>
 800326c:	e054      	b.n	8003318 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <HAL_RCC_OscConfig+0x478>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7ff f9bc 	bl	80025f0 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327c:	f7ff f9b8 	bl	80025f0 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e045      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x444>
 800329a:	e03d      	b.n	8003318 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e038      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40007000 	.word	0x40007000
 80032b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032b4:	4b1b      	ldr	r3, [pc, #108]	; (8003324 <HAL_RCC_OscConfig+0x4ec>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d028      	beq.n	8003314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d121      	bne.n	8003314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032da:	429a      	cmp	r2, r3
 80032dc:	d11a      	bne.n	8003314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032e4:	4013      	ands	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d111      	bne.n	8003314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	085b      	lsrs	r3, r3, #1
 80032fc:	3b01      	subs	r3, #1
 80032fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d107      	bne.n	8003314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800

08003328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0cc      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800333c:	4b68      	ldr	r3, [pc, #416]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d90c      	bls.n	8003364 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b65      	ldr	r3, [pc, #404]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b63      	ldr	r3, [pc, #396]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0b8      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d020      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800337c:	4b59      	ldr	r3, [pc, #356]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a58      	ldr	r2, [pc, #352]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003386:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003394:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a52      	ldr	r2, [pc, #328]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800339e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a0:	4b50      	ldr	r3, [pc, #320]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	494d      	ldr	r1, [pc, #308]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d044      	beq.n	8003448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d107      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d119      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e07f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e6:	4b3f      	ldr	r3, [pc, #252]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e06f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f6:	4b3b      	ldr	r3, [pc, #236]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e067      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003406:	4b37      	ldr	r3, [pc, #220]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f023 0203 	bic.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4934      	ldr	r1, [pc, #208]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	4313      	orrs	r3, r2
 8003416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003418:	f7ff f8ea 	bl	80025f0 <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	e00a      	b.n	8003436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003420:	f7ff f8e6 	bl	80025f0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e04f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	4b2b      	ldr	r3, [pc, #172]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 020c 	and.w	r2, r3, #12
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	429a      	cmp	r2, r3
 8003446:	d1eb      	bne.n	8003420 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d20c      	bcs.n	8003470 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e032      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4916      	ldr	r1, [pc, #88]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	490e      	ldr	r1, [pc, #56]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ae:	f000 f821 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80034b2:	4602      	mov	r2, r0
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	490a      	ldr	r1, [pc, #40]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 80034c0:	5ccb      	ldrb	r3, [r1, r3]
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	4a09      	ldr	r2, [pc, #36]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff f84a 	bl	8002568 <HAL_InitTick>

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023c00 	.word	0x40023c00
 80034e4:	40023800 	.word	0x40023800
 80034e8:	08005574 	.word	0x08005574
 80034ec:	2000000c 	.word	0x2000000c
 80034f0:	20000010 	.word	0x20000010

080034f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f8:	b090      	sub	sp, #64	; 0x40
 80034fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003500:	2300      	movs	r3, #0
 8003502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003504:	2300      	movs	r3, #0
 8003506:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800350c:	4b59      	ldr	r3, [pc, #356]	; (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	2b08      	cmp	r3, #8
 8003516:	d00d      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x40>
 8003518:	2b08      	cmp	r3, #8
 800351a:	f200 80a1 	bhi.w	8003660 <HAL_RCC_GetSysClockFreq+0x16c>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0x34>
 8003522:	2b04      	cmp	r3, #4
 8003524:	d003      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x3a>
 8003526:	e09b      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b53      	ldr	r3, [pc, #332]	; (8003678 <HAL_RCC_GetSysClockFreq+0x184>)
 800352a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800352c:	e09b      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800352e:	4b53      	ldr	r3, [pc, #332]	; (800367c <HAL_RCC_GetSysClockFreq+0x188>)
 8003530:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003532:	e098      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003534:	4b4f      	ldr	r3, [pc, #316]	; (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800353e:	4b4d      	ldr	r3, [pc, #308]	; (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d028      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354a:	4b4a      	ldr	r3, [pc, #296]	; (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	099b      	lsrs	r3, r3, #6
 8003550:	2200      	movs	r2, #0
 8003552:	623b      	str	r3, [r7, #32]
 8003554:	627a      	str	r2, [r7, #36]	; 0x24
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800355c:	2100      	movs	r1, #0
 800355e:	4b47      	ldr	r3, [pc, #284]	; (800367c <HAL_RCC_GetSysClockFreq+0x188>)
 8003560:	fb03 f201 	mul.w	r2, r3, r1
 8003564:	2300      	movs	r3, #0
 8003566:	fb00 f303 	mul.w	r3, r0, r3
 800356a:	4413      	add	r3, r2
 800356c:	4a43      	ldr	r2, [pc, #268]	; (800367c <HAL_RCC_GetSysClockFreq+0x188>)
 800356e:	fba0 1202 	umull	r1, r2, r0, r2
 8003572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003574:	460a      	mov	r2, r1
 8003576:	62ba      	str	r2, [r7, #40]	; 0x28
 8003578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800357a:	4413      	add	r3, r2
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800357e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003580:	2200      	movs	r2, #0
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	61fa      	str	r2, [r7, #28]
 8003586:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800358a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800358e:	f7fd f8bb 	bl	8000708 <__aeabi_uldivmod>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4613      	mov	r3, r2
 8003598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800359a:	e053      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359c:	4b35      	ldr	r3, [pc, #212]	; (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	099b      	lsrs	r3, r3, #6
 80035a2:	2200      	movs	r2, #0
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	617a      	str	r2, [r7, #20]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035ae:	f04f 0b00 	mov.w	fp, #0
 80035b2:	4652      	mov	r2, sl
 80035b4:	465b      	mov	r3, fp
 80035b6:	f04f 0000 	mov.w	r0, #0
 80035ba:	f04f 0100 	mov.w	r1, #0
 80035be:	0159      	lsls	r1, r3, #5
 80035c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c4:	0150      	lsls	r0, r2, #5
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	ebb2 080a 	subs.w	r8, r2, sl
 80035ce:	eb63 090b 	sbc.w	r9, r3, fp
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035e6:	ebb2 0408 	subs.w	r4, r2, r8
 80035ea:	eb63 0509 	sbc.w	r5, r3, r9
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	00eb      	lsls	r3, r5, #3
 80035f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035fc:	00e2      	lsls	r2, r4, #3
 80035fe:	4614      	mov	r4, r2
 8003600:	461d      	mov	r5, r3
 8003602:	eb14 030a 	adds.w	r3, r4, sl
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	eb45 030b 	adc.w	r3, r5, fp
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800361a:	4629      	mov	r1, r5
 800361c:	028b      	lsls	r3, r1, #10
 800361e:	4621      	mov	r1, r4
 8003620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003624:	4621      	mov	r1, r4
 8003626:	028a      	lsls	r2, r1, #10
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362e:	2200      	movs	r2, #0
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	60fa      	str	r2, [r7, #12]
 8003634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003638:	f7fd f866 	bl	8000708 <__aeabi_uldivmod>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4613      	mov	r3, r2
 8003642:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	3301      	adds	r3, #1
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800365e:	e002      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCC_GetSysClockFreq+0x184>)
 8003662:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003668:	4618      	mov	r0, r3
 800366a:	3740      	adds	r7, #64	; 0x40
 800366c:	46bd      	mov	sp, r7
 800366e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
 8003678:	00f42400 	.word	0x00f42400
 800367c:	017d7840 	.word	0x017d7840

08003680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <HAL_RCC_GetHCLKFreq+0x14>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	2000000c 	.word	0x2000000c

08003698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800369c:	f7ff fff0 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	0a9b      	lsrs	r3, r3, #10
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	08005584 	.word	0x08005584

080036c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e07b      	b.n	80037ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d108      	bne.n	80036ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036e2:	d009      	beq.n	80036f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	61da      	str	r2, [r3, #28]
 80036ea:	e005      	b.n	80036f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe fd6a 	bl	80021ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800372e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377c:	ea42 0103 	orr.w	r1, r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	f003 0104 	and.w	r1, r3, #4
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	f003 0210 	and.w	r2, r3, #16
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b088      	sub	sp, #32
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_SPI_Transmit+0x22>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e12d      	b.n	8003a50 <HAL_SPI_Transmit+0x27e>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037fc:	f7fe fef8 	bl	80025f0 <HAL_GetTick>
 8003800:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d002      	beq.n	8003818 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003812:	2302      	movs	r3, #2
 8003814:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003816:	e116      	b.n	8003a46 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_SPI_Transmit+0x52>
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d102      	bne.n	800382a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003828:	e10d      	b.n	8003a46 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2203      	movs	r2, #3
 800382e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	88fa      	ldrh	r2, [r7, #6]
 8003842:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	88fa      	ldrh	r2, [r7, #6]
 8003848:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003870:	d10f      	bne.n	8003892 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003880:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003890:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389c:	2b40      	cmp	r3, #64	; 0x40
 800389e:	d007      	beq.n	80038b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b8:	d14f      	bne.n	800395a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_SPI_Transmit+0xf6>
 80038c2:	8afb      	ldrh	r3, [r7, #22]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d142      	bne.n	800394e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	881a      	ldrh	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	1c9a      	adds	r2, r3, #2
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038ec:	e02f      	b.n	800394e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d112      	bne.n	8003922 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	881a      	ldrh	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	1c9a      	adds	r2, r3, #2
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003920:	e015      	b.n	800394e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003922:	f7fe fe65 	bl	80025f0 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d803      	bhi.n	800393a <HAL_SPI_Transmit+0x168>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d102      	bne.n	8003940 <HAL_SPI_Transmit+0x16e>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d106      	bne.n	800394e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800394c:	e07b      	b.n	8003a46 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1ca      	bne.n	80038ee <HAL_SPI_Transmit+0x11c>
 8003958:	e050      	b.n	80039fc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_SPI_Transmit+0x196>
 8003962:	8afb      	ldrh	r3, [r7, #22]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d144      	bne.n	80039f2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	330c      	adds	r3, #12
 8003972:	7812      	ldrb	r2, [r2, #0]
 8003974:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800398e:	e030      	b.n	80039f2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b02      	cmp	r3, #2
 800399c:	d113      	bne.n	80039c6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	7812      	ldrb	r2, [r2, #0]
 80039aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80039c4:	e015      	b.n	80039f2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039c6:	f7fe fe13 	bl	80025f0 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d803      	bhi.n	80039de <HAL_SPI_Transmit+0x20c>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d102      	bne.n	80039e4 <HAL_SPI_Transmit+0x212>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80039f0:	e029      	b.n	8003a46 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1c9      	bne.n	8003990 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	6839      	ldr	r1, [r7, #0]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f8b1 	bl	8003b68 <SPI_EndRxTxTransaction>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10a      	bne.n	8003a30 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e003      	b.n	8003a46 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3720      	adds	r7, #32
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a68:	f7fe fdc2 	bl	80025f0 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	4413      	add	r3, r2
 8003a76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a78:	f7fe fdba 	bl	80025f0 <HAL_GetTick>
 8003a7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a7e:	4b39      	ldr	r3, [pc, #228]	; (8003b64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	015b      	lsls	r3, r3, #5
 8003a84:	0d1b      	lsrs	r3, r3, #20
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	fb02 f303 	mul.w	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a8e:	e054      	b.n	8003b3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a96:	d050      	beq.n	8003b3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a98:	f7fe fdaa 	bl	80025f0 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d902      	bls.n	8003aae <SPI_WaitFlagStateUntilTimeout+0x56>
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d13d      	bne.n	8003b2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003abc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ac6:	d111      	bne.n	8003aec <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad0:	d004      	beq.n	8003adc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ada:	d107      	bne.n	8003aec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af4:	d10f      	bne.n	8003b16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e017      	b.n	8003b5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4013      	ands	r3, r2
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	bf0c      	ite	eq
 8003b4a:	2301      	moveq	r3, #1
 8003b4c:	2300      	movne	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d19b      	bne.n	8003a90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	2000000c 	.word	0x2000000c

08003b68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f7ff ff6a 	bl	8003a58 <SPI_WaitFlagStateUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	f043 0220 	orr.w	r2, r3, #32
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e032      	b.n	8003c00 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b9a:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <SPI_EndRxTxTransaction+0xa0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1b      	ldr	r2, [pc, #108]	; (8003c0c <SPI_EndRxTxTransaction+0xa4>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	0d5b      	lsrs	r3, r3, #21
 8003ba6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003baa:	fb02 f303 	mul.w	r3, r2, r3
 8003bae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb8:	d112      	bne.n	8003be0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2180      	movs	r1, #128	; 0x80
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f7ff ff47 	bl	8003a58 <SPI_WaitFlagStateUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d016      	beq.n	8003bfe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	f043 0220 	orr.w	r2, r3, #32
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e00f      	b.n	8003c00 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf6:	2b80      	cmp	r3, #128	; 0x80
 8003bf8:	d0f2      	beq.n	8003be0 <SPI_EndRxTxTransaction+0x78>
 8003bfa:	e000      	b.n	8003bfe <SPI_EndRxTxTransaction+0x96>
        break;
 8003bfc:	bf00      	nop
  }

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	2000000c 	.word	0x2000000c
 8003c0c:	165e9f81 	.word	0x165e9f81

08003c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e041      	b.n	8003ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fe fb20 	bl	800227c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f000 fa7a 	bl	8004148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d001      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e044      	b.n	8003d52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1e      	ldr	r2, [pc, #120]	; (8003d60 <HAL_TIM_Base_Start_IT+0xb0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d018      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x6c>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf2:	d013      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x6c>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1a      	ldr	r2, [pc, #104]	; (8003d64 <HAL_TIM_Base_Start_IT+0xb4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00e      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x6c>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <HAL_TIM_Base_Start_IT+0xb8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d009      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x6c>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a17      	ldr	r2, [pc, #92]	; (8003d6c <HAL_TIM_Base_Start_IT+0xbc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d004      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x6c>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <HAL_TIM_Base_Start_IT+0xc0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d111      	bne.n	8003d40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b06      	cmp	r3, #6
 8003d2c:	d010      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3e:	e007      	b.n	8003d50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40010000 	.word	0x40010000
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40000800 	.word	0x40000800
 8003d6c:	40000c00 	.word	0x40000c00
 8003d70:	40014000 	.word	0x40014000

08003d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d020      	beq.n	8003dd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01b      	beq.n	8003dd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0202 	mvn.w	r2, #2
 8003da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f9a3 	bl	800410a <HAL_TIM_IC_CaptureCallback>
 8003dc4:	e005      	b.n	8003dd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f995 	bl	80040f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f9a6 	bl	800411e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d020      	beq.n	8003e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01b      	beq.n	8003e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0204 	mvn.w	r2, #4
 8003df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f97d 	bl	800410a <HAL_TIM_IC_CaptureCallback>
 8003e10:	e005      	b.n	8003e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f96f 	bl	80040f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f980 	bl	800411e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d020      	beq.n	8003e70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d01b      	beq.n	8003e70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0208 	mvn.w	r2, #8
 8003e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2204      	movs	r2, #4
 8003e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f957 	bl	800410a <HAL_TIM_IC_CaptureCallback>
 8003e5c:	e005      	b.n	8003e6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f949 	bl	80040f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f95a 	bl	800411e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d020      	beq.n	8003ebc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01b      	beq.n	8003ebc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0210 	mvn.w	r2, #16
 8003e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2208      	movs	r2, #8
 8003e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f931 	bl	800410a <HAL_TIM_IC_CaptureCallback>
 8003ea8:	e005      	b.n	8003eb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f923 	bl	80040f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f934 	bl	800411e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00c      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f06f 0201 	mvn.w	r2, #1
 8003ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f901 	bl	80040e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00c      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fac0 	bl	8004484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00c      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d007      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f905 	bl	8004132 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00c      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0220 	mvn.w	r2, #32
 8003f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fa92 	bl	8004470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_TIM_ConfigClockSource+0x1c>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e0b4      	b.n	80040da <HAL_TIM_ConfigClockSource+0x186>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa8:	d03e      	beq.n	8004028 <HAL_TIM_ConfigClockSource+0xd4>
 8003faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fae:	f200 8087 	bhi.w	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb6:	f000 8086 	beq.w	80040c6 <HAL_TIM_ConfigClockSource+0x172>
 8003fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fbe:	d87f      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc0:	2b70      	cmp	r3, #112	; 0x70
 8003fc2:	d01a      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0xa6>
 8003fc4:	2b70      	cmp	r3, #112	; 0x70
 8003fc6:	d87b      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc8:	2b60      	cmp	r3, #96	; 0x60
 8003fca:	d050      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x11a>
 8003fcc:	2b60      	cmp	r3, #96	; 0x60
 8003fce:	d877      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd0:	2b50      	cmp	r3, #80	; 0x50
 8003fd2:	d03c      	beq.n	800404e <HAL_TIM_ConfigClockSource+0xfa>
 8003fd4:	2b50      	cmp	r3, #80	; 0x50
 8003fd6:	d873      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd8:	2b40      	cmp	r3, #64	; 0x40
 8003fda:	d058      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x13a>
 8003fdc:	2b40      	cmp	r3, #64	; 0x40
 8003fde:	d86f      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	2b30      	cmp	r3, #48	; 0x30
 8003fe2:	d064      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x15a>
 8003fe4:	2b30      	cmp	r3, #48	; 0x30
 8003fe6:	d86b      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d060      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x15a>
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d867      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d05c      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x15a>
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d05a      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x15a>
 8003ff8:	e062      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800400a:	f000 f9a3 	bl	8004354 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800401c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	609a      	str	r2, [r3, #8]
      break;
 8004026:	e04f      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004038:	f000 f98c 	bl	8004354 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800404a:	609a      	str	r2, [r3, #8]
      break;
 800404c:	e03c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800405a:	461a      	mov	r2, r3
 800405c:	f000 f900 	bl	8004260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2150      	movs	r1, #80	; 0x50
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f959 	bl	800431e <TIM_ITRx_SetConfig>
      break;
 800406c:	e02c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800407a:	461a      	mov	r2, r3
 800407c:	f000 f91f 	bl	80042be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2160      	movs	r1, #96	; 0x60
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f949 	bl	800431e <TIM_ITRx_SetConfig>
      break;
 800408c:	e01c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800409a:	461a      	mov	r2, r3
 800409c:	f000 f8e0 	bl	8004260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2140      	movs	r1, #64	; 0x40
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f939 	bl	800431e <TIM_ITRx_SetConfig>
      break;
 80040ac:	e00c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4619      	mov	r1, r3
 80040b8:	4610      	mov	r0, r2
 80040ba:	f000 f930 	bl	800431e <TIM_ITRx_SetConfig>
      break;
 80040be:	e003      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
      break;
 80040c4:	e000      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
	...

08004148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a3a      	ldr	r2, [pc, #232]	; (8004244 <TIM_Base_SetConfig+0xfc>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00f      	beq.n	8004180 <TIM_Base_SetConfig+0x38>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004166:	d00b      	beq.n	8004180 <TIM_Base_SetConfig+0x38>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a37      	ldr	r2, [pc, #220]	; (8004248 <TIM_Base_SetConfig+0x100>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d007      	beq.n	8004180 <TIM_Base_SetConfig+0x38>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a36      	ldr	r2, [pc, #216]	; (800424c <TIM_Base_SetConfig+0x104>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_Base_SetConfig+0x38>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a35      	ldr	r2, [pc, #212]	; (8004250 <TIM_Base_SetConfig+0x108>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d108      	bne.n	8004192 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a2b      	ldr	r2, [pc, #172]	; (8004244 <TIM_Base_SetConfig+0xfc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d01b      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a0:	d017      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a28      	ldr	r2, [pc, #160]	; (8004248 <TIM_Base_SetConfig+0x100>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a27      	ldr	r2, [pc, #156]	; (800424c <TIM_Base_SetConfig+0x104>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00f      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a26      	ldr	r2, [pc, #152]	; (8004250 <TIM_Base_SetConfig+0x108>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00b      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a25      	ldr	r2, [pc, #148]	; (8004254 <TIM_Base_SetConfig+0x10c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d007      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a24      	ldr	r2, [pc, #144]	; (8004258 <TIM_Base_SetConfig+0x110>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a23      	ldr	r2, [pc, #140]	; (800425c <TIM_Base_SetConfig+0x114>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d108      	bne.n	80041e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a0e      	ldr	r2, [pc, #56]	; (8004244 <TIM_Base_SetConfig+0xfc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d103      	bne.n	8004218 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b01      	cmp	r3, #1
 8004228:	d105      	bne.n	8004236 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	611a      	str	r2, [r3, #16]
  }
}
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800
 8004250:	40000c00 	.word	0x40000c00
 8004254:	40014000 	.word	0x40014000
 8004258:	40014400 	.word	0x40014400
 800425c:	40014800 	.word	0x40014800

08004260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f023 0201 	bic.w	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800428a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f023 030a 	bic.w	r3, r3, #10
 800429c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042be:	b480      	push	{r7}
 80042c0:	b087      	sub	sp, #28
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	f023 0210 	bic.w	r2, r3, #16
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	031b      	lsls	r3, r3, #12
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800431e:	b480      	push	{r7}
 8004320:	b085      	sub	sp, #20
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	f043 0307 	orr.w	r3, r3, #7
 8004340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	609a      	str	r2, [r3, #8]
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800436e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	021a      	lsls	r2, r3, #8
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	431a      	orrs	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4313      	orrs	r3, r2
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	609a      	str	r2, [r3, #8]
}
 8004388:	bf00      	nop
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e050      	b.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1c      	ldr	r2, [pc, #112]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d018      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f8:	d013      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a18      	ldr	r2, [pc, #96]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00e      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a16      	ldr	r2, [pc, #88]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d009      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a15      	ldr	r2, [pc, #84]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d004      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a13      	ldr	r2, [pc, #76]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d10c      	bne.n	800443c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004428:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	4313      	orrs	r3, r2
 8004432:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40010000 	.word	0x40010000
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800
 8004468:	40000c00 	.word	0x40000c00
 800446c:	40014000 	.word	0x40014000

08004470 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <srand>:
 8004498:	b538      	push	{r3, r4, r5, lr}
 800449a:	4b10      	ldr	r3, [pc, #64]	; (80044dc <srand+0x44>)
 800449c:	681d      	ldr	r5, [r3, #0]
 800449e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80044a0:	4604      	mov	r4, r0
 80044a2:	b9b3      	cbnz	r3, 80044d2 <srand+0x3a>
 80044a4:	2018      	movs	r0, #24
 80044a6:	f000 fa7b 	bl	80049a0 <malloc>
 80044aa:	4602      	mov	r2, r0
 80044ac:	6328      	str	r0, [r5, #48]	; 0x30
 80044ae:	b920      	cbnz	r0, 80044ba <srand+0x22>
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <srand+0x48>)
 80044b2:	480c      	ldr	r0, [pc, #48]	; (80044e4 <srand+0x4c>)
 80044b4:	2146      	movs	r1, #70	; 0x46
 80044b6:	f000 fa09 	bl	80048cc <__assert_func>
 80044ba:	490b      	ldr	r1, [pc, #44]	; (80044e8 <srand+0x50>)
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <srand+0x54>)
 80044be:	e9c0 1300 	strd	r1, r3, [r0]
 80044c2:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <srand+0x58>)
 80044c4:	6083      	str	r3, [r0, #8]
 80044c6:	230b      	movs	r3, #11
 80044c8:	8183      	strh	r3, [r0, #12]
 80044ca:	2100      	movs	r1, #0
 80044cc:	2001      	movs	r0, #1
 80044ce:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80044d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80044d4:	2200      	movs	r2, #0
 80044d6:	611c      	str	r4, [r3, #16]
 80044d8:	615a      	str	r2, [r3, #20]
 80044da:	bd38      	pop	{r3, r4, r5, pc}
 80044dc:	20000070 	.word	0x20000070
 80044e0:	0800558c 	.word	0x0800558c
 80044e4:	080055a3 	.word	0x080055a3
 80044e8:	abcd330e 	.word	0xabcd330e
 80044ec:	e66d1234 	.word	0xe66d1234
 80044f0:	0005deec 	.word	0x0005deec

080044f4 <rand>:
 80044f4:	4b16      	ldr	r3, [pc, #88]	; (8004550 <rand+0x5c>)
 80044f6:	b510      	push	{r4, lr}
 80044f8:	681c      	ldr	r4, [r3, #0]
 80044fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80044fc:	b9b3      	cbnz	r3, 800452c <rand+0x38>
 80044fe:	2018      	movs	r0, #24
 8004500:	f000 fa4e 	bl	80049a0 <malloc>
 8004504:	4602      	mov	r2, r0
 8004506:	6320      	str	r0, [r4, #48]	; 0x30
 8004508:	b920      	cbnz	r0, 8004514 <rand+0x20>
 800450a:	4b12      	ldr	r3, [pc, #72]	; (8004554 <rand+0x60>)
 800450c:	4812      	ldr	r0, [pc, #72]	; (8004558 <rand+0x64>)
 800450e:	2152      	movs	r1, #82	; 0x52
 8004510:	f000 f9dc 	bl	80048cc <__assert_func>
 8004514:	4911      	ldr	r1, [pc, #68]	; (800455c <rand+0x68>)
 8004516:	4b12      	ldr	r3, [pc, #72]	; (8004560 <rand+0x6c>)
 8004518:	e9c0 1300 	strd	r1, r3, [r0]
 800451c:	4b11      	ldr	r3, [pc, #68]	; (8004564 <rand+0x70>)
 800451e:	6083      	str	r3, [r0, #8]
 8004520:	230b      	movs	r3, #11
 8004522:	8183      	strh	r3, [r0, #12]
 8004524:	2100      	movs	r1, #0
 8004526:	2001      	movs	r0, #1
 8004528:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800452c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800452e:	480e      	ldr	r0, [pc, #56]	; (8004568 <rand+0x74>)
 8004530:	690b      	ldr	r3, [r1, #16]
 8004532:	694c      	ldr	r4, [r1, #20]
 8004534:	4a0d      	ldr	r2, [pc, #52]	; (800456c <rand+0x78>)
 8004536:	4358      	muls	r0, r3
 8004538:	fb02 0004 	mla	r0, r2, r4, r0
 800453c:	fba3 3202 	umull	r3, r2, r3, r2
 8004540:	3301      	adds	r3, #1
 8004542:	eb40 0002 	adc.w	r0, r0, r2
 8004546:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800454a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800454e:	bd10      	pop	{r4, pc}
 8004550:	20000070 	.word	0x20000070
 8004554:	0800558c 	.word	0x0800558c
 8004558:	080055a3 	.word	0x080055a3
 800455c:	abcd330e 	.word	0xabcd330e
 8004560:	e66d1234 	.word	0xe66d1234
 8004564:	0005deec 	.word	0x0005deec
 8004568:	5851f42d 	.word	0x5851f42d
 800456c:	4c957f2d 	.word	0x4c957f2d

08004570 <std>:
 8004570:	2300      	movs	r3, #0
 8004572:	b510      	push	{r4, lr}
 8004574:	4604      	mov	r4, r0
 8004576:	e9c0 3300 	strd	r3, r3, [r0]
 800457a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800457e:	6083      	str	r3, [r0, #8]
 8004580:	8181      	strh	r1, [r0, #12]
 8004582:	6643      	str	r3, [r0, #100]	; 0x64
 8004584:	81c2      	strh	r2, [r0, #14]
 8004586:	6183      	str	r3, [r0, #24]
 8004588:	4619      	mov	r1, r3
 800458a:	2208      	movs	r2, #8
 800458c:	305c      	adds	r0, #92	; 0x5c
 800458e:	f000 f8f4 	bl	800477a <memset>
 8004592:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <std+0x58>)
 8004594:	6263      	str	r3, [r4, #36]	; 0x24
 8004596:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <std+0x5c>)
 8004598:	62a3      	str	r3, [r4, #40]	; 0x28
 800459a:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <std+0x60>)
 800459c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800459e:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <std+0x64>)
 80045a0:	6323      	str	r3, [r4, #48]	; 0x30
 80045a2:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <std+0x68>)
 80045a4:	6224      	str	r4, [r4, #32]
 80045a6:	429c      	cmp	r4, r3
 80045a8:	d006      	beq.n	80045b8 <std+0x48>
 80045aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80045ae:	4294      	cmp	r4, r2
 80045b0:	d002      	beq.n	80045b8 <std+0x48>
 80045b2:	33d0      	adds	r3, #208	; 0xd0
 80045b4:	429c      	cmp	r4, r3
 80045b6:	d105      	bne.n	80045c4 <std+0x54>
 80045b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045c0:	f000 b980 	b.w	80048c4 <__retarget_lock_init_recursive>
 80045c4:	bd10      	pop	{r4, pc}
 80045c6:	bf00      	nop
 80045c8:	080046f5 	.word	0x080046f5
 80045cc:	08004717 	.word	0x08004717
 80045d0:	0800474f 	.word	0x0800474f
 80045d4:	08004773 	.word	0x08004773
 80045d8:	20005dcc 	.word	0x20005dcc

080045dc <stdio_exit_handler>:
 80045dc:	4a02      	ldr	r2, [pc, #8]	; (80045e8 <stdio_exit_handler+0xc>)
 80045de:	4903      	ldr	r1, [pc, #12]	; (80045ec <stdio_exit_handler+0x10>)
 80045e0:	4803      	ldr	r0, [pc, #12]	; (80045f0 <stdio_exit_handler+0x14>)
 80045e2:	f000 b869 	b.w	80046b8 <_fwalk_sglue>
 80045e6:	bf00      	nop
 80045e8:	20000018 	.word	0x20000018
 80045ec:	08004c15 	.word	0x08004c15
 80045f0:	20000024 	.word	0x20000024

080045f4 <cleanup_stdio>:
 80045f4:	6841      	ldr	r1, [r0, #4]
 80045f6:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <cleanup_stdio+0x34>)
 80045f8:	4299      	cmp	r1, r3
 80045fa:	b510      	push	{r4, lr}
 80045fc:	4604      	mov	r4, r0
 80045fe:	d001      	beq.n	8004604 <cleanup_stdio+0x10>
 8004600:	f000 fb08 	bl	8004c14 <_fflush_r>
 8004604:	68a1      	ldr	r1, [r4, #8]
 8004606:	4b09      	ldr	r3, [pc, #36]	; (800462c <cleanup_stdio+0x38>)
 8004608:	4299      	cmp	r1, r3
 800460a:	d002      	beq.n	8004612 <cleanup_stdio+0x1e>
 800460c:	4620      	mov	r0, r4
 800460e:	f000 fb01 	bl	8004c14 <_fflush_r>
 8004612:	68e1      	ldr	r1, [r4, #12]
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <cleanup_stdio+0x3c>)
 8004616:	4299      	cmp	r1, r3
 8004618:	d004      	beq.n	8004624 <cleanup_stdio+0x30>
 800461a:	4620      	mov	r0, r4
 800461c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004620:	f000 baf8 	b.w	8004c14 <_fflush_r>
 8004624:	bd10      	pop	{r4, pc}
 8004626:	bf00      	nop
 8004628:	20005dcc 	.word	0x20005dcc
 800462c:	20005e34 	.word	0x20005e34
 8004630:	20005e9c 	.word	0x20005e9c

08004634 <global_stdio_init.part.0>:
 8004634:	b510      	push	{r4, lr}
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <global_stdio_init.part.0+0x30>)
 8004638:	4c0b      	ldr	r4, [pc, #44]	; (8004668 <global_stdio_init.part.0+0x34>)
 800463a:	4a0c      	ldr	r2, [pc, #48]	; (800466c <global_stdio_init.part.0+0x38>)
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	4620      	mov	r0, r4
 8004640:	2200      	movs	r2, #0
 8004642:	2104      	movs	r1, #4
 8004644:	f7ff ff94 	bl	8004570 <std>
 8004648:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800464c:	2201      	movs	r2, #1
 800464e:	2109      	movs	r1, #9
 8004650:	f7ff ff8e 	bl	8004570 <std>
 8004654:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004658:	2202      	movs	r2, #2
 800465a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800465e:	2112      	movs	r1, #18
 8004660:	f7ff bf86 	b.w	8004570 <std>
 8004664:	20005f04 	.word	0x20005f04
 8004668:	20005dcc 	.word	0x20005dcc
 800466c:	080045dd 	.word	0x080045dd

08004670 <__sfp_lock_acquire>:
 8004670:	4801      	ldr	r0, [pc, #4]	; (8004678 <__sfp_lock_acquire+0x8>)
 8004672:	f000 b928 	b.w	80048c6 <__retarget_lock_acquire_recursive>
 8004676:	bf00      	nop
 8004678:	20005f0d 	.word	0x20005f0d

0800467c <__sfp_lock_release>:
 800467c:	4801      	ldr	r0, [pc, #4]	; (8004684 <__sfp_lock_release+0x8>)
 800467e:	f000 b923 	b.w	80048c8 <__retarget_lock_release_recursive>
 8004682:	bf00      	nop
 8004684:	20005f0d 	.word	0x20005f0d

08004688 <__sinit>:
 8004688:	b510      	push	{r4, lr}
 800468a:	4604      	mov	r4, r0
 800468c:	f7ff fff0 	bl	8004670 <__sfp_lock_acquire>
 8004690:	6a23      	ldr	r3, [r4, #32]
 8004692:	b11b      	cbz	r3, 800469c <__sinit+0x14>
 8004694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004698:	f7ff bff0 	b.w	800467c <__sfp_lock_release>
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <__sinit+0x28>)
 800469e:	6223      	str	r3, [r4, #32]
 80046a0:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <__sinit+0x2c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f5      	bne.n	8004694 <__sinit+0xc>
 80046a8:	f7ff ffc4 	bl	8004634 <global_stdio_init.part.0>
 80046ac:	e7f2      	b.n	8004694 <__sinit+0xc>
 80046ae:	bf00      	nop
 80046b0:	080045f5 	.word	0x080045f5
 80046b4:	20005f04 	.word	0x20005f04

080046b8 <_fwalk_sglue>:
 80046b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046bc:	4607      	mov	r7, r0
 80046be:	4688      	mov	r8, r1
 80046c0:	4614      	mov	r4, r2
 80046c2:	2600      	movs	r6, #0
 80046c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046c8:	f1b9 0901 	subs.w	r9, r9, #1
 80046cc:	d505      	bpl.n	80046da <_fwalk_sglue+0x22>
 80046ce:	6824      	ldr	r4, [r4, #0]
 80046d0:	2c00      	cmp	r4, #0
 80046d2:	d1f7      	bne.n	80046c4 <_fwalk_sglue+0xc>
 80046d4:	4630      	mov	r0, r6
 80046d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046da:	89ab      	ldrh	r3, [r5, #12]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d907      	bls.n	80046f0 <_fwalk_sglue+0x38>
 80046e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046e4:	3301      	adds	r3, #1
 80046e6:	d003      	beq.n	80046f0 <_fwalk_sglue+0x38>
 80046e8:	4629      	mov	r1, r5
 80046ea:	4638      	mov	r0, r7
 80046ec:	47c0      	blx	r8
 80046ee:	4306      	orrs	r6, r0
 80046f0:	3568      	adds	r5, #104	; 0x68
 80046f2:	e7e9      	b.n	80046c8 <_fwalk_sglue+0x10>

080046f4 <__sread>:
 80046f4:	b510      	push	{r4, lr}
 80046f6:	460c      	mov	r4, r1
 80046f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046fc:	f000 f894 	bl	8004828 <_read_r>
 8004700:	2800      	cmp	r0, #0
 8004702:	bfab      	itete	ge
 8004704:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004706:	89a3      	ldrhlt	r3, [r4, #12]
 8004708:	181b      	addge	r3, r3, r0
 800470a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800470e:	bfac      	ite	ge
 8004710:	6563      	strge	r3, [r4, #84]	; 0x54
 8004712:	81a3      	strhlt	r3, [r4, #12]
 8004714:	bd10      	pop	{r4, pc}

08004716 <__swrite>:
 8004716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800471a:	461f      	mov	r7, r3
 800471c:	898b      	ldrh	r3, [r1, #12]
 800471e:	05db      	lsls	r3, r3, #23
 8004720:	4605      	mov	r5, r0
 8004722:	460c      	mov	r4, r1
 8004724:	4616      	mov	r6, r2
 8004726:	d505      	bpl.n	8004734 <__swrite+0x1e>
 8004728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800472c:	2302      	movs	r3, #2
 800472e:	2200      	movs	r2, #0
 8004730:	f000 f868 	bl	8004804 <_lseek_r>
 8004734:	89a3      	ldrh	r3, [r4, #12]
 8004736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800473a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800473e:	81a3      	strh	r3, [r4, #12]
 8004740:	4632      	mov	r2, r6
 8004742:	463b      	mov	r3, r7
 8004744:	4628      	mov	r0, r5
 8004746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800474a:	f000 b87f 	b.w	800484c <_write_r>

0800474e <__sseek>:
 800474e:	b510      	push	{r4, lr}
 8004750:	460c      	mov	r4, r1
 8004752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004756:	f000 f855 	bl	8004804 <_lseek_r>
 800475a:	1c43      	adds	r3, r0, #1
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	bf15      	itete	ne
 8004760:	6560      	strne	r0, [r4, #84]	; 0x54
 8004762:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004766:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800476a:	81a3      	strheq	r3, [r4, #12]
 800476c:	bf18      	it	ne
 800476e:	81a3      	strhne	r3, [r4, #12]
 8004770:	bd10      	pop	{r4, pc}

08004772 <__sclose>:
 8004772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004776:	f000 b823 	b.w	80047c0 <_close_r>

0800477a <memset>:
 800477a:	4402      	add	r2, r0
 800477c:	4603      	mov	r3, r0
 800477e:	4293      	cmp	r3, r2
 8004780:	d100      	bne.n	8004784 <memset+0xa>
 8004782:	4770      	bx	lr
 8004784:	f803 1b01 	strb.w	r1, [r3], #1
 8004788:	e7f9      	b.n	800477e <memset+0x4>
	...

0800478c <time>:
 800478c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800478e:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <time+0x30>)
 8004790:	2200      	movs	r2, #0
 8004792:	4669      	mov	r1, sp
 8004794:	4604      	mov	r4, r0
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	f000 f822 	bl	80047e0 <_gettimeofday_r>
 800479c:	2800      	cmp	r0, #0
 800479e:	bfbe      	ittt	lt
 80047a0:	f04f 32ff 	movlt.w	r2, #4294967295
 80047a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80047a8:	e9cd 2300 	strdlt	r2, r3, [sp]
 80047ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047b0:	b10c      	cbz	r4, 80047b6 <time+0x2a>
 80047b2:	e9c4 0100 	strd	r0, r1, [r4]
 80047b6:	b004      	add	sp, #16
 80047b8:	bd10      	pop	{r4, pc}
 80047ba:	bf00      	nop
 80047bc:	20000070 	.word	0x20000070

080047c0 <_close_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	4d06      	ldr	r5, [pc, #24]	; (80047dc <_close_r+0x1c>)
 80047c4:	2300      	movs	r3, #0
 80047c6:	4604      	mov	r4, r0
 80047c8:	4608      	mov	r0, r1
 80047ca:	602b      	str	r3, [r5, #0]
 80047cc:	f7fd fe03 	bl	80023d6 <_close>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d102      	bne.n	80047da <_close_r+0x1a>
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	b103      	cbz	r3, 80047da <_close_r+0x1a>
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	bd38      	pop	{r3, r4, r5, pc}
 80047dc:	20005f08 	.word	0x20005f08

080047e0 <_gettimeofday_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	4d07      	ldr	r5, [pc, #28]	; (8004800 <_gettimeofday_r+0x20>)
 80047e4:	2300      	movs	r3, #0
 80047e6:	4604      	mov	r4, r0
 80047e8:	4608      	mov	r0, r1
 80047ea:	4611      	mov	r1, r2
 80047ec:	602b      	str	r3, [r5, #0]
 80047ee:	f000 fe93 	bl	8005518 <_gettimeofday>
 80047f2:	1c43      	adds	r3, r0, #1
 80047f4:	d102      	bne.n	80047fc <_gettimeofday_r+0x1c>
 80047f6:	682b      	ldr	r3, [r5, #0]
 80047f8:	b103      	cbz	r3, 80047fc <_gettimeofday_r+0x1c>
 80047fa:	6023      	str	r3, [r4, #0]
 80047fc:	bd38      	pop	{r3, r4, r5, pc}
 80047fe:	bf00      	nop
 8004800:	20005f08 	.word	0x20005f08

08004804 <_lseek_r>:
 8004804:	b538      	push	{r3, r4, r5, lr}
 8004806:	4d07      	ldr	r5, [pc, #28]	; (8004824 <_lseek_r+0x20>)
 8004808:	4604      	mov	r4, r0
 800480a:	4608      	mov	r0, r1
 800480c:	4611      	mov	r1, r2
 800480e:	2200      	movs	r2, #0
 8004810:	602a      	str	r2, [r5, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	f7fd fe06 	bl	8002424 <_lseek>
 8004818:	1c43      	adds	r3, r0, #1
 800481a:	d102      	bne.n	8004822 <_lseek_r+0x1e>
 800481c:	682b      	ldr	r3, [r5, #0]
 800481e:	b103      	cbz	r3, 8004822 <_lseek_r+0x1e>
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	bd38      	pop	{r3, r4, r5, pc}
 8004824:	20005f08 	.word	0x20005f08

08004828 <_read_r>:
 8004828:	b538      	push	{r3, r4, r5, lr}
 800482a:	4d07      	ldr	r5, [pc, #28]	; (8004848 <_read_r+0x20>)
 800482c:	4604      	mov	r4, r0
 800482e:	4608      	mov	r0, r1
 8004830:	4611      	mov	r1, r2
 8004832:	2200      	movs	r2, #0
 8004834:	602a      	str	r2, [r5, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	f7fd fd94 	bl	8002364 <_read>
 800483c:	1c43      	adds	r3, r0, #1
 800483e:	d102      	bne.n	8004846 <_read_r+0x1e>
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	b103      	cbz	r3, 8004846 <_read_r+0x1e>
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	bd38      	pop	{r3, r4, r5, pc}
 8004848:	20005f08 	.word	0x20005f08

0800484c <_write_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4d07      	ldr	r5, [pc, #28]	; (800486c <_write_r+0x20>)
 8004850:	4604      	mov	r4, r0
 8004852:	4608      	mov	r0, r1
 8004854:	4611      	mov	r1, r2
 8004856:	2200      	movs	r2, #0
 8004858:	602a      	str	r2, [r5, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	f7fd fd9f 	bl	800239e <_write>
 8004860:	1c43      	adds	r3, r0, #1
 8004862:	d102      	bne.n	800486a <_write_r+0x1e>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	b103      	cbz	r3, 800486a <_write_r+0x1e>
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	bd38      	pop	{r3, r4, r5, pc}
 800486c:	20005f08 	.word	0x20005f08

08004870 <__errno>:
 8004870:	4b01      	ldr	r3, [pc, #4]	; (8004878 <__errno+0x8>)
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	20000070 	.word	0x20000070

0800487c <__libc_init_array>:
 800487c:	b570      	push	{r4, r5, r6, lr}
 800487e:	4d0d      	ldr	r5, [pc, #52]	; (80048b4 <__libc_init_array+0x38>)
 8004880:	4c0d      	ldr	r4, [pc, #52]	; (80048b8 <__libc_init_array+0x3c>)
 8004882:	1b64      	subs	r4, r4, r5
 8004884:	10a4      	asrs	r4, r4, #2
 8004886:	2600      	movs	r6, #0
 8004888:	42a6      	cmp	r6, r4
 800488a:	d109      	bne.n	80048a0 <__libc_init_array+0x24>
 800488c:	4d0b      	ldr	r5, [pc, #44]	; (80048bc <__libc_init_array+0x40>)
 800488e:	4c0c      	ldr	r4, [pc, #48]	; (80048c0 <__libc_init_array+0x44>)
 8004890:	f000 fe4a 	bl	8005528 <_init>
 8004894:	1b64      	subs	r4, r4, r5
 8004896:	10a4      	asrs	r4, r4, #2
 8004898:	2600      	movs	r6, #0
 800489a:	42a6      	cmp	r6, r4
 800489c:	d105      	bne.n	80048aa <__libc_init_array+0x2e>
 800489e:	bd70      	pop	{r4, r5, r6, pc}
 80048a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a4:	4798      	blx	r3
 80048a6:	3601      	adds	r6, #1
 80048a8:	e7ee      	b.n	8004888 <__libc_init_array+0xc>
 80048aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ae:	4798      	blx	r3
 80048b0:	3601      	adds	r6, #1
 80048b2:	e7f2      	b.n	800489a <__libc_init_array+0x1e>
 80048b4:	08005674 	.word	0x08005674
 80048b8:	08005674 	.word	0x08005674
 80048bc:	08005674 	.word	0x08005674
 80048c0:	08005678 	.word	0x08005678

080048c4 <__retarget_lock_init_recursive>:
 80048c4:	4770      	bx	lr

080048c6 <__retarget_lock_acquire_recursive>:
 80048c6:	4770      	bx	lr

080048c8 <__retarget_lock_release_recursive>:
 80048c8:	4770      	bx	lr
	...

080048cc <__assert_func>:
 80048cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80048ce:	4614      	mov	r4, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <__assert_func+0x2c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4605      	mov	r5, r0
 80048d8:	68d8      	ldr	r0, [r3, #12]
 80048da:	b14c      	cbz	r4, 80048f0 <__assert_func+0x24>
 80048dc:	4b07      	ldr	r3, [pc, #28]	; (80048fc <__assert_func+0x30>)
 80048de:	9100      	str	r1, [sp, #0]
 80048e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80048e4:	4906      	ldr	r1, [pc, #24]	; (8004900 <__assert_func+0x34>)
 80048e6:	462b      	mov	r3, r5
 80048e8:	f000 f9bc 	bl	8004c64 <fiprintf>
 80048ec:	f000 f9dc 	bl	8004ca8 <abort>
 80048f0:	4b04      	ldr	r3, [pc, #16]	; (8004904 <__assert_func+0x38>)
 80048f2:	461c      	mov	r4, r3
 80048f4:	e7f3      	b.n	80048de <__assert_func+0x12>
 80048f6:	bf00      	nop
 80048f8:	20000070 	.word	0x20000070
 80048fc:	080055fb 	.word	0x080055fb
 8004900:	08005608 	.word	0x08005608
 8004904:	08005636 	.word	0x08005636

08004908 <_free_r>:
 8004908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800490a:	2900      	cmp	r1, #0
 800490c:	d044      	beq.n	8004998 <_free_r+0x90>
 800490e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004912:	9001      	str	r0, [sp, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f1a1 0404 	sub.w	r4, r1, #4
 800491a:	bfb8      	it	lt
 800491c:	18e4      	addlt	r4, r4, r3
 800491e:	f000 f8e7 	bl	8004af0 <__malloc_lock>
 8004922:	4a1e      	ldr	r2, [pc, #120]	; (800499c <_free_r+0x94>)
 8004924:	9801      	ldr	r0, [sp, #4]
 8004926:	6813      	ldr	r3, [r2, #0]
 8004928:	b933      	cbnz	r3, 8004938 <_free_r+0x30>
 800492a:	6063      	str	r3, [r4, #4]
 800492c:	6014      	str	r4, [r2, #0]
 800492e:	b003      	add	sp, #12
 8004930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004934:	f000 b8e2 	b.w	8004afc <__malloc_unlock>
 8004938:	42a3      	cmp	r3, r4
 800493a:	d908      	bls.n	800494e <_free_r+0x46>
 800493c:	6825      	ldr	r5, [r4, #0]
 800493e:	1961      	adds	r1, r4, r5
 8004940:	428b      	cmp	r3, r1
 8004942:	bf01      	itttt	eq
 8004944:	6819      	ldreq	r1, [r3, #0]
 8004946:	685b      	ldreq	r3, [r3, #4]
 8004948:	1949      	addeq	r1, r1, r5
 800494a:	6021      	streq	r1, [r4, #0]
 800494c:	e7ed      	b.n	800492a <_free_r+0x22>
 800494e:	461a      	mov	r2, r3
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	b10b      	cbz	r3, 8004958 <_free_r+0x50>
 8004954:	42a3      	cmp	r3, r4
 8004956:	d9fa      	bls.n	800494e <_free_r+0x46>
 8004958:	6811      	ldr	r1, [r2, #0]
 800495a:	1855      	adds	r5, r2, r1
 800495c:	42a5      	cmp	r5, r4
 800495e:	d10b      	bne.n	8004978 <_free_r+0x70>
 8004960:	6824      	ldr	r4, [r4, #0]
 8004962:	4421      	add	r1, r4
 8004964:	1854      	adds	r4, r2, r1
 8004966:	42a3      	cmp	r3, r4
 8004968:	6011      	str	r1, [r2, #0]
 800496a:	d1e0      	bne.n	800492e <_free_r+0x26>
 800496c:	681c      	ldr	r4, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	6053      	str	r3, [r2, #4]
 8004972:	440c      	add	r4, r1
 8004974:	6014      	str	r4, [r2, #0]
 8004976:	e7da      	b.n	800492e <_free_r+0x26>
 8004978:	d902      	bls.n	8004980 <_free_r+0x78>
 800497a:	230c      	movs	r3, #12
 800497c:	6003      	str	r3, [r0, #0]
 800497e:	e7d6      	b.n	800492e <_free_r+0x26>
 8004980:	6825      	ldr	r5, [r4, #0]
 8004982:	1961      	adds	r1, r4, r5
 8004984:	428b      	cmp	r3, r1
 8004986:	bf04      	itt	eq
 8004988:	6819      	ldreq	r1, [r3, #0]
 800498a:	685b      	ldreq	r3, [r3, #4]
 800498c:	6063      	str	r3, [r4, #4]
 800498e:	bf04      	itt	eq
 8004990:	1949      	addeq	r1, r1, r5
 8004992:	6021      	streq	r1, [r4, #0]
 8004994:	6054      	str	r4, [r2, #4]
 8004996:	e7ca      	b.n	800492e <_free_r+0x26>
 8004998:	b003      	add	sp, #12
 800499a:	bd30      	pop	{r4, r5, pc}
 800499c:	20005f10 	.word	0x20005f10

080049a0 <malloc>:
 80049a0:	4b02      	ldr	r3, [pc, #8]	; (80049ac <malloc+0xc>)
 80049a2:	4601      	mov	r1, r0
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	f000 b823 	b.w	80049f0 <_malloc_r>
 80049aa:	bf00      	nop
 80049ac:	20000070 	.word	0x20000070

080049b0 <sbrk_aligned>:
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	4e0e      	ldr	r6, [pc, #56]	; (80049ec <sbrk_aligned+0x3c>)
 80049b4:	460c      	mov	r4, r1
 80049b6:	6831      	ldr	r1, [r6, #0]
 80049b8:	4605      	mov	r5, r0
 80049ba:	b911      	cbnz	r1, 80049c2 <sbrk_aligned+0x12>
 80049bc:	f000 f964 	bl	8004c88 <_sbrk_r>
 80049c0:	6030      	str	r0, [r6, #0]
 80049c2:	4621      	mov	r1, r4
 80049c4:	4628      	mov	r0, r5
 80049c6:	f000 f95f 	bl	8004c88 <_sbrk_r>
 80049ca:	1c43      	adds	r3, r0, #1
 80049cc:	d00a      	beq.n	80049e4 <sbrk_aligned+0x34>
 80049ce:	1cc4      	adds	r4, r0, #3
 80049d0:	f024 0403 	bic.w	r4, r4, #3
 80049d4:	42a0      	cmp	r0, r4
 80049d6:	d007      	beq.n	80049e8 <sbrk_aligned+0x38>
 80049d8:	1a21      	subs	r1, r4, r0
 80049da:	4628      	mov	r0, r5
 80049dc:	f000 f954 	bl	8004c88 <_sbrk_r>
 80049e0:	3001      	adds	r0, #1
 80049e2:	d101      	bne.n	80049e8 <sbrk_aligned+0x38>
 80049e4:	f04f 34ff 	mov.w	r4, #4294967295
 80049e8:	4620      	mov	r0, r4
 80049ea:	bd70      	pop	{r4, r5, r6, pc}
 80049ec:	20005f14 	.word	0x20005f14

080049f0 <_malloc_r>:
 80049f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f4:	1ccd      	adds	r5, r1, #3
 80049f6:	f025 0503 	bic.w	r5, r5, #3
 80049fa:	3508      	adds	r5, #8
 80049fc:	2d0c      	cmp	r5, #12
 80049fe:	bf38      	it	cc
 8004a00:	250c      	movcc	r5, #12
 8004a02:	2d00      	cmp	r5, #0
 8004a04:	4607      	mov	r7, r0
 8004a06:	db01      	blt.n	8004a0c <_malloc_r+0x1c>
 8004a08:	42a9      	cmp	r1, r5
 8004a0a:	d905      	bls.n	8004a18 <_malloc_r+0x28>
 8004a0c:	230c      	movs	r3, #12
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	2600      	movs	r6, #0
 8004a12:	4630      	mov	r0, r6
 8004a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004aec <_malloc_r+0xfc>
 8004a1c:	f000 f868 	bl	8004af0 <__malloc_lock>
 8004a20:	f8d8 3000 	ldr.w	r3, [r8]
 8004a24:	461c      	mov	r4, r3
 8004a26:	bb5c      	cbnz	r4, 8004a80 <_malloc_r+0x90>
 8004a28:	4629      	mov	r1, r5
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	f7ff ffc0 	bl	80049b0 <sbrk_aligned>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	4604      	mov	r4, r0
 8004a34:	d155      	bne.n	8004ae2 <_malloc_r+0xf2>
 8004a36:	f8d8 4000 	ldr.w	r4, [r8]
 8004a3a:	4626      	mov	r6, r4
 8004a3c:	2e00      	cmp	r6, #0
 8004a3e:	d145      	bne.n	8004acc <_malloc_r+0xdc>
 8004a40:	2c00      	cmp	r4, #0
 8004a42:	d048      	beq.n	8004ad6 <_malloc_r+0xe6>
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	4631      	mov	r1, r6
 8004a48:	4638      	mov	r0, r7
 8004a4a:	eb04 0903 	add.w	r9, r4, r3
 8004a4e:	f000 f91b 	bl	8004c88 <_sbrk_r>
 8004a52:	4581      	cmp	r9, r0
 8004a54:	d13f      	bne.n	8004ad6 <_malloc_r+0xe6>
 8004a56:	6821      	ldr	r1, [r4, #0]
 8004a58:	1a6d      	subs	r5, r5, r1
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	f7ff ffa7 	bl	80049b0 <sbrk_aligned>
 8004a62:	3001      	adds	r0, #1
 8004a64:	d037      	beq.n	8004ad6 <_malloc_r+0xe6>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	442b      	add	r3, r5
 8004a6a:	6023      	str	r3, [r4, #0]
 8004a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d038      	beq.n	8004ae6 <_malloc_r+0xf6>
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	42a2      	cmp	r2, r4
 8004a78:	d12b      	bne.n	8004ad2 <_malloc_r+0xe2>
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	e00f      	b.n	8004aa0 <_malloc_r+0xb0>
 8004a80:	6822      	ldr	r2, [r4, #0]
 8004a82:	1b52      	subs	r2, r2, r5
 8004a84:	d41f      	bmi.n	8004ac6 <_malloc_r+0xd6>
 8004a86:	2a0b      	cmp	r2, #11
 8004a88:	d917      	bls.n	8004aba <_malloc_r+0xca>
 8004a8a:	1961      	adds	r1, r4, r5
 8004a8c:	42a3      	cmp	r3, r4
 8004a8e:	6025      	str	r5, [r4, #0]
 8004a90:	bf18      	it	ne
 8004a92:	6059      	strne	r1, [r3, #4]
 8004a94:	6863      	ldr	r3, [r4, #4]
 8004a96:	bf08      	it	eq
 8004a98:	f8c8 1000 	streq.w	r1, [r8]
 8004a9c:	5162      	str	r2, [r4, r5]
 8004a9e:	604b      	str	r3, [r1, #4]
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	f104 060b 	add.w	r6, r4, #11
 8004aa6:	f000 f829 	bl	8004afc <__malloc_unlock>
 8004aaa:	f026 0607 	bic.w	r6, r6, #7
 8004aae:	1d23      	adds	r3, r4, #4
 8004ab0:	1af2      	subs	r2, r6, r3
 8004ab2:	d0ae      	beq.n	8004a12 <_malloc_r+0x22>
 8004ab4:	1b9b      	subs	r3, r3, r6
 8004ab6:	50a3      	str	r3, [r4, r2]
 8004ab8:	e7ab      	b.n	8004a12 <_malloc_r+0x22>
 8004aba:	42a3      	cmp	r3, r4
 8004abc:	6862      	ldr	r2, [r4, #4]
 8004abe:	d1dd      	bne.n	8004a7c <_malloc_r+0x8c>
 8004ac0:	f8c8 2000 	str.w	r2, [r8]
 8004ac4:	e7ec      	b.n	8004aa0 <_malloc_r+0xb0>
 8004ac6:	4623      	mov	r3, r4
 8004ac8:	6864      	ldr	r4, [r4, #4]
 8004aca:	e7ac      	b.n	8004a26 <_malloc_r+0x36>
 8004acc:	4634      	mov	r4, r6
 8004ace:	6876      	ldr	r6, [r6, #4]
 8004ad0:	e7b4      	b.n	8004a3c <_malloc_r+0x4c>
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	e7cc      	b.n	8004a70 <_malloc_r+0x80>
 8004ad6:	230c      	movs	r3, #12
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	4638      	mov	r0, r7
 8004adc:	f000 f80e 	bl	8004afc <__malloc_unlock>
 8004ae0:	e797      	b.n	8004a12 <_malloc_r+0x22>
 8004ae2:	6025      	str	r5, [r4, #0]
 8004ae4:	e7dc      	b.n	8004aa0 <_malloc_r+0xb0>
 8004ae6:	605b      	str	r3, [r3, #4]
 8004ae8:	deff      	udf	#255	; 0xff
 8004aea:	bf00      	nop
 8004aec:	20005f10 	.word	0x20005f10

08004af0 <__malloc_lock>:
 8004af0:	4801      	ldr	r0, [pc, #4]	; (8004af8 <__malloc_lock+0x8>)
 8004af2:	f7ff bee8 	b.w	80048c6 <__retarget_lock_acquire_recursive>
 8004af6:	bf00      	nop
 8004af8:	20005f0c 	.word	0x20005f0c

08004afc <__malloc_unlock>:
 8004afc:	4801      	ldr	r0, [pc, #4]	; (8004b04 <__malloc_unlock+0x8>)
 8004afe:	f7ff bee3 	b.w	80048c8 <__retarget_lock_release_recursive>
 8004b02:	bf00      	nop
 8004b04:	20005f0c 	.word	0x20005f0c

08004b08 <__sflush_r>:
 8004b08:	898a      	ldrh	r2, [r1, #12]
 8004b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b0e:	4605      	mov	r5, r0
 8004b10:	0710      	lsls	r0, r2, #28
 8004b12:	460c      	mov	r4, r1
 8004b14:	d458      	bmi.n	8004bc8 <__sflush_r+0xc0>
 8004b16:	684b      	ldr	r3, [r1, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	dc05      	bgt.n	8004b28 <__sflush_r+0x20>
 8004b1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	dc02      	bgt.n	8004b28 <__sflush_r+0x20>
 8004b22:	2000      	movs	r0, #0
 8004b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b2a:	2e00      	cmp	r6, #0
 8004b2c:	d0f9      	beq.n	8004b22 <__sflush_r+0x1a>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b34:	682f      	ldr	r7, [r5, #0]
 8004b36:	6a21      	ldr	r1, [r4, #32]
 8004b38:	602b      	str	r3, [r5, #0]
 8004b3a:	d032      	beq.n	8004ba2 <__sflush_r+0x9a>
 8004b3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	075a      	lsls	r2, r3, #29
 8004b42:	d505      	bpl.n	8004b50 <__sflush_r+0x48>
 8004b44:	6863      	ldr	r3, [r4, #4]
 8004b46:	1ac0      	subs	r0, r0, r3
 8004b48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b4a:	b10b      	cbz	r3, 8004b50 <__sflush_r+0x48>
 8004b4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b4e:	1ac0      	subs	r0, r0, r3
 8004b50:	2300      	movs	r3, #0
 8004b52:	4602      	mov	r2, r0
 8004b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b56:	6a21      	ldr	r1, [r4, #32]
 8004b58:	4628      	mov	r0, r5
 8004b5a:	47b0      	blx	r6
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	d106      	bne.n	8004b70 <__sflush_r+0x68>
 8004b62:	6829      	ldr	r1, [r5, #0]
 8004b64:	291d      	cmp	r1, #29
 8004b66:	d82b      	bhi.n	8004bc0 <__sflush_r+0xb8>
 8004b68:	4a29      	ldr	r2, [pc, #164]	; (8004c10 <__sflush_r+0x108>)
 8004b6a:	410a      	asrs	r2, r1
 8004b6c:	07d6      	lsls	r6, r2, #31
 8004b6e:	d427      	bmi.n	8004bc0 <__sflush_r+0xb8>
 8004b70:	2200      	movs	r2, #0
 8004b72:	6062      	str	r2, [r4, #4]
 8004b74:	04d9      	lsls	r1, r3, #19
 8004b76:	6922      	ldr	r2, [r4, #16]
 8004b78:	6022      	str	r2, [r4, #0]
 8004b7a:	d504      	bpl.n	8004b86 <__sflush_r+0x7e>
 8004b7c:	1c42      	adds	r2, r0, #1
 8004b7e:	d101      	bne.n	8004b84 <__sflush_r+0x7c>
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	b903      	cbnz	r3, 8004b86 <__sflush_r+0x7e>
 8004b84:	6560      	str	r0, [r4, #84]	; 0x54
 8004b86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b88:	602f      	str	r7, [r5, #0]
 8004b8a:	2900      	cmp	r1, #0
 8004b8c:	d0c9      	beq.n	8004b22 <__sflush_r+0x1a>
 8004b8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b92:	4299      	cmp	r1, r3
 8004b94:	d002      	beq.n	8004b9c <__sflush_r+0x94>
 8004b96:	4628      	mov	r0, r5
 8004b98:	f7ff feb6 	bl	8004908 <_free_r>
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	6360      	str	r0, [r4, #52]	; 0x34
 8004ba0:	e7c0      	b.n	8004b24 <__sflush_r+0x1c>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	47b0      	blx	r6
 8004ba8:	1c41      	adds	r1, r0, #1
 8004baa:	d1c8      	bne.n	8004b3e <__sflush_r+0x36>
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0c5      	beq.n	8004b3e <__sflush_r+0x36>
 8004bb2:	2b1d      	cmp	r3, #29
 8004bb4:	d001      	beq.n	8004bba <__sflush_r+0xb2>
 8004bb6:	2b16      	cmp	r3, #22
 8004bb8:	d101      	bne.n	8004bbe <__sflush_r+0xb6>
 8004bba:	602f      	str	r7, [r5, #0]
 8004bbc:	e7b1      	b.n	8004b22 <__sflush_r+0x1a>
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bc4:	81a3      	strh	r3, [r4, #12]
 8004bc6:	e7ad      	b.n	8004b24 <__sflush_r+0x1c>
 8004bc8:	690f      	ldr	r7, [r1, #16]
 8004bca:	2f00      	cmp	r7, #0
 8004bcc:	d0a9      	beq.n	8004b22 <__sflush_r+0x1a>
 8004bce:	0793      	lsls	r3, r2, #30
 8004bd0:	680e      	ldr	r6, [r1, #0]
 8004bd2:	bf08      	it	eq
 8004bd4:	694b      	ldreq	r3, [r1, #20]
 8004bd6:	600f      	str	r7, [r1, #0]
 8004bd8:	bf18      	it	ne
 8004bda:	2300      	movne	r3, #0
 8004bdc:	eba6 0807 	sub.w	r8, r6, r7
 8004be0:	608b      	str	r3, [r1, #8]
 8004be2:	f1b8 0f00 	cmp.w	r8, #0
 8004be6:	dd9c      	ble.n	8004b22 <__sflush_r+0x1a>
 8004be8:	6a21      	ldr	r1, [r4, #32]
 8004bea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bec:	4643      	mov	r3, r8
 8004bee:	463a      	mov	r2, r7
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	47b0      	blx	r6
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	dc06      	bgt.n	8004c06 <__sflush_r+0xfe>
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bfe:	81a3      	strh	r3, [r4, #12]
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295
 8004c04:	e78e      	b.n	8004b24 <__sflush_r+0x1c>
 8004c06:	4407      	add	r7, r0
 8004c08:	eba8 0800 	sub.w	r8, r8, r0
 8004c0c:	e7e9      	b.n	8004be2 <__sflush_r+0xda>
 8004c0e:	bf00      	nop
 8004c10:	dfbffffe 	.word	0xdfbffffe

08004c14 <_fflush_r>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	690b      	ldr	r3, [r1, #16]
 8004c18:	4605      	mov	r5, r0
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	b913      	cbnz	r3, 8004c24 <_fflush_r+0x10>
 8004c1e:	2500      	movs	r5, #0
 8004c20:	4628      	mov	r0, r5
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	b118      	cbz	r0, 8004c2e <_fflush_r+0x1a>
 8004c26:	6a03      	ldr	r3, [r0, #32]
 8004c28:	b90b      	cbnz	r3, 8004c2e <_fflush_r+0x1a>
 8004c2a:	f7ff fd2d 	bl	8004688 <__sinit>
 8004c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f3      	beq.n	8004c1e <_fflush_r+0xa>
 8004c36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c38:	07d0      	lsls	r0, r2, #31
 8004c3a:	d404      	bmi.n	8004c46 <_fflush_r+0x32>
 8004c3c:	0599      	lsls	r1, r3, #22
 8004c3e:	d402      	bmi.n	8004c46 <_fflush_r+0x32>
 8004c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c42:	f7ff fe40 	bl	80048c6 <__retarget_lock_acquire_recursive>
 8004c46:	4628      	mov	r0, r5
 8004c48:	4621      	mov	r1, r4
 8004c4a:	f7ff ff5d 	bl	8004b08 <__sflush_r>
 8004c4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c50:	07da      	lsls	r2, r3, #31
 8004c52:	4605      	mov	r5, r0
 8004c54:	d4e4      	bmi.n	8004c20 <_fflush_r+0xc>
 8004c56:	89a3      	ldrh	r3, [r4, #12]
 8004c58:	059b      	lsls	r3, r3, #22
 8004c5a:	d4e1      	bmi.n	8004c20 <_fflush_r+0xc>
 8004c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c5e:	f7ff fe33 	bl	80048c8 <__retarget_lock_release_recursive>
 8004c62:	e7dd      	b.n	8004c20 <_fflush_r+0xc>

08004c64 <fiprintf>:
 8004c64:	b40e      	push	{r1, r2, r3}
 8004c66:	b503      	push	{r0, r1, lr}
 8004c68:	4601      	mov	r1, r0
 8004c6a:	ab03      	add	r3, sp, #12
 8004c6c:	4805      	ldr	r0, [pc, #20]	; (8004c84 <fiprintf+0x20>)
 8004c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c72:	6800      	ldr	r0, [r0, #0]
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	f000 f847 	bl	8004d08 <_vfiprintf_r>
 8004c7a:	b002      	add	sp, #8
 8004c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c80:	b003      	add	sp, #12
 8004c82:	4770      	bx	lr
 8004c84:	20000070 	.word	0x20000070

08004c88 <_sbrk_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4d06      	ldr	r5, [pc, #24]	; (8004ca4 <_sbrk_r+0x1c>)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	4604      	mov	r4, r0
 8004c90:	4608      	mov	r0, r1
 8004c92:	602b      	str	r3, [r5, #0]
 8004c94:	f7fd fbd4 	bl	8002440 <_sbrk>
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	d102      	bne.n	8004ca2 <_sbrk_r+0x1a>
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	b103      	cbz	r3, 8004ca2 <_sbrk_r+0x1a>
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	20005f08 	.word	0x20005f08

08004ca8 <abort>:
 8004ca8:	b508      	push	{r3, lr}
 8004caa:	2006      	movs	r0, #6
 8004cac:	f000 fb94 	bl	80053d8 <raise>
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	f7fd fb4d 	bl	8002350 <_exit>

08004cb6 <__sfputc_r>:
 8004cb6:	6893      	ldr	r3, [r2, #8]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	b410      	push	{r4}
 8004cbe:	6093      	str	r3, [r2, #8]
 8004cc0:	da08      	bge.n	8004cd4 <__sfputc_r+0x1e>
 8004cc2:	6994      	ldr	r4, [r2, #24]
 8004cc4:	42a3      	cmp	r3, r4
 8004cc6:	db01      	blt.n	8004ccc <__sfputc_r+0x16>
 8004cc8:	290a      	cmp	r1, #10
 8004cca:	d103      	bne.n	8004cd4 <__sfputc_r+0x1e>
 8004ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cd0:	f000 bac4 	b.w	800525c <__swbuf_r>
 8004cd4:	6813      	ldr	r3, [r2, #0]
 8004cd6:	1c58      	adds	r0, r3, #1
 8004cd8:	6010      	str	r0, [r2, #0]
 8004cda:	7019      	strb	r1, [r3, #0]
 8004cdc:	4608      	mov	r0, r1
 8004cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <__sfputs_r>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	4606      	mov	r6, r0
 8004ce8:	460f      	mov	r7, r1
 8004cea:	4614      	mov	r4, r2
 8004cec:	18d5      	adds	r5, r2, r3
 8004cee:	42ac      	cmp	r4, r5
 8004cf0:	d101      	bne.n	8004cf6 <__sfputs_r+0x12>
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	e007      	b.n	8004d06 <__sfputs_r+0x22>
 8004cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cfa:	463a      	mov	r2, r7
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	f7ff ffda 	bl	8004cb6 <__sfputc_r>
 8004d02:	1c43      	adds	r3, r0, #1
 8004d04:	d1f3      	bne.n	8004cee <__sfputs_r+0xa>
 8004d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d08 <_vfiprintf_r>:
 8004d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d0c:	460d      	mov	r5, r1
 8004d0e:	b09d      	sub	sp, #116	; 0x74
 8004d10:	4614      	mov	r4, r2
 8004d12:	4698      	mov	r8, r3
 8004d14:	4606      	mov	r6, r0
 8004d16:	b118      	cbz	r0, 8004d20 <_vfiprintf_r+0x18>
 8004d18:	6a03      	ldr	r3, [r0, #32]
 8004d1a:	b90b      	cbnz	r3, 8004d20 <_vfiprintf_r+0x18>
 8004d1c:	f7ff fcb4 	bl	8004688 <__sinit>
 8004d20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d22:	07d9      	lsls	r1, r3, #31
 8004d24:	d405      	bmi.n	8004d32 <_vfiprintf_r+0x2a>
 8004d26:	89ab      	ldrh	r3, [r5, #12]
 8004d28:	059a      	lsls	r2, r3, #22
 8004d2a:	d402      	bmi.n	8004d32 <_vfiprintf_r+0x2a>
 8004d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d2e:	f7ff fdca 	bl	80048c6 <__retarget_lock_acquire_recursive>
 8004d32:	89ab      	ldrh	r3, [r5, #12]
 8004d34:	071b      	lsls	r3, r3, #28
 8004d36:	d501      	bpl.n	8004d3c <_vfiprintf_r+0x34>
 8004d38:	692b      	ldr	r3, [r5, #16]
 8004d3a:	b99b      	cbnz	r3, 8004d64 <_vfiprintf_r+0x5c>
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f000 faca 	bl	80052d8 <__swsetup_r>
 8004d44:	b170      	cbz	r0, 8004d64 <_vfiprintf_r+0x5c>
 8004d46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d48:	07dc      	lsls	r4, r3, #31
 8004d4a:	d504      	bpl.n	8004d56 <_vfiprintf_r+0x4e>
 8004d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d50:	b01d      	add	sp, #116	; 0x74
 8004d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d56:	89ab      	ldrh	r3, [r5, #12]
 8004d58:	0598      	lsls	r0, r3, #22
 8004d5a:	d4f7      	bmi.n	8004d4c <_vfiprintf_r+0x44>
 8004d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d5e:	f7ff fdb3 	bl	80048c8 <__retarget_lock_release_recursive>
 8004d62:	e7f3      	b.n	8004d4c <_vfiprintf_r+0x44>
 8004d64:	2300      	movs	r3, #0
 8004d66:	9309      	str	r3, [sp, #36]	; 0x24
 8004d68:	2320      	movs	r3, #32
 8004d6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d72:	2330      	movs	r3, #48	; 0x30
 8004d74:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004f28 <_vfiprintf_r+0x220>
 8004d78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d7c:	f04f 0901 	mov.w	r9, #1
 8004d80:	4623      	mov	r3, r4
 8004d82:	469a      	mov	sl, r3
 8004d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d88:	b10a      	cbz	r2, 8004d8e <_vfiprintf_r+0x86>
 8004d8a:	2a25      	cmp	r2, #37	; 0x25
 8004d8c:	d1f9      	bne.n	8004d82 <_vfiprintf_r+0x7a>
 8004d8e:	ebba 0b04 	subs.w	fp, sl, r4
 8004d92:	d00b      	beq.n	8004dac <_vfiprintf_r+0xa4>
 8004d94:	465b      	mov	r3, fp
 8004d96:	4622      	mov	r2, r4
 8004d98:	4629      	mov	r1, r5
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	f7ff ffa2 	bl	8004ce4 <__sfputs_r>
 8004da0:	3001      	adds	r0, #1
 8004da2:	f000 80a9 	beq.w	8004ef8 <_vfiprintf_r+0x1f0>
 8004da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004da8:	445a      	add	r2, fp
 8004daa:	9209      	str	r2, [sp, #36]	; 0x24
 8004dac:	f89a 3000 	ldrb.w	r3, [sl]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 80a1 	beq.w	8004ef8 <_vfiprintf_r+0x1f0>
 8004db6:	2300      	movs	r3, #0
 8004db8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dc0:	f10a 0a01 	add.w	sl, sl, #1
 8004dc4:	9304      	str	r3, [sp, #16]
 8004dc6:	9307      	str	r3, [sp, #28]
 8004dc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dcc:	931a      	str	r3, [sp, #104]	; 0x68
 8004dce:	4654      	mov	r4, sl
 8004dd0:	2205      	movs	r2, #5
 8004dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd6:	4854      	ldr	r0, [pc, #336]	; (8004f28 <_vfiprintf_r+0x220>)
 8004dd8:	f7fb fa02 	bl	80001e0 <memchr>
 8004ddc:	9a04      	ldr	r2, [sp, #16]
 8004dde:	b9d8      	cbnz	r0, 8004e18 <_vfiprintf_r+0x110>
 8004de0:	06d1      	lsls	r1, r2, #27
 8004de2:	bf44      	itt	mi
 8004de4:	2320      	movmi	r3, #32
 8004de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dea:	0713      	lsls	r3, r2, #28
 8004dec:	bf44      	itt	mi
 8004dee:	232b      	movmi	r3, #43	; 0x2b
 8004df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004df4:	f89a 3000 	ldrb.w	r3, [sl]
 8004df8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dfa:	d015      	beq.n	8004e28 <_vfiprintf_r+0x120>
 8004dfc:	9a07      	ldr	r2, [sp, #28]
 8004dfe:	4654      	mov	r4, sl
 8004e00:	2000      	movs	r0, #0
 8004e02:	f04f 0c0a 	mov.w	ip, #10
 8004e06:	4621      	mov	r1, r4
 8004e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e0c:	3b30      	subs	r3, #48	; 0x30
 8004e0e:	2b09      	cmp	r3, #9
 8004e10:	d94d      	bls.n	8004eae <_vfiprintf_r+0x1a6>
 8004e12:	b1b0      	cbz	r0, 8004e42 <_vfiprintf_r+0x13a>
 8004e14:	9207      	str	r2, [sp, #28]
 8004e16:	e014      	b.n	8004e42 <_vfiprintf_r+0x13a>
 8004e18:	eba0 0308 	sub.w	r3, r0, r8
 8004e1c:	fa09 f303 	lsl.w	r3, r9, r3
 8004e20:	4313      	orrs	r3, r2
 8004e22:	9304      	str	r3, [sp, #16]
 8004e24:	46a2      	mov	sl, r4
 8004e26:	e7d2      	b.n	8004dce <_vfiprintf_r+0xc6>
 8004e28:	9b03      	ldr	r3, [sp, #12]
 8004e2a:	1d19      	adds	r1, r3, #4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	9103      	str	r1, [sp, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bfbb      	ittet	lt
 8004e34:	425b      	neglt	r3, r3
 8004e36:	f042 0202 	orrlt.w	r2, r2, #2
 8004e3a:	9307      	strge	r3, [sp, #28]
 8004e3c:	9307      	strlt	r3, [sp, #28]
 8004e3e:	bfb8      	it	lt
 8004e40:	9204      	strlt	r2, [sp, #16]
 8004e42:	7823      	ldrb	r3, [r4, #0]
 8004e44:	2b2e      	cmp	r3, #46	; 0x2e
 8004e46:	d10c      	bne.n	8004e62 <_vfiprintf_r+0x15a>
 8004e48:	7863      	ldrb	r3, [r4, #1]
 8004e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e4c:	d134      	bne.n	8004eb8 <_vfiprintf_r+0x1b0>
 8004e4e:	9b03      	ldr	r3, [sp, #12]
 8004e50:	1d1a      	adds	r2, r3, #4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	9203      	str	r2, [sp, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	bfb8      	it	lt
 8004e5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e5e:	3402      	adds	r4, #2
 8004e60:	9305      	str	r3, [sp, #20]
 8004e62:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004f38 <_vfiprintf_r+0x230>
 8004e66:	7821      	ldrb	r1, [r4, #0]
 8004e68:	2203      	movs	r2, #3
 8004e6a:	4650      	mov	r0, sl
 8004e6c:	f7fb f9b8 	bl	80001e0 <memchr>
 8004e70:	b138      	cbz	r0, 8004e82 <_vfiprintf_r+0x17a>
 8004e72:	9b04      	ldr	r3, [sp, #16]
 8004e74:	eba0 000a 	sub.w	r0, r0, sl
 8004e78:	2240      	movs	r2, #64	; 0x40
 8004e7a:	4082      	lsls	r2, r0
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	3401      	adds	r4, #1
 8004e80:	9304      	str	r3, [sp, #16]
 8004e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e86:	4829      	ldr	r0, [pc, #164]	; (8004f2c <_vfiprintf_r+0x224>)
 8004e88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e8c:	2206      	movs	r2, #6
 8004e8e:	f7fb f9a7 	bl	80001e0 <memchr>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d03f      	beq.n	8004f16 <_vfiprintf_r+0x20e>
 8004e96:	4b26      	ldr	r3, [pc, #152]	; (8004f30 <_vfiprintf_r+0x228>)
 8004e98:	bb1b      	cbnz	r3, 8004ee2 <_vfiprintf_r+0x1da>
 8004e9a:	9b03      	ldr	r3, [sp, #12]
 8004e9c:	3307      	adds	r3, #7
 8004e9e:	f023 0307 	bic.w	r3, r3, #7
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	9303      	str	r3, [sp, #12]
 8004ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea8:	443b      	add	r3, r7
 8004eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8004eac:	e768      	b.n	8004d80 <_vfiprintf_r+0x78>
 8004eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	e7a6      	b.n	8004e06 <_vfiprintf_r+0xfe>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	3401      	adds	r4, #1
 8004ebc:	9305      	str	r3, [sp, #20]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f04f 0c0a 	mov.w	ip, #10
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eca:	3a30      	subs	r2, #48	; 0x30
 8004ecc:	2a09      	cmp	r2, #9
 8004ece:	d903      	bls.n	8004ed8 <_vfiprintf_r+0x1d0>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0c6      	beq.n	8004e62 <_vfiprintf_r+0x15a>
 8004ed4:	9105      	str	r1, [sp, #20]
 8004ed6:	e7c4      	b.n	8004e62 <_vfiprintf_r+0x15a>
 8004ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004edc:	4604      	mov	r4, r0
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e7f0      	b.n	8004ec4 <_vfiprintf_r+0x1bc>
 8004ee2:	ab03      	add	r3, sp, #12
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	462a      	mov	r2, r5
 8004ee8:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <_vfiprintf_r+0x22c>)
 8004eea:	a904      	add	r1, sp, #16
 8004eec:	4630      	mov	r0, r6
 8004eee:	f3af 8000 	nop.w
 8004ef2:	4607      	mov	r7, r0
 8004ef4:	1c78      	adds	r0, r7, #1
 8004ef6:	d1d6      	bne.n	8004ea6 <_vfiprintf_r+0x19e>
 8004ef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004efa:	07d9      	lsls	r1, r3, #31
 8004efc:	d405      	bmi.n	8004f0a <_vfiprintf_r+0x202>
 8004efe:	89ab      	ldrh	r3, [r5, #12]
 8004f00:	059a      	lsls	r2, r3, #22
 8004f02:	d402      	bmi.n	8004f0a <_vfiprintf_r+0x202>
 8004f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f06:	f7ff fcdf 	bl	80048c8 <__retarget_lock_release_recursive>
 8004f0a:	89ab      	ldrh	r3, [r5, #12]
 8004f0c:	065b      	lsls	r3, r3, #25
 8004f0e:	f53f af1d 	bmi.w	8004d4c <_vfiprintf_r+0x44>
 8004f12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f14:	e71c      	b.n	8004d50 <_vfiprintf_r+0x48>
 8004f16:	ab03      	add	r3, sp, #12
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	462a      	mov	r2, r5
 8004f1c:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <_vfiprintf_r+0x22c>)
 8004f1e:	a904      	add	r1, sp, #16
 8004f20:	4630      	mov	r0, r6
 8004f22:	f000 f879 	bl	8005018 <_printf_i>
 8004f26:	e7e4      	b.n	8004ef2 <_vfiprintf_r+0x1ea>
 8004f28:	08005637 	.word	0x08005637
 8004f2c:	08005641 	.word	0x08005641
 8004f30:	00000000 	.word	0x00000000
 8004f34:	08004ce5 	.word	0x08004ce5
 8004f38:	0800563d 	.word	0x0800563d

08004f3c <_printf_common>:
 8004f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	4616      	mov	r6, r2
 8004f42:	4699      	mov	r9, r3
 8004f44:	688a      	ldr	r2, [r1, #8]
 8004f46:	690b      	ldr	r3, [r1, #16]
 8004f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	bfb8      	it	lt
 8004f50:	4613      	movlt	r3, r2
 8004f52:	6033      	str	r3, [r6, #0]
 8004f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f58:	4607      	mov	r7, r0
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	b10a      	cbz	r2, 8004f62 <_printf_common+0x26>
 8004f5e:	3301      	adds	r3, #1
 8004f60:	6033      	str	r3, [r6, #0]
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	0699      	lsls	r1, r3, #26
 8004f66:	bf42      	ittt	mi
 8004f68:	6833      	ldrmi	r3, [r6, #0]
 8004f6a:	3302      	addmi	r3, #2
 8004f6c:	6033      	strmi	r3, [r6, #0]
 8004f6e:	6825      	ldr	r5, [r4, #0]
 8004f70:	f015 0506 	ands.w	r5, r5, #6
 8004f74:	d106      	bne.n	8004f84 <_printf_common+0x48>
 8004f76:	f104 0a19 	add.w	sl, r4, #25
 8004f7a:	68e3      	ldr	r3, [r4, #12]
 8004f7c:	6832      	ldr	r2, [r6, #0]
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	42ab      	cmp	r3, r5
 8004f82:	dc26      	bgt.n	8004fd2 <_printf_common+0x96>
 8004f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f88:	1e13      	subs	r3, r2, #0
 8004f8a:	6822      	ldr	r2, [r4, #0]
 8004f8c:	bf18      	it	ne
 8004f8e:	2301      	movne	r3, #1
 8004f90:	0692      	lsls	r2, r2, #26
 8004f92:	d42b      	bmi.n	8004fec <_printf_common+0xb0>
 8004f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f98:	4649      	mov	r1, r9
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	47c0      	blx	r8
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d01e      	beq.n	8004fe0 <_printf_common+0xa4>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	6922      	ldr	r2, [r4, #16]
 8004fa6:	f003 0306 	and.w	r3, r3, #6
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	bf02      	ittt	eq
 8004fae:	68e5      	ldreq	r5, [r4, #12]
 8004fb0:	6833      	ldreq	r3, [r6, #0]
 8004fb2:	1aed      	subeq	r5, r5, r3
 8004fb4:	68a3      	ldr	r3, [r4, #8]
 8004fb6:	bf0c      	ite	eq
 8004fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fbc:	2500      	movne	r5, #0
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	bfc4      	itt	gt
 8004fc2:	1a9b      	subgt	r3, r3, r2
 8004fc4:	18ed      	addgt	r5, r5, r3
 8004fc6:	2600      	movs	r6, #0
 8004fc8:	341a      	adds	r4, #26
 8004fca:	42b5      	cmp	r5, r6
 8004fcc:	d11a      	bne.n	8005004 <_printf_common+0xc8>
 8004fce:	2000      	movs	r0, #0
 8004fd0:	e008      	b.n	8004fe4 <_printf_common+0xa8>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	4652      	mov	r2, sl
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	4638      	mov	r0, r7
 8004fda:	47c0      	blx	r8
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d103      	bne.n	8004fe8 <_printf_common+0xac>
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe8:	3501      	adds	r5, #1
 8004fea:	e7c6      	b.n	8004f7a <_printf_common+0x3e>
 8004fec:	18e1      	adds	r1, r4, r3
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	2030      	movs	r0, #48	; 0x30
 8004ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ff6:	4422      	add	r2, r4
 8004ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005000:	3302      	adds	r3, #2
 8005002:	e7c7      	b.n	8004f94 <_printf_common+0x58>
 8005004:	2301      	movs	r3, #1
 8005006:	4622      	mov	r2, r4
 8005008:	4649      	mov	r1, r9
 800500a:	4638      	mov	r0, r7
 800500c:	47c0      	blx	r8
 800500e:	3001      	adds	r0, #1
 8005010:	d0e6      	beq.n	8004fe0 <_printf_common+0xa4>
 8005012:	3601      	adds	r6, #1
 8005014:	e7d9      	b.n	8004fca <_printf_common+0x8e>
	...

08005018 <_printf_i>:
 8005018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800501c:	7e0f      	ldrb	r7, [r1, #24]
 800501e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005020:	2f78      	cmp	r7, #120	; 0x78
 8005022:	4691      	mov	r9, r2
 8005024:	4680      	mov	r8, r0
 8005026:	460c      	mov	r4, r1
 8005028:	469a      	mov	sl, r3
 800502a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800502e:	d807      	bhi.n	8005040 <_printf_i+0x28>
 8005030:	2f62      	cmp	r7, #98	; 0x62
 8005032:	d80a      	bhi.n	800504a <_printf_i+0x32>
 8005034:	2f00      	cmp	r7, #0
 8005036:	f000 80d4 	beq.w	80051e2 <_printf_i+0x1ca>
 800503a:	2f58      	cmp	r7, #88	; 0x58
 800503c:	f000 80c0 	beq.w	80051c0 <_printf_i+0x1a8>
 8005040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005048:	e03a      	b.n	80050c0 <_printf_i+0xa8>
 800504a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800504e:	2b15      	cmp	r3, #21
 8005050:	d8f6      	bhi.n	8005040 <_printf_i+0x28>
 8005052:	a101      	add	r1, pc, #4	; (adr r1, 8005058 <_printf_i+0x40>)
 8005054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005058:	080050b1 	.word	0x080050b1
 800505c:	080050c5 	.word	0x080050c5
 8005060:	08005041 	.word	0x08005041
 8005064:	08005041 	.word	0x08005041
 8005068:	08005041 	.word	0x08005041
 800506c:	08005041 	.word	0x08005041
 8005070:	080050c5 	.word	0x080050c5
 8005074:	08005041 	.word	0x08005041
 8005078:	08005041 	.word	0x08005041
 800507c:	08005041 	.word	0x08005041
 8005080:	08005041 	.word	0x08005041
 8005084:	080051c9 	.word	0x080051c9
 8005088:	080050f1 	.word	0x080050f1
 800508c:	08005183 	.word	0x08005183
 8005090:	08005041 	.word	0x08005041
 8005094:	08005041 	.word	0x08005041
 8005098:	080051eb 	.word	0x080051eb
 800509c:	08005041 	.word	0x08005041
 80050a0:	080050f1 	.word	0x080050f1
 80050a4:	08005041 	.word	0x08005041
 80050a8:	08005041 	.word	0x08005041
 80050ac:	0800518b 	.word	0x0800518b
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	1d1a      	adds	r2, r3, #4
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	602a      	str	r2, [r5, #0]
 80050b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050c0:	2301      	movs	r3, #1
 80050c2:	e09f      	b.n	8005204 <_printf_i+0x1ec>
 80050c4:	6820      	ldr	r0, [r4, #0]
 80050c6:	682b      	ldr	r3, [r5, #0]
 80050c8:	0607      	lsls	r7, r0, #24
 80050ca:	f103 0104 	add.w	r1, r3, #4
 80050ce:	6029      	str	r1, [r5, #0]
 80050d0:	d501      	bpl.n	80050d6 <_printf_i+0xbe>
 80050d2:	681e      	ldr	r6, [r3, #0]
 80050d4:	e003      	b.n	80050de <_printf_i+0xc6>
 80050d6:	0646      	lsls	r6, r0, #25
 80050d8:	d5fb      	bpl.n	80050d2 <_printf_i+0xba>
 80050da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80050de:	2e00      	cmp	r6, #0
 80050e0:	da03      	bge.n	80050ea <_printf_i+0xd2>
 80050e2:	232d      	movs	r3, #45	; 0x2d
 80050e4:	4276      	negs	r6, r6
 80050e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ea:	485a      	ldr	r0, [pc, #360]	; (8005254 <_printf_i+0x23c>)
 80050ec:	230a      	movs	r3, #10
 80050ee:	e012      	b.n	8005116 <_printf_i+0xfe>
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	6820      	ldr	r0, [r4, #0]
 80050f4:	1d19      	adds	r1, r3, #4
 80050f6:	6029      	str	r1, [r5, #0]
 80050f8:	0605      	lsls	r5, r0, #24
 80050fa:	d501      	bpl.n	8005100 <_printf_i+0xe8>
 80050fc:	681e      	ldr	r6, [r3, #0]
 80050fe:	e002      	b.n	8005106 <_printf_i+0xee>
 8005100:	0641      	lsls	r1, r0, #25
 8005102:	d5fb      	bpl.n	80050fc <_printf_i+0xe4>
 8005104:	881e      	ldrh	r6, [r3, #0]
 8005106:	4853      	ldr	r0, [pc, #332]	; (8005254 <_printf_i+0x23c>)
 8005108:	2f6f      	cmp	r7, #111	; 0x6f
 800510a:	bf0c      	ite	eq
 800510c:	2308      	moveq	r3, #8
 800510e:	230a      	movne	r3, #10
 8005110:	2100      	movs	r1, #0
 8005112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005116:	6865      	ldr	r5, [r4, #4]
 8005118:	60a5      	str	r5, [r4, #8]
 800511a:	2d00      	cmp	r5, #0
 800511c:	bfa2      	ittt	ge
 800511e:	6821      	ldrge	r1, [r4, #0]
 8005120:	f021 0104 	bicge.w	r1, r1, #4
 8005124:	6021      	strge	r1, [r4, #0]
 8005126:	b90e      	cbnz	r6, 800512c <_printf_i+0x114>
 8005128:	2d00      	cmp	r5, #0
 800512a:	d04b      	beq.n	80051c4 <_printf_i+0x1ac>
 800512c:	4615      	mov	r5, r2
 800512e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005132:	fb03 6711 	mls	r7, r3, r1, r6
 8005136:	5dc7      	ldrb	r7, [r0, r7]
 8005138:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800513c:	4637      	mov	r7, r6
 800513e:	42bb      	cmp	r3, r7
 8005140:	460e      	mov	r6, r1
 8005142:	d9f4      	bls.n	800512e <_printf_i+0x116>
 8005144:	2b08      	cmp	r3, #8
 8005146:	d10b      	bne.n	8005160 <_printf_i+0x148>
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	07de      	lsls	r6, r3, #31
 800514c:	d508      	bpl.n	8005160 <_printf_i+0x148>
 800514e:	6923      	ldr	r3, [r4, #16]
 8005150:	6861      	ldr	r1, [r4, #4]
 8005152:	4299      	cmp	r1, r3
 8005154:	bfde      	ittt	le
 8005156:	2330      	movle	r3, #48	; 0x30
 8005158:	f805 3c01 	strble.w	r3, [r5, #-1]
 800515c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005160:	1b52      	subs	r2, r2, r5
 8005162:	6122      	str	r2, [r4, #16]
 8005164:	f8cd a000 	str.w	sl, [sp]
 8005168:	464b      	mov	r3, r9
 800516a:	aa03      	add	r2, sp, #12
 800516c:	4621      	mov	r1, r4
 800516e:	4640      	mov	r0, r8
 8005170:	f7ff fee4 	bl	8004f3c <_printf_common>
 8005174:	3001      	adds	r0, #1
 8005176:	d14a      	bne.n	800520e <_printf_i+0x1f6>
 8005178:	f04f 30ff 	mov.w	r0, #4294967295
 800517c:	b004      	add	sp, #16
 800517e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	f043 0320 	orr.w	r3, r3, #32
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	4833      	ldr	r0, [pc, #204]	; (8005258 <_printf_i+0x240>)
 800518c:	2778      	movs	r7, #120	; 0x78
 800518e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	6829      	ldr	r1, [r5, #0]
 8005196:	061f      	lsls	r7, r3, #24
 8005198:	f851 6b04 	ldr.w	r6, [r1], #4
 800519c:	d402      	bmi.n	80051a4 <_printf_i+0x18c>
 800519e:	065f      	lsls	r7, r3, #25
 80051a0:	bf48      	it	mi
 80051a2:	b2b6      	uxthmi	r6, r6
 80051a4:	07df      	lsls	r7, r3, #31
 80051a6:	bf48      	it	mi
 80051a8:	f043 0320 	orrmi.w	r3, r3, #32
 80051ac:	6029      	str	r1, [r5, #0]
 80051ae:	bf48      	it	mi
 80051b0:	6023      	strmi	r3, [r4, #0]
 80051b2:	b91e      	cbnz	r6, 80051bc <_printf_i+0x1a4>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	f023 0320 	bic.w	r3, r3, #32
 80051ba:	6023      	str	r3, [r4, #0]
 80051bc:	2310      	movs	r3, #16
 80051be:	e7a7      	b.n	8005110 <_printf_i+0xf8>
 80051c0:	4824      	ldr	r0, [pc, #144]	; (8005254 <_printf_i+0x23c>)
 80051c2:	e7e4      	b.n	800518e <_printf_i+0x176>
 80051c4:	4615      	mov	r5, r2
 80051c6:	e7bd      	b.n	8005144 <_printf_i+0x12c>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	6826      	ldr	r6, [r4, #0]
 80051cc:	6961      	ldr	r1, [r4, #20]
 80051ce:	1d18      	adds	r0, r3, #4
 80051d0:	6028      	str	r0, [r5, #0]
 80051d2:	0635      	lsls	r5, r6, #24
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	d501      	bpl.n	80051dc <_printf_i+0x1c4>
 80051d8:	6019      	str	r1, [r3, #0]
 80051da:	e002      	b.n	80051e2 <_printf_i+0x1ca>
 80051dc:	0670      	lsls	r0, r6, #25
 80051de:	d5fb      	bpl.n	80051d8 <_printf_i+0x1c0>
 80051e0:	8019      	strh	r1, [r3, #0]
 80051e2:	2300      	movs	r3, #0
 80051e4:	6123      	str	r3, [r4, #16]
 80051e6:	4615      	mov	r5, r2
 80051e8:	e7bc      	b.n	8005164 <_printf_i+0x14c>
 80051ea:	682b      	ldr	r3, [r5, #0]
 80051ec:	1d1a      	adds	r2, r3, #4
 80051ee:	602a      	str	r2, [r5, #0]
 80051f0:	681d      	ldr	r5, [r3, #0]
 80051f2:	6862      	ldr	r2, [r4, #4]
 80051f4:	2100      	movs	r1, #0
 80051f6:	4628      	mov	r0, r5
 80051f8:	f7fa fff2 	bl	80001e0 <memchr>
 80051fc:	b108      	cbz	r0, 8005202 <_printf_i+0x1ea>
 80051fe:	1b40      	subs	r0, r0, r5
 8005200:	6060      	str	r0, [r4, #4]
 8005202:	6863      	ldr	r3, [r4, #4]
 8005204:	6123      	str	r3, [r4, #16]
 8005206:	2300      	movs	r3, #0
 8005208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800520c:	e7aa      	b.n	8005164 <_printf_i+0x14c>
 800520e:	6923      	ldr	r3, [r4, #16]
 8005210:	462a      	mov	r2, r5
 8005212:	4649      	mov	r1, r9
 8005214:	4640      	mov	r0, r8
 8005216:	47d0      	blx	sl
 8005218:	3001      	adds	r0, #1
 800521a:	d0ad      	beq.n	8005178 <_printf_i+0x160>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	079b      	lsls	r3, r3, #30
 8005220:	d413      	bmi.n	800524a <_printf_i+0x232>
 8005222:	68e0      	ldr	r0, [r4, #12]
 8005224:	9b03      	ldr	r3, [sp, #12]
 8005226:	4298      	cmp	r0, r3
 8005228:	bfb8      	it	lt
 800522a:	4618      	movlt	r0, r3
 800522c:	e7a6      	b.n	800517c <_printf_i+0x164>
 800522e:	2301      	movs	r3, #1
 8005230:	4632      	mov	r2, r6
 8005232:	4649      	mov	r1, r9
 8005234:	4640      	mov	r0, r8
 8005236:	47d0      	blx	sl
 8005238:	3001      	adds	r0, #1
 800523a:	d09d      	beq.n	8005178 <_printf_i+0x160>
 800523c:	3501      	adds	r5, #1
 800523e:	68e3      	ldr	r3, [r4, #12]
 8005240:	9903      	ldr	r1, [sp, #12]
 8005242:	1a5b      	subs	r3, r3, r1
 8005244:	42ab      	cmp	r3, r5
 8005246:	dcf2      	bgt.n	800522e <_printf_i+0x216>
 8005248:	e7eb      	b.n	8005222 <_printf_i+0x20a>
 800524a:	2500      	movs	r5, #0
 800524c:	f104 0619 	add.w	r6, r4, #25
 8005250:	e7f5      	b.n	800523e <_printf_i+0x226>
 8005252:	bf00      	nop
 8005254:	08005648 	.word	0x08005648
 8005258:	08005659 	.word	0x08005659

0800525c <__swbuf_r>:
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	460e      	mov	r6, r1
 8005260:	4614      	mov	r4, r2
 8005262:	4605      	mov	r5, r0
 8005264:	b118      	cbz	r0, 800526e <__swbuf_r+0x12>
 8005266:	6a03      	ldr	r3, [r0, #32]
 8005268:	b90b      	cbnz	r3, 800526e <__swbuf_r+0x12>
 800526a:	f7ff fa0d 	bl	8004688 <__sinit>
 800526e:	69a3      	ldr	r3, [r4, #24]
 8005270:	60a3      	str	r3, [r4, #8]
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	071a      	lsls	r2, r3, #28
 8005276:	d525      	bpl.n	80052c4 <__swbuf_r+0x68>
 8005278:	6923      	ldr	r3, [r4, #16]
 800527a:	b31b      	cbz	r3, 80052c4 <__swbuf_r+0x68>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	6922      	ldr	r2, [r4, #16]
 8005280:	1a98      	subs	r0, r3, r2
 8005282:	6963      	ldr	r3, [r4, #20]
 8005284:	b2f6      	uxtb	r6, r6
 8005286:	4283      	cmp	r3, r0
 8005288:	4637      	mov	r7, r6
 800528a:	dc04      	bgt.n	8005296 <__swbuf_r+0x3a>
 800528c:	4621      	mov	r1, r4
 800528e:	4628      	mov	r0, r5
 8005290:	f7ff fcc0 	bl	8004c14 <_fflush_r>
 8005294:	b9e0      	cbnz	r0, 80052d0 <__swbuf_r+0x74>
 8005296:	68a3      	ldr	r3, [r4, #8]
 8005298:	3b01      	subs	r3, #1
 800529a:	60a3      	str	r3, [r4, #8]
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	6022      	str	r2, [r4, #0]
 80052a2:	701e      	strb	r6, [r3, #0]
 80052a4:	6962      	ldr	r2, [r4, #20]
 80052a6:	1c43      	adds	r3, r0, #1
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d004      	beq.n	80052b6 <__swbuf_r+0x5a>
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	07db      	lsls	r3, r3, #31
 80052b0:	d506      	bpl.n	80052c0 <__swbuf_r+0x64>
 80052b2:	2e0a      	cmp	r6, #10
 80052b4:	d104      	bne.n	80052c0 <__swbuf_r+0x64>
 80052b6:	4621      	mov	r1, r4
 80052b8:	4628      	mov	r0, r5
 80052ba:	f7ff fcab 	bl	8004c14 <_fflush_r>
 80052be:	b938      	cbnz	r0, 80052d0 <__swbuf_r+0x74>
 80052c0:	4638      	mov	r0, r7
 80052c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052c4:	4621      	mov	r1, r4
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 f806 	bl	80052d8 <__swsetup_r>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d0d5      	beq.n	800527c <__swbuf_r+0x20>
 80052d0:	f04f 37ff 	mov.w	r7, #4294967295
 80052d4:	e7f4      	b.n	80052c0 <__swbuf_r+0x64>
	...

080052d8 <__swsetup_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <__swsetup_r+0xac>)
 80052dc:	4605      	mov	r5, r0
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	460c      	mov	r4, r1
 80052e2:	b118      	cbz	r0, 80052ec <__swsetup_r+0x14>
 80052e4:	6a03      	ldr	r3, [r0, #32]
 80052e6:	b90b      	cbnz	r3, 80052ec <__swsetup_r+0x14>
 80052e8:	f7ff f9ce 	bl	8004688 <__sinit>
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052f2:	0718      	lsls	r0, r3, #28
 80052f4:	d422      	bmi.n	800533c <__swsetup_r+0x64>
 80052f6:	06d9      	lsls	r1, r3, #27
 80052f8:	d407      	bmi.n	800530a <__swsetup_r+0x32>
 80052fa:	2309      	movs	r3, #9
 80052fc:	602b      	str	r3, [r5, #0]
 80052fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005302:	81a3      	strh	r3, [r4, #12]
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	e034      	b.n	8005374 <__swsetup_r+0x9c>
 800530a:	0758      	lsls	r0, r3, #29
 800530c:	d512      	bpl.n	8005334 <__swsetup_r+0x5c>
 800530e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005310:	b141      	cbz	r1, 8005324 <__swsetup_r+0x4c>
 8005312:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005316:	4299      	cmp	r1, r3
 8005318:	d002      	beq.n	8005320 <__swsetup_r+0x48>
 800531a:	4628      	mov	r0, r5
 800531c:	f7ff faf4 	bl	8004908 <_free_r>
 8005320:	2300      	movs	r3, #0
 8005322:	6363      	str	r3, [r4, #52]	; 0x34
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	2300      	movs	r3, #0
 800532e:	6063      	str	r3, [r4, #4]
 8005330:	6923      	ldr	r3, [r4, #16]
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	89a3      	ldrh	r3, [r4, #12]
 8005336:	f043 0308 	orr.w	r3, r3, #8
 800533a:	81a3      	strh	r3, [r4, #12]
 800533c:	6923      	ldr	r3, [r4, #16]
 800533e:	b94b      	cbnz	r3, 8005354 <__swsetup_r+0x7c>
 8005340:	89a3      	ldrh	r3, [r4, #12]
 8005342:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800534a:	d003      	beq.n	8005354 <__swsetup_r+0x7c>
 800534c:	4621      	mov	r1, r4
 800534e:	4628      	mov	r0, r5
 8005350:	f000 f884 	bl	800545c <__smakebuf_r>
 8005354:	89a0      	ldrh	r0, [r4, #12]
 8005356:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800535a:	f010 0301 	ands.w	r3, r0, #1
 800535e:	d00a      	beq.n	8005376 <__swsetup_r+0x9e>
 8005360:	2300      	movs	r3, #0
 8005362:	60a3      	str	r3, [r4, #8]
 8005364:	6963      	ldr	r3, [r4, #20]
 8005366:	425b      	negs	r3, r3
 8005368:	61a3      	str	r3, [r4, #24]
 800536a:	6923      	ldr	r3, [r4, #16]
 800536c:	b943      	cbnz	r3, 8005380 <__swsetup_r+0xa8>
 800536e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005372:	d1c4      	bne.n	80052fe <__swsetup_r+0x26>
 8005374:	bd38      	pop	{r3, r4, r5, pc}
 8005376:	0781      	lsls	r1, r0, #30
 8005378:	bf58      	it	pl
 800537a:	6963      	ldrpl	r3, [r4, #20]
 800537c:	60a3      	str	r3, [r4, #8]
 800537e:	e7f4      	b.n	800536a <__swsetup_r+0x92>
 8005380:	2000      	movs	r0, #0
 8005382:	e7f7      	b.n	8005374 <__swsetup_r+0x9c>
 8005384:	20000070 	.word	0x20000070

08005388 <_raise_r>:
 8005388:	291f      	cmp	r1, #31
 800538a:	b538      	push	{r3, r4, r5, lr}
 800538c:	4604      	mov	r4, r0
 800538e:	460d      	mov	r5, r1
 8005390:	d904      	bls.n	800539c <_raise_r+0x14>
 8005392:	2316      	movs	r3, #22
 8005394:	6003      	str	r3, [r0, #0]
 8005396:	f04f 30ff 	mov.w	r0, #4294967295
 800539a:	bd38      	pop	{r3, r4, r5, pc}
 800539c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800539e:	b112      	cbz	r2, 80053a6 <_raise_r+0x1e>
 80053a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80053a4:	b94b      	cbnz	r3, 80053ba <_raise_r+0x32>
 80053a6:	4620      	mov	r0, r4
 80053a8:	f000 f830 	bl	800540c <_getpid_r>
 80053ac:	462a      	mov	r2, r5
 80053ae:	4601      	mov	r1, r0
 80053b0:	4620      	mov	r0, r4
 80053b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053b6:	f000 b817 	b.w	80053e8 <_kill_r>
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d00a      	beq.n	80053d4 <_raise_r+0x4c>
 80053be:	1c59      	adds	r1, r3, #1
 80053c0:	d103      	bne.n	80053ca <_raise_r+0x42>
 80053c2:	2316      	movs	r3, #22
 80053c4:	6003      	str	r3, [r0, #0]
 80053c6:	2001      	movs	r0, #1
 80053c8:	e7e7      	b.n	800539a <_raise_r+0x12>
 80053ca:	2400      	movs	r4, #0
 80053cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80053d0:	4628      	mov	r0, r5
 80053d2:	4798      	blx	r3
 80053d4:	2000      	movs	r0, #0
 80053d6:	e7e0      	b.n	800539a <_raise_r+0x12>

080053d8 <raise>:
 80053d8:	4b02      	ldr	r3, [pc, #8]	; (80053e4 <raise+0xc>)
 80053da:	4601      	mov	r1, r0
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	f7ff bfd3 	b.w	8005388 <_raise_r>
 80053e2:	bf00      	nop
 80053e4:	20000070 	.word	0x20000070

080053e8 <_kill_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4d07      	ldr	r5, [pc, #28]	; (8005408 <_kill_r+0x20>)
 80053ec:	2300      	movs	r3, #0
 80053ee:	4604      	mov	r4, r0
 80053f0:	4608      	mov	r0, r1
 80053f2:	4611      	mov	r1, r2
 80053f4:	602b      	str	r3, [r5, #0]
 80053f6:	f7fc ff9b 	bl	8002330 <_kill>
 80053fa:	1c43      	adds	r3, r0, #1
 80053fc:	d102      	bne.n	8005404 <_kill_r+0x1c>
 80053fe:	682b      	ldr	r3, [r5, #0]
 8005400:	b103      	cbz	r3, 8005404 <_kill_r+0x1c>
 8005402:	6023      	str	r3, [r4, #0]
 8005404:	bd38      	pop	{r3, r4, r5, pc}
 8005406:	bf00      	nop
 8005408:	20005f08 	.word	0x20005f08

0800540c <_getpid_r>:
 800540c:	f7fc bf88 	b.w	8002320 <_getpid>

08005410 <__swhatbuf_r>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	460c      	mov	r4, r1
 8005414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005418:	2900      	cmp	r1, #0
 800541a:	b096      	sub	sp, #88	; 0x58
 800541c:	4615      	mov	r5, r2
 800541e:	461e      	mov	r6, r3
 8005420:	da0d      	bge.n	800543e <__swhatbuf_r+0x2e>
 8005422:	89a3      	ldrh	r3, [r4, #12]
 8005424:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005428:	f04f 0100 	mov.w	r1, #0
 800542c:	bf0c      	ite	eq
 800542e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005432:	2340      	movne	r3, #64	; 0x40
 8005434:	2000      	movs	r0, #0
 8005436:	6031      	str	r1, [r6, #0]
 8005438:	602b      	str	r3, [r5, #0]
 800543a:	b016      	add	sp, #88	; 0x58
 800543c:	bd70      	pop	{r4, r5, r6, pc}
 800543e:	466a      	mov	r2, sp
 8005440:	f000 f848 	bl	80054d4 <_fstat_r>
 8005444:	2800      	cmp	r0, #0
 8005446:	dbec      	blt.n	8005422 <__swhatbuf_r+0x12>
 8005448:	9901      	ldr	r1, [sp, #4]
 800544a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800544e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005452:	4259      	negs	r1, r3
 8005454:	4159      	adcs	r1, r3
 8005456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800545a:	e7eb      	b.n	8005434 <__swhatbuf_r+0x24>

0800545c <__smakebuf_r>:
 800545c:	898b      	ldrh	r3, [r1, #12]
 800545e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005460:	079d      	lsls	r5, r3, #30
 8005462:	4606      	mov	r6, r0
 8005464:	460c      	mov	r4, r1
 8005466:	d507      	bpl.n	8005478 <__smakebuf_r+0x1c>
 8005468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	6123      	str	r3, [r4, #16]
 8005470:	2301      	movs	r3, #1
 8005472:	6163      	str	r3, [r4, #20]
 8005474:	b002      	add	sp, #8
 8005476:	bd70      	pop	{r4, r5, r6, pc}
 8005478:	ab01      	add	r3, sp, #4
 800547a:	466a      	mov	r2, sp
 800547c:	f7ff ffc8 	bl	8005410 <__swhatbuf_r>
 8005480:	9900      	ldr	r1, [sp, #0]
 8005482:	4605      	mov	r5, r0
 8005484:	4630      	mov	r0, r6
 8005486:	f7ff fab3 	bl	80049f0 <_malloc_r>
 800548a:	b948      	cbnz	r0, 80054a0 <__smakebuf_r+0x44>
 800548c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005490:	059a      	lsls	r2, r3, #22
 8005492:	d4ef      	bmi.n	8005474 <__smakebuf_r+0x18>
 8005494:	f023 0303 	bic.w	r3, r3, #3
 8005498:	f043 0302 	orr.w	r3, r3, #2
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	e7e3      	b.n	8005468 <__smakebuf_r+0xc>
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	6020      	str	r0, [r4, #0]
 80054a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a8:	81a3      	strh	r3, [r4, #12]
 80054aa:	9b00      	ldr	r3, [sp, #0]
 80054ac:	6163      	str	r3, [r4, #20]
 80054ae:	9b01      	ldr	r3, [sp, #4]
 80054b0:	6120      	str	r0, [r4, #16]
 80054b2:	b15b      	cbz	r3, 80054cc <__smakebuf_r+0x70>
 80054b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054b8:	4630      	mov	r0, r6
 80054ba:	f000 f81d 	bl	80054f8 <_isatty_r>
 80054be:	b128      	cbz	r0, 80054cc <__smakebuf_r+0x70>
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	f023 0303 	bic.w	r3, r3, #3
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	81a3      	strh	r3, [r4, #12]
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	431d      	orrs	r5, r3
 80054d0:	81a5      	strh	r5, [r4, #12]
 80054d2:	e7cf      	b.n	8005474 <__smakebuf_r+0x18>

080054d4 <_fstat_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4d07      	ldr	r5, [pc, #28]	; (80054f4 <_fstat_r+0x20>)
 80054d8:	2300      	movs	r3, #0
 80054da:	4604      	mov	r4, r0
 80054dc:	4608      	mov	r0, r1
 80054de:	4611      	mov	r1, r2
 80054e0:	602b      	str	r3, [r5, #0]
 80054e2:	f7fc ff84 	bl	80023ee <_fstat>
 80054e6:	1c43      	adds	r3, r0, #1
 80054e8:	d102      	bne.n	80054f0 <_fstat_r+0x1c>
 80054ea:	682b      	ldr	r3, [r5, #0]
 80054ec:	b103      	cbz	r3, 80054f0 <_fstat_r+0x1c>
 80054ee:	6023      	str	r3, [r4, #0]
 80054f0:	bd38      	pop	{r3, r4, r5, pc}
 80054f2:	bf00      	nop
 80054f4:	20005f08 	.word	0x20005f08

080054f8 <_isatty_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4d06      	ldr	r5, [pc, #24]	; (8005514 <_isatty_r+0x1c>)
 80054fc:	2300      	movs	r3, #0
 80054fe:	4604      	mov	r4, r0
 8005500:	4608      	mov	r0, r1
 8005502:	602b      	str	r3, [r5, #0]
 8005504:	f7fc ff83 	bl	800240e <_isatty>
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	d102      	bne.n	8005512 <_isatty_r+0x1a>
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	b103      	cbz	r3, 8005512 <_isatty_r+0x1a>
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	bd38      	pop	{r3, r4, r5, pc}
 8005514:	20005f08 	.word	0x20005f08

08005518 <_gettimeofday>:
 8005518:	4b02      	ldr	r3, [pc, #8]	; (8005524 <_gettimeofday+0xc>)
 800551a:	2258      	movs	r2, #88	; 0x58
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	f04f 30ff 	mov.w	r0, #4294967295
 8005522:	4770      	bx	lr
 8005524:	20005f08 	.word	0x20005f08

08005528 <_init>:
 8005528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552a:	bf00      	nop
 800552c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800552e:	bc08      	pop	{r3}
 8005530:	469e      	mov	lr, r3
 8005532:	4770      	bx	lr

08005534 <_fini>:
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005536:	bf00      	nop
 8005538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553a:	bc08      	pop	{r3}
 800553c:	469e      	mov	lr, r3
 800553e:	4770      	bx	lr
