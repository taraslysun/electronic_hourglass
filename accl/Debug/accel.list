
accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002fc8  08002fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800302c  0800302c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800302c  0800302c  0001302c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003034  08003034  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003034  08003034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003038  08003038  00013038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800303c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000068  080030a4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  080030a4  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007657  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016d3  00000000  00000000  00027732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  00028e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000064d  00000000  00000000  00029658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000164e1  00000000  00000000  00029ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ec6  00000000  00000000  00040186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087dc2  00000000  00000000  0004a04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028d4  00000000  00000000  000d1e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000d46e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002fb0 	.word	0x08002fb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002fb0 	.word	0x08002fb0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <I2CStartRestart>:
// See page 21 of the LSM303DLHC datasheet for more info about these values
#define ACCELEROMETER_READ  0x33
#define ACCELEROMETER_WRITE 0x32

void I2CStartRestart()
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	// See page 493 of ST's RM0383.  We're in master mode, this will start/restart
	// I2C communication.
	ACCESS(I2C1_CR1) |= (1 << 8);
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <I2CStartRestart+0x1c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <I2CStartRestart+0x1c>)
 8000586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800058a:	6013      	str	r3, [r2, #0]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40005400 	.word	0x40005400

0800059c <I2CStop>:

void I2CStop()
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
	// See page 493 of ST's RM0383.  We're in master mode, so setting this bit will
	// "stop generation after the current byte transfer or after the current Start
	// condition is sent".
	ACCESS(I2C1_CR1) |= (1 << 9);
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <I2CStop+0x1c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <I2CStop+0x1c>)
 80005a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40005400 	.word	0x40005400

080005bc <I2CEnableAcknowledge>:

void I2CEnableAcknowledge()
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
	// See page 493 of ST's RM0383.  Setting this bit will "acknowledge returned
	// after a byte is received".  The accelerometer will acknowledge when a byte
	// is received.
	ACCESS(I2C1_CR1) |= (1 << 10);
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <I2CEnableAcknowledge+0x1c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <I2CEnableAcknowledge+0x1c>)
 80005c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40005400 	.word	0x40005400

080005dc <I2CDisableAcknowledge>:

void I2CDisableAcknowledge()
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	// See page 493 of ST's RM0383.  We turn acknowledge off here.
	ACCESS(I2C1_CR1) &= ~(1 << 10);
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <I2CDisableAcknowledge+0x1c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <I2CDisableAcknowledge+0x1c>)
 80005e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005ea:	6013      	str	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40005400 	.word	0x40005400

080005fc <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(unsigned short address)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]
	// See page 500.  We wait for the start bit to be generated.
	while((ACCESS(I2C1_SR1) & 1) == 0);
 8000606:	bf00      	nop
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <I2CSendSlaveAddress+0x40>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0f9      	beq.n	8000608 <I2CSendSlaveAddress+0xc>

	// Write the address into the I2C data register.
	ACCESS(I2C1_DR) = address;
 8000614:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <I2CSendSlaveAddress+0x44>)
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	6013      	str	r3, [r2, #0]

	// See page 500.  Wait until the end of transmission.
	while((ACCESS(I2C1_SR1) & (1 << 1)) == 0);
 800061a:	bf00      	nop
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <I2CSendSlaveAddress+0x40>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f003 0302 	and.w	r3, r3, #2
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0f9      	beq.n	800061c <I2CSendSlaveAddress+0x20>

	// See page 500 of the datasheet, under bit 1 ADDR: "This bit is cleared by software
	// reading SR1 register followed reading SR2"
	ACCESS(I2C1_SR1);
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <I2CSendSlaveAddress+0x40>)
 800062a:	681b      	ldr	r3, [r3, #0]
	ACCESS(I2C1_SR2);
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <I2CSendSlaveAddress+0x48>)
 800062e:	681b      	ldr	r3, [r3, #0]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40005414 	.word	0x40005414
 8000640:	40005410 	.word	0x40005410
 8000644:	40005418 	.word	0x40005418

08000648 <I2CSendRegister>:

void I2CSendRegister(unsigned short registerAddress)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	80fb      	strh	r3, [r7, #6]
	// See page 499. We wait until the Tx data register is empty.
	while((ACCESS(I2C1_SR1) & (1 << 7)) == 0);
 8000652:	bf00      	nop
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <I2CSendRegister+0x3c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0f9      	beq.n	8000654 <I2CSendRegister+0xc>

	// Put the register address into the data register
	ACCESS(I2C1_DR) = registerAddress;
 8000660:	4a09      	ldr	r2, [pc, #36]	; (8000688 <I2CSendRegister+0x40>)
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	6013      	str	r3, [r2, #0]

	// Wait until the transfer is complete.
	while((ACCESS(I2C1_SR1) & (1 << 7)) == 0);
 8000666:	bf00      	nop
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <I2CSendRegister+0x3c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0f9      	beq.n	8000668 <I2CSendRegister+0x20>
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40005414 	.word	0x40005414
 8000688:	40005410 	.word	0x40005410

0800068c <I2CWaitIfBusy>:

void I2CWaitIfBusy()
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	// See page 502 of the datasheet.  Bit 1 of SR2 will be set when the I2C bus is busy.
	while((ACCESS(I2C1_SR2) & (1 << 1)) == (1 << 1));
 8000690:	bf00      	nop
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <I2CWaitIfBusy+0x20>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	2b02      	cmp	r3, #2
 800069c:	d0f9      	beq.n	8000692 <I2CWaitIfBusy+0x6>
}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40005418 	.word	0x40005418

080006b0 <I2CWriteByte>:

void I2CWriteByte(unsigned char data)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	// Write the data to the data register
	ACCESS(I2C1_DR) = data;
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <I2CWriteByte+0x2c>)
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	6013      	str	r3, [r2, #0]

	// See page 500 of the datasheet.  Bit 2 will be set when the data transfer has succeeded.
	while((ACCESS(I2C1_SR1) & (1 << 2)) == 0);
 80006c0:	bf00      	nop
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <I2CWriteByte+0x30>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d0f9      	beq.n	80006c2 <I2CWriteByte+0x12>
}
 80006ce:	bf00      	nop
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	40005410 	.word	0x40005410
 80006e0:	40005414 	.word	0x40005414

080006e4 <I2CGetData>:

unsigned char I2CGetData()
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
	// See page 499 of the datasheet.  Bit 6 of SR1 will be set when receiver data exist the
	// data register.
	while((ACCESS(I2C1_SR1) & (1 << 6)) == 0) { }
 80006e8:	bf00      	nop
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <I2CGetData+0x24>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f9      	beq.n	80006ea <I2CGetData+0x6>

	// Return the data
	return ACCESS(I2C1_DR);
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <I2CGetData+0x28>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40005414 	.word	0x40005414
 800070c:	40005410 	.word	0x40005410

08000710 <ReadFromAccelerometer>:

unsigned char ReadFromAccelerometer(unsigned short registerAddress)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	80fb      	strh	r3, [r7, #6]
	I2CWaitIfBusy();
 800071a:	f7ff ffb7 	bl	800068c <I2CWaitIfBusy>

	I2CEnableAcknowledge();
 800071e:	f7ff ff4d 	bl	80005bc <I2CEnableAcknowledge>

	I2CStartRestart();
 8000722:	f7ff ff2b 	bl	800057c <I2CStartRestart>

	// This address of the device we want to read from
	I2CSendSlaveAddress(ACCELEROMETER_WRITE);
 8000726:	2032      	movs	r0, #50	; 0x32
 8000728:	f7ff ff68 	bl	80005fc <I2CSendSlaveAddress>

	// The address of the register we want to read from
	I2CSendRegister(registerAddress);
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff8a 	bl	8000648 <I2CSendRegister>

	I2CStartRestart();
 8000734:	f7ff ff22 	bl	800057c <I2CStartRestart>

	// Request a read from the accelerometer
	I2CSendSlaveAddress(ACCELEROMETER_READ);
 8000738:	2033      	movs	r0, #51	; 0x33
 800073a:	f7ff ff5f 	bl	80005fc <I2CSendSlaveAddress>

	I2CDisableAcknowledge();
 800073e:	f7ff ff4d 	bl	80005dc <I2CDisableAcknowledge>

	I2CStop();
 8000742:	f7ff ff2b 	bl	800059c <I2CStop>

	return I2CGetData();
 8000746:	f7ff ffcd 	bl	80006e4 <I2CGetData>
 800074a:	4603      	mov	r3, r0
}
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <WriteToAccelerometer>:

void WriteToAccelerometer(unsigned short registerAddress, unsigned char data)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	460a      	mov	r2, r1
 800075e:	80fb      	strh	r3, [r7, #6]
 8000760:	4613      	mov	r3, r2
 8000762:	717b      	strb	r3, [r7, #5]
	I2CWaitIfBusy();
 8000764:	f7ff ff92 	bl	800068c <I2CWaitIfBusy>

	I2CStartRestart();
 8000768:	f7ff ff08 	bl	800057c <I2CStartRestart>

	// This address of the device we want to write to
	I2CSendSlaveAddress(ACCELEROMETER_WRITE);
 800076c:	2032      	movs	r0, #50	; 0x32
 800076e:	f7ff ff45 	bl	80005fc <I2CSendSlaveAddress>

	// The address of the register we want to write to
	I2CSendRegister(registerAddress);
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff67 	bl	8000648 <I2CSendRegister>

	// The data we want to write
	I2CWriteByte(data);
 800077a:	797b      	ldrb	r3, [r7, #5]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff97 	bl	80006b0 <I2CWriteByte>

	I2CStop();
 8000782:	f7ff ff0b 	bl	800059c <I2CStop>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <AccelerometerInit>:
// See page 33 of UM1842.  It shows the LSM303DLHC (the accelerometer) is connected to the STM32F411 using
// the following pins for I2C communication:
// SCL  --> PB6
// SDA  --> PB9
void AccelerometerInit()
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
	// Give a clock to port B as pins PB6 and PB9 are connected to the accelerometer (pg 33 of UM1842) and
	// page 116 of RM0383 for the RCC AHB register info.
	ACCESS(RCC_AHB1ENR) |= (1 << 1);
 8000796:	4b32      	ldr	r3, [pc, #200]	; (8000860 <AccelerometerInit+0xd0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a31      	ldr	r2, [pc, #196]	; (8000860 <AccelerometerInit+0xd0>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6013      	str	r3, [r2, #0]

	// See page 156 of the datasheet.  We configure PB6 and PB9 to alternate function.
	ACCESS(GPIOB_MODER) |= ((1 << 13) | (1 << 19));
 80007a2:	4b30      	ldr	r3, [pc, #192]	; (8000864 <AccelerometerInit+0xd4>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a2f      	ldr	r2, [pc, #188]	; (8000864 <AccelerometerInit+0xd4>)
 80007a8:	f443 2302 	orr.w	r3, r3, #532480	; 0x82000
 80007ac:	6013      	str	r3, [r2, #0]

	// See pages 21 and 22 of the ST UM1842 document.  It shows the LSM303DLHC uses I2C1.  Then, looking at
	// page 149 of ST RM0383 shows I2C1 is alternate function 4.  Then looking at pages 160 and 161 shows
	// which bits to set of the AFRL and AFRH registers: Pin 6 = bits 24-27 of AFRL and pin 9 = bits 4-7 of
	// AFRH.
	ACCESS(GPIOB_AFRL) |= (4 << 24);
 80007ae:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <AccelerometerInit+0xd8>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a2d      	ldr	r2, [pc, #180]	; (8000868 <AccelerometerInit+0xd8>)
 80007b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007b8:	6013      	str	r3, [r2, #0]
	ACCESS(GPIOB_AFRH) |= (4 << 4);
 80007ba:	4b2c      	ldr	r3, [pc, #176]	; (800086c <AccelerometerInit+0xdc>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a2b      	ldr	r2, [pc, #172]	; (800086c <AccelerometerInit+0xdc>)
 80007c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c4:	6013      	str	r3, [r2, #0]

	// Set the pins to fast speed.  See pg 157 for more info on the register.  Pin 6 corresponds to
	// bits 12/13, 9=18/19.
	ACCESS(GPIOB_OSPEEDR) |= ((2 << 12) | (2 << 18));
 80007c6:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <AccelerometerInit+0xe0>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a29      	ldr	r2, [pc, #164]	; (8000870 <AccelerometerInit+0xe0>)
 80007cc:	f443 2302 	orr.w	r3, r3, #532480	; 0x82000
 80007d0:	6013      	str	r3, [r2, #0]

	// See page 117.  We give a clock to I2C1 by setting bit 21 of the RCC APB1 peripheral clock enable register.
	ACCESS(RCC_APB1ENR) |= (1 << 21);
 80007d2:	4b28      	ldr	r3, [pc, #160]	; (8000874 <AccelerometerInit+0xe4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a27      	ldr	r2, [pc, #156]	; (8000874 <AccelerometerInit+0xe4>)
 80007d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007dc:	6013      	str	r3, [r2, #0]

	// See page 495 of the datasheet for info on CR2 peripheral clock frequency.  We set the clock to 2 MHz.
	ACCESS(I2C1_CR2) &= ~(0x3F);
 80007de:	4b26      	ldr	r3, [pc, #152]	; (8000878 <AccelerometerInit+0xe8>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a25      	ldr	r2, [pc, #148]	; (8000878 <AccelerometerInit+0xe8>)
 80007e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007e8:	6013      	str	r3, [r2, #0]
	ACCESS(I2C1_CR2) |= (0x02);
 80007ea:	4b23      	ldr	r3, [pc, #140]	; (8000878 <AccelerometerInit+0xe8>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a22      	ldr	r2, [pc, #136]	; (8000878 <AccelerometerInit+0xe8>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6013      	str	r3, [r2, #0]
	//    "For instance: in Sm mode, to generate a 100 kHz SCL frequency:
	//     If FREQR = 08, TPCLK1 = 125 ns so CCR must be programmed with 0x28
	//     (0x28 <=> 40d x 125 ns = 5000 ns.)"
	// So, 125 ns = 8 MHz clock.  We have a 16 MHz clock, so if I just substitute in 62.5 for 125 we can
	// compensate by doubling 40d to 80d which = 0x50.
	ACCESS(I2C1_CCR) &= ~(0xFFF);
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <AccelerometerInit+0xec>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a20      	ldr	r2, [pc, #128]	; (800087c <AccelerometerInit+0xec>)
 80007fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000800:	f023 030f 	bic.w	r3, r3, #15
 8000804:	6013      	str	r3, [r2, #0]
	ACCESS(I2C1_CCR) |= 0x50;
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <AccelerometerInit+0xec>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <AccelerometerInit+0xec>)
 800080c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000810:	6013      	str	r3, [r2, #0]
	//     value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns therefore the TRISE[5:0] bits
	//     must be programmed with 09h. (1000 ns / 125 ns = 8 + 1)"
	// We have FREQ set to 0x02.  So this should give us:
	// 1000 ns / 500 ns = 2 + 1
	// So we should be able to set this to 3.
	ACCESS(I2C1_TRISE) &= ~(0x3F);
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <AccelerometerInit+0xf0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a1a      	ldr	r2, [pc, #104]	; (8000880 <AccelerometerInit+0xf0>)
 8000818:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800081c:	6013      	str	r3, [r2, #0]
	ACCESS(I2C1_TRISE) |= 0x03;
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <AccelerometerInit+0xf0>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a17      	ldr	r2, [pc, #92]	; (8000880 <AccelerometerInit+0xf0>)
 8000824:	f043 0303 	orr.w	r3, r3, #3
 8000828:	6013      	str	r3, [r2, #0]

	// See page 496 for info on OAR1 (I2C Own address register 1).  We set the following:
	//   Bit 1-7: Interface Address: 100001 = 0x21
	//   Bit 14: b/c the datasheet says "bit 14 Should always be kept at 1 by software"
	// Note that we're using 7 bit addressing mode so we leave bit 15 as zero
	ACCESS(I2C1_OAR1) |= ((0x21 << 1) | (1 << 14));
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <AccelerometerInit+0xf4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a15      	ldr	r2, [pc, #84]	; (8000884 <AccelerometerInit+0xf4>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000834:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8000838:	6013      	str	r3, [r2, #0]

	// Enable I2C1.  See page 494 of the datasheet.
	ACCESS(I2C1_CR1) |= 1;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <AccelerometerInit+0xf8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <AccelerometerInit+0xf8>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6013      	str	r3, [r2, #0]
	// datasheet as well which shows a register (0xF) not documented in the LSM303DLHC.  This
	// register is labeled as WHO_AM_I and returns an 8 bit constant.  Looking through various
	// STM32 code I found that this also exists for the LSM303DLHC and returns a constant of
	// 0x33.  So that's what I'm checking here.  It's good to do as a sanity check just to make
	// sure everything is working ok and we can communicate with the accelerometer.
	unsigned char accelerometerID = ReadFromAccelerometer(0xF);
 8000846:	200f      	movs	r0, #15
 8000848:	f7ff ff62 	bl	8000710 <ReadFromAccelerometer>
 800084c:	4603      	mov	r3, r0
 800084e:	71fb      	strb	r3, [r7, #7]

	// See page 25 of the LSM303DLHC datasheet.  Register 0x20 is CTRL_REG1_A.  We set this
	// register to 0x47 (0100.0111) to configure the accelerometer as follows:
	// 1) Normal / low-power mode (50 Hz)
	// 2) Enable X, Y and Z axes
	WriteToAccelerometer(0x20, 0x47);
 8000850:	2147      	movs	r1, #71	; 0x47
 8000852:	2020      	movs	r0, #32
 8000854:	f7ff ff7e 	bl	8000754 <WriteToAccelerometer>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023830 	.word	0x40023830
 8000864:	40020400 	.word	0x40020400
 8000868:	40020420 	.word	0x40020420
 800086c:	40020424 	.word	0x40020424
 8000870:	40020408 	.word	0x40020408
 8000874:	40023840 	.word	0x40023840
 8000878:	40005404 	.word	0x40005404
 800087c:	4000541c 	.word	0x4000541c
 8000880:	40005420 	.word	0x40005420
 8000884:	40005408 	.word	0x40005408
 8000888:	40005400 	.word	0x40005400

0800088c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000894:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000898:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d013      	beq.n	80008cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80008a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80008ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00b      	beq.n	80008cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80008b4:	e000      	b.n	80008b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80008b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80008b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f9      	beq.n	80008b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80008c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80008cc:	687b      	ldr	r3, [r7, #4]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <_write>:
uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg);
void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value);
void Accel_GetXYZ(int16_t* pData);

int _write(int file, char *ptr, int len)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b086      	sub	sp, #24
 80008de:	af00      	add	r7, sp, #0
 80008e0:	60f8      	str	r0, [r7, #12]
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
  int i=0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	e009      	b.n	8000904 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	60ba      	str	r2, [r7, #8]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ffc7 	bl	800088c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	3301      	adds	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	dbf1      	blt.n	80008f0 <_write+0x16>
  return len;
 800090c:	687b      	ldr	r3, [r7, #4]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <main>:


int main(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
    HAL_Init();
 800091e:	f000 fb17 	bl	8000f50 <HAL_Init>
    SystemClock_Config();
 8000922:	f000 f8ad 	bl	8000a80 <SystemClock_Config>
    MX_GPIO_Init();
 8000926:	f000 f941 	bl	8000bac <MX_GPIO_Init>
    MX_I2C1_Init();
 800092a:	f000 f911 	bl	8000b50 <MX_I2C1_Init>

//    Accel_Ini();
    AccelerometerInit();
 800092e:	f7ff ff2f 	bl	8000790 <AccelerometerInit>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000938:	484e      	ldr	r0, [pc, #312]	; (8000a74 <main+0x15c>)
 800093a:	f000 fe21 	bl	8001580 <HAL_GPIO_WritePin>

    uint16_t myPins[] = {GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15};
 800093e:	4a4e      	ldr	r2, [pc, #312]	; (8000a78 <main+0x160>)
 8000940:	463b      	mov	r3, r7
 8000942:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000946:	6018      	str	r0, [r3, #0]
 8000948:	3304      	adds	r3, #4
 800094a:	8019      	strh	r1, [r3, #0]
    int currentPosition = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(GPIOD, myPins[currentPosition], GPIO_PIN_SET);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	3310      	adds	r3, #16
 8000956:	443b      	add	r3, r7
 8000958:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800095c:	2201      	movs	r2, #1
 800095e:	4619      	mov	r1, r3
 8000960:	4844      	ldr	r0, [pc, #272]	; (8000a74 <main+0x15c>)
 8000962:	f000 fe0d 	bl	8001580 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000966:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096a:	f000 fb63 	bl	8001034 <HAL_Delay>
    while (1) {
    	// Read the high and low bytes from the accelerometer
		uint8_t highByte = ReadFromAccelerometer(0x29);
 800096e:	2029      	movs	r0, #41	; 0x29
 8000970:	f7ff fece 	bl	8000710 <ReadFromAccelerometer>
 8000974:	4603      	mov	r3, r0
 8000976:	72fb      	strb	r3, [r7, #11]
		uint8_t lowByte = ReadFromAccelerometer(0x28);
 8000978:	2028      	movs	r0, #40	; 0x28
 800097a:	f7ff fec9 	bl	8000710 <ReadFromAccelerometer>
 800097e:	4603      	mov	r3, r0
 8000980:	72bb      	strb	r3, [r7, #10]

		uint16_t x = (highByte << 8) | lowByte;
 8000982:	7afb      	ldrb	r3, [r7, #11]
 8000984:	021b      	lsls	r3, r3, #8
 8000986:	b21a      	sxth	r2, r3
 8000988:	7abb      	ldrb	r3, [r7, #10]
 800098a:	b21b      	sxth	r3, r3
 800098c:	4313      	orrs	r3, r2
 800098e:	b21b      	sxth	r3, r3
 8000990:	813b      	strh	r3, [r7, #8]

		printf("X value = %d \n", x);
 8000992:	893b      	ldrh	r3, [r7, #8]
 8000994:	4619      	mov	r1, r3
 8000996:	4839      	ldr	r0, [pc, #228]	; (8000a7c <main+0x164>)
 8000998:	f001 fc94 	bl	80022c4 <iprintf>

		if (x < 20000) {
 800099c:	893b      	ldrh	r3, [r7, #8]
 800099e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d82a      	bhi.n	80009fc <main+0xe4>
		    if (HAL_GPIO_ReadPin(GPIOD, myPins[currentPosition]) == GPIO_PIN_SET && currentPosition != 2) {
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	3310      	adds	r3, #16
 80009ac:	443b      	add	r3, r7
 80009ae:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80009b2:	4619      	mov	r1, r3
 80009b4:	482f      	ldr	r0, [pc, #188]	; (8000a74 <main+0x15c>)
 80009b6:	f000 fdcb 	bl	8001550 <HAL_GPIO_ReadPin>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d153      	bne.n	8000a68 <main+0x150>
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d050      	beq.n	8000a68 <main+0x150>
		        HAL_GPIO_WritePin(GPIOD, myPins[currentPosition], GPIO_PIN_RESET);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	3310      	adds	r3, #16
 80009cc:	443b      	add	r3, r7
 80009ce:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80009d2:	2200      	movs	r2, #0
 80009d4:	4619      	mov	r1, r3
 80009d6:	4827      	ldr	r0, [pc, #156]	; (8000a74 <main+0x15c>)
 80009d8:	f000 fdd2 	bl	8001580 <HAL_GPIO_WritePin>
		        HAL_GPIO_WritePin(GPIOD, myPins[currentPosition+1], GPIO_PIN_SET);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3301      	adds	r3, #1
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	3310      	adds	r3, #16
 80009e4:	443b      	add	r3, r7
 80009e6:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80009ea:	2201      	movs	r2, #1
 80009ec:	4619      	mov	r1, r3
 80009ee:	4821      	ldr	r0, [pc, #132]	; (8000a74 <main+0x15c>)
 80009f0:	f000 fdc6 	bl	8001580 <HAL_GPIO_WritePin>

		        currentPosition += 1;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3301      	adds	r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	e035      	b.n	8000a68 <main+0x150>
		    }


		} else if ( x > 40000) {
 80009fc:	893b      	ldrh	r3, [r7, #8]
 80009fe:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d92a      	bls.n	8000a5c <main+0x144>
			if (HAL_GPIO_ReadPin(GPIOD, myPins[currentPosition]) == GPIO_PIN_SET && currentPosition != 0) {
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	3310      	adds	r3, #16
 8000a0c:	443b      	add	r3, r7
 8000a0e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8000a12:	4619      	mov	r1, r3
 8000a14:	4817      	ldr	r0, [pc, #92]	; (8000a74 <main+0x15c>)
 8000a16:	f000 fd9b 	bl	8001550 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d123      	bne.n	8000a68 <main+0x150>
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d020      	beq.n	8000a68 <main+0x150>
				HAL_GPIO_WritePin(GPIOD, myPins[currentPosition], GPIO_PIN_RESET);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	3310      	adds	r3, #16
 8000a2c:	443b      	add	r3, r7
 8000a2e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	480f      	ldr	r0, [pc, #60]	; (8000a74 <main+0x15c>)
 8000a38:	f000 fda2 	bl	8001580 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, myPins[currentPosition-1], GPIO_PIN_SET);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	3310      	adds	r3, #16
 8000a44:	443b      	add	r3, r7
 8000a46:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <main+0x15c>)
 8000a50:	f000 fd96 	bl	8001580 <HAL_GPIO_WritePin>

				currentPosition -= 1;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	e005      	b.n	8000a68 <main+0x150>
			}
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a62:	4804      	ldr	r0, [pc, #16]	; (8000a74 <main+0x15c>)
 8000a64:	f000 fd8c 	bl	8001580 <HAL_GPIO_WritePin>
		}

		HAL_Delay(1000);
 8000a68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a6c:	f000 fae2 	bl	8001034 <HAL_Delay>
    while (1) {
 8000a70:	e77d      	b.n	800096e <main+0x56>
 8000a72:	bf00      	nop
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	08002fd8 	.word	0x08002fd8
 8000a7c:	08002fc8 	.word	0x08002fc8

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b094      	sub	sp, #80	; 0x50
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	2230      	movs	r2, #48	; 0x30
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fc6d 	bl	800236e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <SystemClock_Config+0xc8>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <SystemClock_Config+0xc8>)
 8000aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <SystemClock_Config+0xc8>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <SystemClock_Config+0xcc>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a20      	ldr	r2, [pc, #128]	; (8000b4c <SystemClock_Config+0xcc>)
 8000aca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <SystemClock_Config+0xcc>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000adc:	2302      	movs	r3, #2
 8000ade:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aec:	2300      	movs	r3, #0
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000af0:	2308      	movs	r3, #8
 8000af2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000af4:	2360      	movs	r3, #96	; 0x60
 8000af6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000afc:	2304      	movs	r3, #4
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 fe99 	bl	800183c <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b10:	f000 f8ba 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	230f      	movs	r3, #15
 8000b16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	2103      	movs	r1, #3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f001 f8fb 	bl	8001d2c <HAL_RCC_ClockConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b3c:	f000 f8a4 	bl	8000c88 <Error_Handler>
  }
}
 8000b40:	bf00      	nop
 8000b42:	3750      	adds	r7, #80	; 0x50
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40007000 	.word	0x40007000

08000b50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <MX_I2C1_Init+0x54>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b5c:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_I2C1_Init+0x58>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b8e:	f000 fd11 	bl	80015b4 <HAL_I2C_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b98:	f000 f876 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000084 	.word	0x20000084
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	000186a0 	.word	0x000186a0

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b2d      	ldr	r3, [pc, #180]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a2c      	ldr	r2, [pc, #176]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0310 	and.w	r3, r3, #16
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a25      	ldr	r2, [pc, #148]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c38:	4811      	ldr	r0, [pc, #68]	; (8000c80 <MX_GPIO_Init+0xd4>)
 8000c3a:	f000 fca1 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c3e:	2330      	movs	r3, #48	; 0x30
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <MX_GPIO_Init+0xd8>)
 8000c52:	f000 faf9 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c56:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4804      	ldr	r0, [pc, #16]	; (8000c80 <MX_GPIO_Init+0xd4>)
 8000c70:	f000 faea 	bl	8001248 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c74:	bf00      	nop
 8000c76:	3728      	adds	r7, #40	; 0x28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020c00 	.word	0x40020c00
 8000c84:	40021000 	.word	0x40021000

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <Error_Handler+0x8>
	...

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a19      	ldr	r2, [pc, #100]	; (8000d68 <HAL_I2C_MspInit+0x84>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d12c      	bne.n	8000d60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d22:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d28:	2312      	movs	r3, #18
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d34:	2304      	movs	r3, #4
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <HAL_I2C_MspInit+0x8c>)
 8000d40:	f000 fa82 	bl	8001248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d52:	6413      	str	r3, [r2, #64]	; 0x40
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020400 	.word	0x40020400

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <NMI_Handler+0x4>

08000d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <MemManage_Handler+0x4>

08000d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc0:	f000 f918 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	e00a      	b.n	8000df0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dda:	f3af 8000 	nop.w
 8000dde:	4601      	mov	r1, r0
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	60ba      	str	r2, [r7, #8]
 8000de6:	b2ca      	uxtb	r2, r1
 8000de8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	dbf0      	blt.n	8000dda <_read+0x12>
  }

  return len;
 8000df8:	687b      	ldr	r3, [r7, #4]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_isatty>:

int _isatty(int file)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e74:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <_sbrk+0x5c>)
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <_sbrk+0x60>)
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <_sbrk+0x64>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <_sbrk+0x68>)
 8000e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d207      	bcs.n	8000eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e9c:	f001 fab6 	bl	800240c <__errno>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	e009      	b.n	8000ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <_sbrk+0x64>)
 8000ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20020000 	.word	0x20020000
 8000ecc:	00000400 	.word	0x00000400
 8000ed0:	200000d8 	.word	0x200000d8
 8000ed4:	20000230 	.word	0x20000230

08000ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f02:	490e      	ldr	r1, [pc, #56]	; (8000f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f18:	4c0b      	ldr	r4, [pc, #44]	; (8000f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f26:	f7ff ffd7 	bl	8000ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f001 fa75 	bl	8002418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fcf3 	bl	8000918 <main>
  bx  lr    
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f40:	0800303c 	.word	0x0800303c
  ldr r2, =_sbss
 8000f44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f48:	2000022c 	.word	0x2000022c

08000f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_Init+0x40>)
 8000f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_Init+0x40>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_Init+0x40>)
 8000f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f931 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7e:	200f      	movs	r0, #15
 8000f80:	f000 f808 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f84:	f7ff fe86 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023c00 	.word	0x40023c00

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x54>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x58>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f93b 	bl	800122e <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00e      	b.n	8000fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d80a      	bhi.n	8000fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 f911 	bl	80011f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <HAL_InitTick+0x5c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000004 	.word	0x20000004

08000ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x20>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_IncTick+0x24>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008
 8001018:	200000dc 	.word	0x200000dc

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	200000dc 	.word	0x200000dc

08001034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff ffee 	bl	800101c <HAL_GetTick>
 8001040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104c:	d005      	beq.n	800105a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_Delay+0x44>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105a:	bf00      	nop
 800105c:	f7ff ffde 	bl	800101c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8f7      	bhi.n	800105c <HAL_Delay+0x28>
  {
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008

0800107c <__NVIC_SetPriorityGrouping>:
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_SetPriority>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <SysTick_Config>:
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00f      	b.n	80011d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <SysTick_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	210f      	movs	r1, #15
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f7ff ff8e 	bl	80010e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <SysTick_Config+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <SysTick_Config+0x40>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff47 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001208:	f7ff ff5c 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 800120c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	6978      	ldr	r0, [r7, #20]
 8001214:	f7ff ff8e 	bl	8001134 <NVIC_EncodePriority>
 8001218:	4602      	mov	r2, r0
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff5d 	bl	80010e0 <__NVIC_SetPriority>
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffb0 	bl	800119c <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	e159      	b.n	8001518 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 8148 	bne.w	8001512 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b01      	cmp	r3, #1
 800128c:	d005      	beq.n	800129a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001296:	2b02      	cmp	r3, #2
 8001298:	d130      	bne.n	80012fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d0:	2201      	movs	r2, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 0201 	and.w	r2, r3, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b03      	cmp	r3, #3
 8001306:	d017      	beq.n	8001338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d123      	bne.n	800138c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	08da      	lsrs	r2, r3, #3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3208      	adds	r2, #8
 800134c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	08da      	lsrs	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3208      	adds	r2, #8
 8001386:	69b9      	ldr	r1, [r7, #24]
 8001388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0203 	and.w	r2, r3, #3
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80a2 	beq.w	8001512 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b57      	ldr	r3, [pc, #348]	; (8001530 <HAL_GPIO_Init+0x2e8>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a56      	ldr	r2, [pc, #344]	; (8001530 <HAL_GPIO_Init+0x2e8>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b54      	ldr	r3, [pc, #336]	; (8001530 <HAL_GPIO_Init+0x2e8>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ea:	4a52      	ldr	r2, [pc, #328]	; (8001534 <HAL_GPIO_Init+0x2ec>)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a49      	ldr	r2, [pc, #292]	; (8001538 <HAL_GPIO_Init+0x2f0>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d019      	beq.n	800144a <HAL_GPIO_Init+0x202>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a48      	ldr	r2, [pc, #288]	; (800153c <HAL_GPIO_Init+0x2f4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x1fe>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a47      	ldr	r2, [pc, #284]	; (8001540 <HAL_GPIO_Init+0x2f8>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x1fa>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a46      	ldr	r2, [pc, #280]	; (8001544 <HAL_GPIO_Init+0x2fc>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x1f6>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a45      	ldr	r2, [pc, #276]	; (8001548 <HAL_GPIO_Init+0x300>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x1f2>
 8001436:	2304      	movs	r3, #4
 8001438:	e008      	b.n	800144c <HAL_GPIO_Init+0x204>
 800143a:	2307      	movs	r3, #7
 800143c:	e006      	b.n	800144c <HAL_GPIO_Init+0x204>
 800143e:	2303      	movs	r3, #3
 8001440:	e004      	b.n	800144c <HAL_GPIO_Init+0x204>
 8001442:	2302      	movs	r3, #2
 8001444:	e002      	b.n	800144c <HAL_GPIO_Init+0x204>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_GPIO_Init+0x204>
 800144a:	2300      	movs	r3, #0
 800144c:	69fa      	ldr	r2, [r7, #28]
 800144e:	f002 0203 	and.w	r2, r2, #3
 8001452:	0092      	lsls	r2, r2, #2
 8001454:	4093      	lsls	r3, r2
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800145c:	4935      	ldr	r1, [pc, #212]	; (8001534 <HAL_GPIO_Init+0x2ec>)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146a:	4b38      	ldr	r3, [pc, #224]	; (800154c <HAL_GPIO_Init+0x304>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800148e:	4a2f      	ldr	r2, [pc, #188]	; (800154c <HAL_GPIO_Init+0x304>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_GPIO_Init+0x304>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b8:	4a24      	ldr	r2, [pc, #144]	; (800154c <HAL_GPIO_Init+0x304>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <HAL_GPIO_Init+0x304>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e2:	4a1a      	ldr	r2, [pc, #104]	; (800154c <HAL_GPIO_Init+0x304>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e8:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_GPIO_Init+0x304>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800150c:	4a0f      	ldr	r2, [pc, #60]	; (800154c <HAL_GPIO_Init+0x304>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3301      	adds	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b0f      	cmp	r3, #15
 800151c:	f67f aea2 	bls.w	8001264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40013800 	.word	0x40013800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400
 8001540:	40020800 	.word	0x40020800
 8001544:	40020c00 	.word	0x40020c00
 8001548:	40021000 	.word	0x40021000
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	4013      	ands	r3, r2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d002      	beq.n	800156e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e001      	b.n	8001572 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001572:	7bfb      	ldrb	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800159c:	e003      	b.n	80015a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	041a      	lsls	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	619a      	str	r2, [r3, #24]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e12b      	b.n	800181e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d106      	bne.n	80015e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fb82 	bl	8000ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2224      	movs	r2, #36	; 0x24
 80015e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001618:	f000 fd7e 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 800161c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4a81      	ldr	r2, [pc, #516]	; (8001828 <HAL_I2C_Init+0x274>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d807      	bhi.n	8001638 <HAL_I2C_Init+0x84>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4a80      	ldr	r2, [pc, #512]	; (800182c <HAL_I2C_Init+0x278>)
 800162c:	4293      	cmp	r3, r2
 800162e:	bf94      	ite	ls
 8001630:	2301      	movls	r3, #1
 8001632:	2300      	movhi	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	e006      	b.n	8001646 <HAL_I2C_Init+0x92>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4a7d      	ldr	r2, [pc, #500]	; (8001830 <HAL_I2C_Init+0x27c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	bf94      	ite	ls
 8001640:	2301      	movls	r3, #1
 8001642:	2300      	movhi	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0e7      	b.n	800181e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4a78      	ldr	r2, [pc, #480]	; (8001834 <HAL_I2C_Init+0x280>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	0c9b      	lsrs	r3, r3, #18
 8001658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	430a      	orrs	r2, r1
 800166c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	4a6a      	ldr	r2, [pc, #424]	; (8001828 <HAL_I2C_Init+0x274>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d802      	bhi.n	8001688 <HAL_I2C_Init+0xd4>
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3301      	adds	r3, #1
 8001686:	e009      	b.n	800169c <HAL_I2C_Init+0xe8>
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	4a69      	ldr	r2, [pc, #420]	; (8001838 <HAL_I2C_Init+0x284>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	3301      	adds	r3, #1
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	430b      	orrs	r3, r1
 80016a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	495c      	ldr	r1, [pc, #368]	; (8001828 <HAL_I2C_Init+0x274>)
 80016b8:	428b      	cmp	r3, r1
 80016ba:	d819      	bhi.n	80016f0 <HAL_I2C_Init+0x13c>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1e59      	subs	r1, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ca:	1c59      	adds	r1, r3, #1
 80016cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016d0:	400b      	ands	r3, r1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00a      	beq.n	80016ec <HAL_I2C_Init+0x138>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1e59      	subs	r1, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016e4:	3301      	adds	r3, #1
 80016e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ea:	e051      	b.n	8001790 <HAL_I2C_Init+0x1dc>
 80016ec:	2304      	movs	r3, #4
 80016ee:	e04f      	b.n	8001790 <HAL_I2C_Init+0x1dc>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d111      	bne.n	800171c <HAL_I2C_Init+0x168>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1e58      	subs	r0, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6859      	ldr	r1, [r3, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	440b      	add	r3, r1
 8001706:	fbb0 f3f3 	udiv	r3, r0, r3
 800170a:	3301      	adds	r3, #1
 800170c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf0c      	ite	eq
 8001714:	2301      	moveq	r3, #1
 8001716:	2300      	movne	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	e012      	b.n	8001742 <HAL_I2C_Init+0x18e>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1e58      	subs	r0, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	0099      	lsls	r1, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001732:	3301      	adds	r3, #1
 8001734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001738:	2b00      	cmp	r3, #0
 800173a:	bf0c      	ite	eq
 800173c:	2301      	moveq	r3, #1
 800173e:	2300      	movne	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Init+0x196>
 8001746:	2301      	movs	r3, #1
 8001748:	e022      	b.n	8001790 <HAL_I2C_Init+0x1dc>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10e      	bne.n	8001770 <HAL_I2C_Init+0x1bc>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1e58      	subs	r0, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6859      	ldr	r1, [r3, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	440b      	add	r3, r1
 8001760:	fbb0 f3f3 	udiv	r3, r0, r3
 8001764:	3301      	adds	r3, #1
 8001766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800176e:	e00f      	b.n	8001790 <HAL_I2C_Init+0x1dc>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	1e58      	subs	r0, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6859      	ldr	r1, [r3, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	0099      	lsls	r1, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	fbb0 f3f3 	udiv	r3, r0, r3
 8001786:	3301      	adds	r3, #1
 8001788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800178c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	6809      	ldr	r1, [r1, #0]
 8001794:	4313      	orrs	r3, r2
 8001796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69da      	ldr	r2, [r3, #28]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6911      	ldr	r1, [r2, #16]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68d2      	ldr	r2, [r2, #12]
 80017ca:	4311      	orrs	r1, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	430b      	orrs	r3, r1
 80017d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695a      	ldr	r2, [r3, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2220      	movs	r2, #32
 800180a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	000186a0 	.word	0x000186a0
 800182c:	001e847f 	.word	0x001e847f
 8001830:	003d08ff 	.word	0x003d08ff
 8001834:	431bde83 	.word	0x431bde83
 8001838:	10624dd3 	.word	0x10624dd3

0800183c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e267      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d075      	beq.n	8001946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800185a:	4b88      	ldr	r3, [pc, #544]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b04      	cmp	r3, #4
 8001864:	d00c      	beq.n	8001880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001866:	4b85      	ldr	r3, [pc, #532]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800186e:	2b08      	cmp	r3, #8
 8001870:	d112      	bne.n	8001898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001872:	4b82      	ldr	r3, [pc, #520]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800187e:	d10b      	bne.n	8001898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	4b7e      	ldr	r3, [pc, #504]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d05b      	beq.n	8001944 <HAL_RCC_OscConfig+0x108>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d157      	bne.n	8001944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e242      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a0:	d106      	bne.n	80018b0 <HAL_RCC_OscConfig+0x74>
 80018a2:	4b76      	ldr	r3, [pc, #472]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a75      	ldr	r2, [pc, #468]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e01d      	b.n	80018ec <HAL_RCC_OscConfig+0xb0>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b8:	d10c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x98>
 80018ba:	4b70      	ldr	r3, [pc, #448]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a6f      	ldr	r2, [pc, #444]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 80018c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b6d      	ldr	r3, [pc, #436]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a6c      	ldr	r2, [pc, #432]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e00b      	b.n	80018ec <HAL_RCC_OscConfig+0xb0>
 80018d4:	4b69      	ldr	r3, [pc, #420]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a68      	ldr	r2, [pc, #416]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 80018da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b66      	ldr	r3, [pc, #408]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a65      	ldr	r2, [pc, #404]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 80018e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fb92 	bl	800101c <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff fb8e 	bl	800101c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e207      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0xc0>
 800191a:	e014      	b.n	8001946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fb7e 	bl	800101c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fb7a 	bl	800101c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e1f3      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	4b51      	ldr	r3, [pc, #324]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0xe8>
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d063      	beq.n	8001a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001952:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00b      	beq.n	8001976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195e:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001966:	2b08      	cmp	r3, #8
 8001968:	d11c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800196a:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d116      	bne.n	80019a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_RCC_OscConfig+0x152>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d001      	beq.n	800198e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e1c7      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198e:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4937      	ldr	r1, [pc, #220]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a2:	e03a      	b.n	8001a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d020      	beq.n	80019ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ac:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <HAL_RCC_OscConfig+0x244>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b2:	f7ff fb33 	bl	800101c <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ba:	f7ff fb2f 	bl	800101c <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e1a8      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4925      	ldr	r1, [pc, #148]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
 80019ec:	e015      	b.n	8001a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_RCC_OscConfig+0x244>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff fb12 	bl	800101c <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fc:	f7ff fb0e 	bl	800101c <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e187      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d036      	beq.n	8001a94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d016      	beq.n	8001a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_RCC_OscConfig+0x248>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7ff faf2 	bl	800101c <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3c:	f7ff faee 	bl	800101c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e167      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_OscConfig+0x240>)
 8001a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x200>
 8001a5a:	e01b      	b.n	8001a94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_RCC_OscConfig+0x248>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fadb 	bl	800101c <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a68:	e00e      	b.n	8001a88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a6a:	f7ff fad7 	bl	800101c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d907      	bls.n	8001a88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e150      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	42470000 	.word	0x42470000
 8001a84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a88:	4b88      	ldr	r3, [pc, #544]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1ea      	bne.n	8001a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8097 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa6:	4b81      	ldr	r3, [pc, #516]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10f      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	4b7d      	ldr	r3, [pc, #500]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a7c      	ldr	r2, [pc, #496]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b7a      	ldr	r3, [pc, #488]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad2:	4b77      	ldr	r3, [pc, #476]	; (8001cb0 <HAL_RCC_OscConfig+0x474>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d118      	bne.n	8001b10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ade:	4b74      	ldr	r3, [pc, #464]	; (8001cb0 <HAL_RCC_OscConfig+0x474>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a73      	ldr	r2, [pc, #460]	; (8001cb0 <HAL_RCC_OscConfig+0x474>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aea:	f7ff fa97 	bl	800101c <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af2:	f7ff fa93 	bl	800101c <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e10c      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	4b6a      	ldr	r3, [pc, #424]	; (8001cb0 <HAL_RCC_OscConfig+0x474>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x2ea>
 8001b18:	4b64      	ldr	r3, [pc, #400]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	4a63      	ldr	r2, [pc, #396]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6713      	str	r3, [r2, #112]	; 0x70
 8001b24:	e01c      	b.n	8001b60 <HAL_RCC_OscConfig+0x324>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b05      	cmp	r3, #5
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x30c>
 8001b2e:	4b5f      	ldr	r3, [pc, #380]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	4a5e      	ldr	r2, [pc, #376]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3a:	4b5c      	ldr	r3, [pc, #368]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	4a5b      	ldr	r2, [pc, #364]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6713      	str	r3, [r2, #112]	; 0x70
 8001b46:	e00b      	b.n	8001b60 <HAL_RCC_OscConfig+0x324>
 8001b48:	4b58      	ldr	r3, [pc, #352]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4c:	4a57      	ldr	r2, [pc, #348]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	6713      	str	r3, [r2, #112]	; 0x70
 8001b54:	4b55      	ldr	r3, [pc, #340]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	4a54      	ldr	r2, [pc, #336]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001b5a:	f023 0304 	bic.w	r3, r3, #4
 8001b5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d015      	beq.n	8001b94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7ff fa58 	bl	800101c <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b70:	f7ff fa54 	bl	800101c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e0cb      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b86:	4b49      	ldr	r3, [pc, #292]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0ee      	beq.n	8001b70 <HAL_RCC_OscConfig+0x334>
 8001b92:	e014      	b.n	8001bbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b94:	f7ff fa42 	bl	800101c <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fa3e 	bl	800101c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e0b5      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb2:	4b3e      	ldr	r3, [pc, #248]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1ee      	bne.n	8001b9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d105      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc4:	4b39      	ldr	r3, [pc, #228]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	4a38      	ldr	r2, [pc, #224]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 80a1 	beq.w	8001d1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bda:	4b34      	ldr	r3, [pc, #208]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d05c      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d141      	bne.n	8001c72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <HAL_RCC_OscConfig+0x478>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fa12 	bl	800101c <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff fa0e 	bl	800101c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e087      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0e:	4b27      	ldr	r3, [pc, #156]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69da      	ldr	r2, [r3, #28]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	019b      	lsls	r3, r3, #6
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	085b      	lsrs	r3, r3, #1
 8001c32:	3b01      	subs	r3, #1
 8001c34:	041b      	lsls	r3, r3, #16
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	061b      	lsls	r3, r3, #24
 8001c3e:	491b      	ldr	r1, [pc, #108]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_RCC_OscConfig+0x478>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4a:	f7ff f9e7 	bl	800101c <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c52:	f7ff f9e3 	bl	800101c <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e05c      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x416>
 8001c70:	e054      	b.n	8001d1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <HAL_RCC_OscConfig+0x478>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff f9d0 	bl	800101c <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff f9cc 	bl	800101c <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e045      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_RCC_OscConfig+0x470>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x444>
 8001c9e:	e03d      	b.n	8001d1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e038      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <HAL_RCC_OscConfig+0x4ec>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d028      	beq.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d121      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d11a      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ce8:	4013      	ands	r3, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d111      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	085b      	lsrs	r3, r3, #1
 8001d00:	3b01      	subs	r3, #1
 8001d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800

08001d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0cc      	b.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d40:	4b68      	ldr	r3, [pc, #416]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d90c      	bls.n	8001d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4e:	4b65      	ldr	r3, [pc, #404]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b63      	ldr	r3, [pc, #396]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0b8      	b.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d80:	4b59      	ldr	r3, [pc, #356]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4a58      	ldr	r2, [pc, #352]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d98:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	4a52      	ldr	r2, [pc, #328]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	4b50      	ldr	r3, [pc, #320]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	494d      	ldr	r1, [pc, #308]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d044      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d119      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e07f      	b.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d003      	beq.n	8001dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dea:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e06f      	b.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e067      	b.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e0a:	4b37      	ldr	r3, [pc, #220]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f023 0203 	bic.w	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4934      	ldr	r1, [pc, #208]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e1c:	f7ff f8fe 	bl	800101c <HAL_GetTick>
 8001e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e24:	f7ff f8fa 	bl	800101c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e04f      	b.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 020c 	and.w	r2, r3, #12
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d1eb      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d20c      	bcs.n	8001e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e032      	b.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4916      	ldr	r1, [pc, #88]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d009      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e9e:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	490e      	ldr	r1, [pc, #56]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eb2:	f000 f821 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	490a      	ldr	r1, [pc, #40]	; (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	5ccb      	ldrb	r3, [r1, r3]
 8001ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f85e 	bl	8000f94 <HAL_InitTick>

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023c00 	.word	0x40023c00
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	08002fe0 	.word	0x08002fe0
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000004 	.word	0x20000004

08001ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001efc:	b094      	sub	sp, #80	; 0x50
 8001efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	647b      	str	r3, [r7, #68]	; 0x44
 8001f04:	2300      	movs	r3, #0
 8001f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f08:	2300      	movs	r3, #0
 8001f0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f10:	4b79      	ldr	r3, [pc, #484]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d00d      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x40>
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	f200 80e1 	bhi.w	80020e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x34>
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d003      	beq.n	8001f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f2a:	e0db      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f2c:	4b73      	ldr	r3, [pc, #460]	; (80020fc <HAL_RCC_GetSysClockFreq+0x204>)
 8001f2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f30:	e0db      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f32:	4b72      	ldr	r3, [pc, #456]	; (80020fc <HAL_RCC_GetSysClockFreq+0x204>)
 8001f34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f36:	e0d8      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f38:	4b6f      	ldr	r3, [pc, #444]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f42:	4b6d      	ldr	r3, [pc, #436]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d063      	beq.n	8002016 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f4e:	4b6a      	ldr	r3, [pc, #424]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	099b      	lsrs	r3, r3, #6
 8001f54:	2200      	movs	r2, #0
 8001f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
 8001f62:	2300      	movs	r3, #0
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
 8001f66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f6a:	4622      	mov	r2, r4
 8001f6c:	462b      	mov	r3, r5
 8001f6e:	f04f 0000 	mov.w	r0, #0
 8001f72:	f04f 0100 	mov.w	r1, #0
 8001f76:	0159      	lsls	r1, r3, #5
 8001f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f7c:	0150      	lsls	r0, r2, #5
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4621      	mov	r1, r4
 8001f84:	1a51      	subs	r1, r2, r1
 8001f86:	6139      	str	r1, [r7, #16]
 8001f88:	4629      	mov	r1, r5
 8001f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f9c:	4659      	mov	r1, fp
 8001f9e:	018b      	lsls	r3, r1, #6
 8001fa0:	4651      	mov	r1, sl
 8001fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fa6:	4651      	mov	r1, sl
 8001fa8:	018a      	lsls	r2, r1, #6
 8001faa:	4651      	mov	r1, sl
 8001fac:	ebb2 0801 	subs.w	r8, r2, r1
 8001fb0:	4659      	mov	r1, fp
 8001fb2:	eb63 0901 	sbc.w	r9, r3, r1
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fca:	4690      	mov	r8, r2
 8001fcc:	4699      	mov	r9, r3
 8001fce:	4623      	mov	r3, r4
 8001fd0:	eb18 0303 	adds.w	r3, r8, r3
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	462b      	mov	r3, r5
 8001fd8:	eb49 0303 	adc.w	r3, r9, r3
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fea:	4629      	mov	r1, r5
 8001fec:	028b      	lsls	r3, r1, #10
 8001fee:	4621      	mov	r1, r4
 8001ff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	028a      	lsls	r2, r1, #10
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ffe:	2200      	movs	r2, #0
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
 8002002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002004:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002008:	f7fe f93a 	bl	8000280 <__aeabi_uldivmod>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4613      	mov	r3, r2
 8002012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002014:	e058      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002016:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	099b      	lsrs	r3, r3, #6
 800201c:	2200      	movs	r2, #0
 800201e:	4618      	mov	r0, r3
 8002020:	4611      	mov	r1, r2
 8002022:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002026:	623b      	str	r3, [r7, #32]
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
 800202c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002030:	4642      	mov	r2, r8
 8002032:	464b      	mov	r3, r9
 8002034:	f04f 0000 	mov.w	r0, #0
 8002038:	f04f 0100 	mov.w	r1, #0
 800203c:	0159      	lsls	r1, r3, #5
 800203e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002042:	0150      	lsls	r0, r2, #5
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4641      	mov	r1, r8
 800204a:	ebb2 0a01 	subs.w	sl, r2, r1
 800204e:	4649      	mov	r1, r9
 8002050:	eb63 0b01 	sbc.w	fp, r3, r1
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002060:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002064:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002068:	ebb2 040a 	subs.w	r4, r2, sl
 800206c:	eb63 050b 	sbc.w	r5, r3, fp
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	00eb      	lsls	r3, r5, #3
 800207a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800207e:	00e2      	lsls	r2, r4, #3
 8002080:	4614      	mov	r4, r2
 8002082:	461d      	mov	r5, r3
 8002084:	4643      	mov	r3, r8
 8002086:	18e3      	adds	r3, r4, r3
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	464b      	mov	r3, r9
 800208c:	eb45 0303 	adc.w	r3, r5, r3
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800209e:	4629      	mov	r1, r5
 80020a0:	028b      	lsls	r3, r1, #10
 80020a2:	4621      	mov	r1, r4
 80020a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020a8:	4621      	mov	r1, r4
 80020aa:	028a      	lsls	r2, r1, #10
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b2:	2200      	movs	r2, #0
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	61fa      	str	r2, [r7, #28]
 80020b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020bc:	f7fe f8e0 	bl	8000280 <__aeabi_uldivmod>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4613      	mov	r3, r2
 80020c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	3301      	adds	r3, #1
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80020d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020e2:	e002      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_RCC_GetSysClockFreq+0x204>)
 80020e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3750      	adds	r7, #80	; 0x50
 80020f0:	46bd      	mov	sp, r7
 80020f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	00f42400 	.word	0x00f42400

08002100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_RCC_GetHCLKFreq+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000000 	.word	0x20000000

08002118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800211c:	f7ff fff0 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0a9b      	lsrs	r3, r3, #10
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4903      	ldr	r1, [pc, #12]	; (800213c <HAL_RCC_GetPCLK1Freq+0x24>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	08002ff0 	.word	0x08002ff0

08002140 <std>:
 8002140:	2300      	movs	r3, #0
 8002142:	b510      	push	{r4, lr}
 8002144:	4604      	mov	r4, r0
 8002146:	e9c0 3300 	strd	r3, r3, [r0]
 800214a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800214e:	6083      	str	r3, [r0, #8]
 8002150:	8181      	strh	r1, [r0, #12]
 8002152:	6643      	str	r3, [r0, #100]	; 0x64
 8002154:	81c2      	strh	r2, [r0, #14]
 8002156:	6183      	str	r3, [r0, #24]
 8002158:	4619      	mov	r1, r3
 800215a:	2208      	movs	r2, #8
 800215c:	305c      	adds	r0, #92	; 0x5c
 800215e:	f000 f906 	bl	800236e <memset>
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <std+0x58>)
 8002164:	6263      	str	r3, [r4, #36]	; 0x24
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <std+0x5c>)
 8002168:	62a3      	str	r3, [r4, #40]	; 0x28
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <std+0x60>)
 800216c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <std+0x64>)
 8002170:	6323      	str	r3, [r4, #48]	; 0x30
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <std+0x68>)
 8002174:	6224      	str	r4, [r4, #32]
 8002176:	429c      	cmp	r4, r3
 8002178:	d006      	beq.n	8002188 <std+0x48>
 800217a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800217e:	4294      	cmp	r4, r2
 8002180:	d002      	beq.n	8002188 <std+0x48>
 8002182:	33d0      	adds	r3, #208	; 0xd0
 8002184:	429c      	cmp	r4, r3
 8002186:	d105      	bne.n	8002194 <std+0x54>
 8002188:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800218c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002190:	f000 b966 	b.w	8002460 <__retarget_lock_init_recursive>
 8002194:	bd10      	pop	{r4, pc}
 8002196:	bf00      	nop
 8002198:	080022e9 	.word	0x080022e9
 800219c:	0800230b 	.word	0x0800230b
 80021a0:	08002343 	.word	0x08002343
 80021a4:	08002367 	.word	0x08002367
 80021a8:	200000e0 	.word	0x200000e0

080021ac <stdio_exit_handler>:
 80021ac:	4a02      	ldr	r2, [pc, #8]	; (80021b8 <stdio_exit_handler+0xc>)
 80021ae:	4903      	ldr	r1, [pc, #12]	; (80021bc <stdio_exit_handler+0x10>)
 80021b0:	4803      	ldr	r0, [pc, #12]	; (80021c0 <stdio_exit_handler+0x14>)
 80021b2:	f000 b869 	b.w	8002288 <_fwalk_sglue>
 80021b6:	bf00      	nop
 80021b8:	2000000c 	.word	0x2000000c
 80021bc:	08002d0d 	.word	0x08002d0d
 80021c0:	20000018 	.word	0x20000018

080021c4 <cleanup_stdio>:
 80021c4:	6841      	ldr	r1, [r0, #4]
 80021c6:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <cleanup_stdio+0x34>)
 80021c8:	4299      	cmp	r1, r3
 80021ca:	b510      	push	{r4, lr}
 80021cc:	4604      	mov	r4, r0
 80021ce:	d001      	beq.n	80021d4 <cleanup_stdio+0x10>
 80021d0:	f000 fd9c 	bl	8002d0c <_fflush_r>
 80021d4:	68a1      	ldr	r1, [r4, #8]
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <cleanup_stdio+0x38>)
 80021d8:	4299      	cmp	r1, r3
 80021da:	d002      	beq.n	80021e2 <cleanup_stdio+0x1e>
 80021dc:	4620      	mov	r0, r4
 80021de:	f000 fd95 	bl	8002d0c <_fflush_r>
 80021e2:	68e1      	ldr	r1, [r4, #12]
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <cleanup_stdio+0x3c>)
 80021e6:	4299      	cmp	r1, r3
 80021e8:	d004      	beq.n	80021f4 <cleanup_stdio+0x30>
 80021ea:	4620      	mov	r0, r4
 80021ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021f0:	f000 bd8c 	b.w	8002d0c <_fflush_r>
 80021f4:	bd10      	pop	{r4, pc}
 80021f6:	bf00      	nop
 80021f8:	200000e0 	.word	0x200000e0
 80021fc:	20000148 	.word	0x20000148
 8002200:	200001b0 	.word	0x200001b0

08002204 <global_stdio_init.part.0>:
 8002204:	b510      	push	{r4, lr}
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <global_stdio_init.part.0+0x30>)
 8002208:	4c0b      	ldr	r4, [pc, #44]	; (8002238 <global_stdio_init.part.0+0x34>)
 800220a:	4a0c      	ldr	r2, [pc, #48]	; (800223c <global_stdio_init.part.0+0x38>)
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	4620      	mov	r0, r4
 8002210:	2200      	movs	r2, #0
 8002212:	2104      	movs	r1, #4
 8002214:	f7ff ff94 	bl	8002140 <std>
 8002218:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800221c:	2201      	movs	r2, #1
 800221e:	2109      	movs	r1, #9
 8002220:	f7ff ff8e 	bl	8002140 <std>
 8002224:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002228:	2202      	movs	r2, #2
 800222a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800222e:	2112      	movs	r1, #18
 8002230:	f7ff bf86 	b.w	8002140 <std>
 8002234:	20000218 	.word	0x20000218
 8002238:	200000e0 	.word	0x200000e0
 800223c:	080021ad 	.word	0x080021ad

08002240 <__sfp_lock_acquire>:
 8002240:	4801      	ldr	r0, [pc, #4]	; (8002248 <__sfp_lock_acquire+0x8>)
 8002242:	f000 b90e 	b.w	8002462 <__retarget_lock_acquire_recursive>
 8002246:	bf00      	nop
 8002248:	20000221 	.word	0x20000221

0800224c <__sfp_lock_release>:
 800224c:	4801      	ldr	r0, [pc, #4]	; (8002254 <__sfp_lock_release+0x8>)
 800224e:	f000 b909 	b.w	8002464 <__retarget_lock_release_recursive>
 8002252:	bf00      	nop
 8002254:	20000221 	.word	0x20000221

08002258 <__sinit>:
 8002258:	b510      	push	{r4, lr}
 800225a:	4604      	mov	r4, r0
 800225c:	f7ff fff0 	bl	8002240 <__sfp_lock_acquire>
 8002260:	6a23      	ldr	r3, [r4, #32]
 8002262:	b11b      	cbz	r3, 800226c <__sinit+0x14>
 8002264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002268:	f7ff bff0 	b.w	800224c <__sfp_lock_release>
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <__sinit+0x28>)
 800226e:	6223      	str	r3, [r4, #32]
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <__sinit+0x2c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f5      	bne.n	8002264 <__sinit+0xc>
 8002278:	f7ff ffc4 	bl	8002204 <global_stdio_init.part.0>
 800227c:	e7f2      	b.n	8002264 <__sinit+0xc>
 800227e:	bf00      	nop
 8002280:	080021c5 	.word	0x080021c5
 8002284:	20000218 	.word	0x20000218

08002288 <_fwalk_sglue>:
 8002288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800228c:	4607      	mov	r7, r0
 800228e:	4688      	mov	r8, r1
 8002290:	4614      	mov	r4, r2
 8002292:	2600      	movs	r6, #0
 8002294:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002298:	f1b9 0901 	subs.w	r9, r9, #1
 800229c:	d505      	bpl.n	80022aa <_fwalk_sglue+0x22>
 800229e:	6824      	ldr	r4, [r4, #0]
 80022a0:	2c00      	cmp	r4, #0
 80022a2:	d1f7      	bne.n	8002294 <_fwalk_sglue+0xc>
 80022a4:	4630      	mov	r0, r6
 80022a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022aa:	89ab      	ldrh	r3, [r5, #12]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d907      	bls.n	80022c0 <_fwalk_sglue+0x38>
 80022b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80022b4:	3301      	adds	r3, #1
 80022b6:	d003      	beq.n	80022c0 <_fwalk_sglue+0x38>
 80022b8:	4629      	mov	r1, r5
 80022ba:	4638      	mov	r0, r7
 80022bc:	47c0      	blx	r8
 80022be:	4306      	orrs	r6, r0
 80022c0:	3568      	adds	r5, #104	; 0x68
 80022c2:	e7e9      	b.n	8002298 <_fwalk_sglue+0x10>

080022c4 <iprintf>:
 80022c4:	b40f      	push	{r0, r1, r2, r3}
 80022c6:	b507      	push	{r0, r1, r2, lr}
 80022c8:	4906      	ldr	r1, [pc, #24]	; (80022e4 <iprintf+0x20>)
 80022ca:	ab04      	add	r3, sp, #16
 80022cc:	6808      	ldr	r0, [r1, #0]
 80022ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80022d2:	6881      	ldr	r1, [r0, #8]
 80022d4:	9301      	str	r3, [sp, #4]
 80022d6:	f000 f9e9 	bl	80026ac <_vfiprintf_r>
 80022da:	b003      	add	sp, #12
 80022dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80022e0:	b004      	add	sp, #16
 80022e2:	4770      	bx	lr
 80022e4:	20000064 	.word	0x20000064

080022e8 <__sread>:
 80022e8:	b510      	push	{r4, lr}
 80022ea:	460c      	mov	r4, r1
 80022ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022f0:	f000 f868 	bl	80023c4 <_read_r>
 80022f4:	2800      	cmp	r0, #0
 80022f6:	bfab      	itete	ge
 80022f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80022fa:	89a3      	ldrhlt	r3, [r4, #12]
 80022fc:	181b      	addge	r3, r3, r0
 80022fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002302:	bfac      	ite	ge
 8002304:	6563      	strge	r3, [r4, #84]	; 0x54
 8002306:	81a3      	strhlt	r3, [r4, #12]
 8002308:	bd10      	pop	{r4, pc}

0800230a <__swrite>:
 800230a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800230e:	461f      	mov	r7, r3
 8002310:	898b      	ldrh	r3, [r1, #12]
 8002312:	05db      	lsls	r3, r3, #23
 8002314:	4605      	mov	r5, r0
 8002316:	460c      	mov	r4, r1
 8002318:	4616      	mov	r6, r2
 800231a:	d505      	bpl.n	8002328 <__swrite+0x1e>
 800231c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002320:	2302      	movs	r3, #2
 8002322:	2200      	movs	r2, #0
 8002324:	f000 f83c 	bl	80023a0 <_lseek_r>
 8002328:	89a3      	ldrh	r3, [r4, #12]
 800232a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800232e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002332:	81a3      	strh	r3, [r4, #12]
 8002334:	4632      	mov	r2, r6
 8002336:	463b      	mov	r3, r7
 8002338:	4628      	mov	r0, r5
 800233a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800233e:	f000 b853 	b.w	80023e8 <_write_r>

08002342 <__sseek>:
 8002342:	b510      	push	{r4, lr}
 8002344:	460c      	mov	r4, r1
 8002346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800234a:	f000 f829 	bl	80023a0 <_lseek_r>
 800234e:	1c43      	adds	r3, r0, #1
 8002350:	89a3      	ldrh	r3, [r4, #12]
 8002352:	bf15      	itete	ne
 8002354:	6560      	strne	r0, [r4, #84]	; 0x54
 8002356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800235a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800235e:	81a3      	strheq	r3, [r4, #12]
 8002360:	bf18      	it	ne
 8002362:	81a3      	strhne	r3, [r4, #12]
 8002364:	bd10      	pop	{r4, pc}

08002366 <__sclose>:
 8002366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800236a:	f000 b809 	b.w	8002380 <_close_r>

0800236e <memset>:
 800236e:	4402      	add	r2, r0
 8002370:	4603      	mov	r3, r0
 8002372:	4293      	cmp	r3, r2
 8002374:	d100      	bne.n	8002378 <memset+0xa>
 8002376:	4770      	bx	lr
 8002378:	f803 1b01 	strb.w	r1, [r3], #1
 800237c:	e7f9      	b.n	8002372 <memset+0x4>
	...

08002380 <_close_r>:
 8002380:	b538      	push	{r3, r4, r5, lr}
 8002382:	4d06      	ldr	r5, [pc, #24]	; (800239c <_close_r+0x1c>)
 8002384:	2300      	movs	r3, #0
 8002386:	4604      	mov	r4, r0
 8002388:	4608      	mov	r0, r1
 800238a:	602b      	str	r3, [r5, #0]
 800238c:	f7fe fd39 	bl	8000e02 <_close>
 8002390:	1c43      	adds	r3, r0, #1
 8002392:	d102      	bne.n	800239a <_close_r+0x1a>
 8002394:	682b      	ldr	r3, [r5, #0]
 8002396:	b103      	cbz	r3, 800239a <_close_r+0x1a>
 8002398:	6023      	str	r3, [r4, #0]
 800239a:	bd38      	pop	{r3, r4, r5, pc}
 800239c:	2000021c 	.word	0x2000021c

080023a0 <_lseek_r>:
 80023a0:	b538      	push	{r3, r4, r5, lr}
 80023a2:	4d07      	ldr	r5, [pc, #28]	; (80023c0 <_lseek_r+0x20>)
 80023a4:	4604      	mov	r4, r0
 80023a6:	4608      	mov	r0, r1
 80023a8:	4611      	mov	r1, r2
 80023aa:	2200      	movs	r2, #0
 80023ac:	602a      	str	r2, [r5, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	f7fe fd4e 	bl	8000e50 <_lseek>
 80023b4:	1c43      	adds	r3, r0, #1
 80023b6:	d102      	bne.n	80023be <_lseek_r+0x1e>
 80023b8:	682b      	ldr	r3, [r5, #0]
 80023ba:	b103      	cbz	r3, 80023be <_lseek_r+0x1e>
 80023bc:	6023      	str	r3, [r4, #0]
 80023be:	bd38      	pop	{r3, r4, r5, pc}
 80023c0:	2000021c 	.word	0x2000021c

080023c4 <_read_r>:
 80023c4:	b538      	push	{r3, r4, r5, lr}
 80023c6:	4d07      	ldr	r5, [pc, #28]	; (80023e4 <_read_r+0x20>)
 80023c8:	4604      	mov	r4, r0
 80023ca:	4608      	mov	r0, r1
 80023cc:	4611      	mov	r1, r2
 80023ce:	2200      	movs	r2, #0
 80023d0:	602a      	str	r2, [r5, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	f7fe fcf8 	bl	8000dc8 <_read>
 80023d8:	1c43      	adds	r3, r0, #1
 80023da:	d102      	bne.n	80023e2 <_read_r+0x1e>
 80023dc:	682b      	ldr	r3, [r5, #0]
 80023de:	b103      	cbz	r3, 80023e2 <_read_r+0x1e>
 80023e0:	6023      	str	r3, [r4, #0]
 80023e2:	bd38      	pop	{r3, r4, r5, pc}
 80023e4:	2000021c 	.word	0x2000021c

080023e8 <_write_r>:
 80023e8:	b538      	push	{r3, r4, r5, lr}
 80023ea:	4d07      	ldr	r5, [pc, #28]	; (8002408 <_write_r+0x20>)
 80023ec:	4604      	mov	r4, r0
 80023ee:	4608      	mov	r0, r1
 80023f0:	4611      	mov	r1, r2
 80023f2:	2200      	movs	r2, #0
 80023f4:	602a      	str	r2, [r5, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	f7fe fa6f 	bl	80008da <_write>
 80023fc:	1c43      	adds	r3, r0, #1
 80023fe:	d102      	bne.n	8002406 <_write_r+0x1e>
 8002400:	682b      	ldr	r3, [r5, #0]
 8002402:	b103      	cbz	r3, 8002406 <_write_r+0x1e>
 8002404:	6023      	str	r3, [r4, #0]
 8002406:	bd38      	pop	{r3, r4, r5, pc}
 8002408:	2000021c 	.word	0x2000021c

0800240c <__errno>:
 800240c:	4b01      	ldr	r3, [pc, #4]	; (8002414 <__errno+0x8>)
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000064 	.word	0x20000064

08002418 <__libc_init_array>:
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	4d0d      	ldr	r5, [pc, #52]	; (8002450 <__libc_init_array+0x38>)
 800241c:	4c0d      	ldr	r4, [pc, #52]	; (8002454 <__libc_init_array+0x3c>)
 800241e:	1b64      	subs	r4, r4, r5
 8002420:	10a4      	asrs	r4, r4, #2
 8002422:	2600      	movs	r6, #0
 8002424:	42a6      	cmp	r6, r4
 8002426:	d109      	bne.n	800243c <__libc_init_array+0x24>
 8002428:	4d0b      	ldr	r5, [pc, #44]	; (8002458 <__libc_init_array+0x40>)
 800242a:	4c0c      	ldr	r4, [pc, #48]	; (800245c <__libc_init_array+0x44>)
 800242c:	f000 fdc0 	bl	8002fb0 <_init>
 8002430:	1b64      	subs	r4, r4, r5
 8002432:	10a4      	asrs	r4, r4, #2
 8002434:	2600      	movs	r6, #0
 8002436:	42a6      	cmp	r6, r4
 8002438:	d105      	bne.n	8002446 <__libc_init_array+0x2e>
 800243a:	bd70      	pop	{r4, r5, r6, pc}
 800243c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002440:	4798      	blx	r3
 8002442:	3601      	adds	r6, #1
 8002444:	e7ee      	b.n	8002424 <__libc_init_array+0xc>
 8002446:	f855 3b04 	ldr.w	r3, [r5], #4
 800244a:	4798      	blx	r3
 800244c:	3601      	adds	r6, #1
 800244e:	e7f2      	b.n	8002436 <__libc_init_array+0x1e>
 8002450:	08003034 	.word	0x08003034
 8002454:	08003034 	.word	0x08003034
 8002458:	08003034 	.word	0x08003034
 800245c:	08003038 	.word	0x08003038

08002460 <__retarget_lock_init_recursive>:
 8002460:	4770      	bx	lr

08002462 <__retarget_lock_acquire_recursive>:
 8002462:	4770      	bx	lr

08002464 <__retarget_lock_release_recursive>:
 8002464:	4770      	bx	lr
	...

08002468 <_free_r>:
 8002468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800246a:	2900      	cmp	r1, #0
 800246c:	d044      	beq.n	80024f8 <_free_r+0x90>
 800246e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002472:	9001      	str	r0, [sp, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	f1a1 0404 	sub.w	r4, r1, #4
 800247a:	bfb8      	it	lt
 800247c:	18e4      	addlt	r4, r4, r3
 800247e:	f000 f8df 	bl	8002640 <__malloc_lock>
 8002482:	4a1e      	ldr	r2, [pc, #120]	; (80024fc <_free_r+0x94>)
 8002484:	9801      	ldr	r0, [sp, #4]
 8002486:	6813      	ldr	r3, [r2, #0]
 8002488:	b933      	cbnz	r3, 8002498 <_free_r+0x30>
 800248a:	6063      	str	r3, [r4, #4]
 800248c:	6014      	str	r4, [r2, #0]
 800248e:	b003      	add	sp, #12
 8002490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002494:	f000 b8da 	b.w	800264c <__malloc_unlock>
 8002498:	42a3      	cmp	r3, r4
 800249a:	d908      	bls.n	80024ae <_free_r+0x46>
 800249c:	6825      	ldr	r5, [r4, #0]
 800249e:	1961      	adds	r1, r4, r5
 80024a0:	428b      	cmp	r3, r1
 80024a2:	bf01      	itttt	eq
 80024a4:	6819      	ldreq	r1, [r3, #0]
 80024a6:	685b      	ldreq	r3, [r3, #4]
 80024a8:	1949      	addeq	r1, r1, r5
 80024aa:	6021      	streq	r1, [r4, #0]
 80024ac:	e7ed      	b.n	800248a <_free_r+0x22>
 80024ae:	461a      	mov	r2, r3
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	b10b      	cbz	r3, 80024b8 <_free_r+0x50>
 80024b4:	42a3      	cmp	r3, r4
 80024b6:	d9fa      	bls.n	80024ae <_free_r+0x46>
 80024b8:	6811      	ldr	r1, [r2, #0]
 80024ba:	1855      	adds	r5, r2, r1
 80024bc:	42a5      	cmp	r5, r4
 80024be:	d10b      	bne.n	80024d8 <_free_r+0x70>
 80024c0:	6824      	ldr	r4, [r4, #0]
 80024c2:	4421      	add	r1, r4
 80024c4:	1854      	adds	r4, r2, r1
 80024c6:	42a3      	cmp	r3, r4
 80024c8:	6011      	str	r1, [r2, #0]
 80024ca:	d1e0      	bne.n	800248e <_free_r+0x26>
 80024cc:	681c      	ldr	r4, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	6053      	str	r3, [r2, #4]
 80024d2:	440c      	add	r4, r1
 80024d4:	6014      	str	r4, [r2, #0]
 80024d6:	e7da      	b.n	800248e <_free_r+0x26>
 80024d8:	d902      	bls.n	80024e0 <_free_r+0x78>
 80024da:	230c      	movs	r3, #12
 80024dc:	6003      	str	r3, [r0, #0]
 80024de:	e7d6      	b.n	800248e <_free_r+0x26>
 80024e0:	6825      	ldr	r5, [r4, #0]
 80024e2:	1961      	adds	r1, r4, r5
 80024e4:	428b      	cmp	r3, r1
 80024e6:	bf04      	itt	eq
 80024e8:	6819      	ldreq	r1, [r3, #0]
 80024ea:	685b      	ldreq	r3, [r3, #4]
 80024ec:	6063      	str	r3, [r4, #4]
 80024ee:	bf04      	itt	eq
 80024f0:	1949      	addeq	r1, r1, r5
 80024f2:	6021      	streq	r1, [r4, #0]
 80024f4:	6054      	str	r4, [r2, #4]
 80024f6:	e7ca      	b.n	800248e <_free_r+0x26>
 80024f8:	b003      	add	sp, #12
 80024fa:	bd30      	pop	{r4, r5, pc}
 80024fc:	20000224 	.word	0x20000224

08002500 <sbrk_aligned>:
 8002500:	b570      	push	{r4, r5, r6, lr}
 8002502:	4e0e      	ldr	r6, [pc, #56]	; (800253c <sbrk_aligned+0x3c>)
 8002504:	460c      	mov	r4, r1
 8002506:	6831      	ldr	r1, [r6, #0]
 8002508:	4605      	mov	r5, r0
 800250a:	b911      	cbnz	r1, 8002512 <sbrk_aligned+0x12>
 800250c:	f000 fcbc 	bl	8002e88 <_sbrk_r>
 8002510:	6030      	str	r0, [r6, #0]
 8002512:	4621      	mov	r1, r4
 8002514:	4628      	mov	r0, r5
 8002516:	f000 fcb7 	bl	8002e88 <_sbrk_r>
 800251a:	1c43      	adds	r3, r0, #1
 800251c:	d00a      	beq.n	8002534 <sbrk_aligned+0x34>
 800251e:	1cc4      	adds	r4, r0, #3
 8002520:	f024 0403 	bic.w	r4, r4, #3
 8002524:	42a0      	cmp	r0, r4
 8002526:	d007      	beq.n	8002538 <sbrk_aligned+0x38>
 8002528:	1a21      	subs	r1, r4, r0
 800252a:	4628      	mov	r0, r5
 800252c:	f000 fcac 	bl	8002e88 <_sbrk_r>
 8002530:	3001      	adds	r0, #1
 8002532:	d101      	bne.n	8002538 <sbrk_aligned+0x38>
 8002534:	f04f 34ff 	mov.w	r4, #4294967295
 8002538:	4620      	mov	r0, r4
 800253a:	bd70      	pop	{r4, r5, r6, pc}
 800253c:	20000228 	.word	0x20000228

08002540 <_malloc_r>:
 8002540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002544:	1ccd      	adds	r5, r1, #3
 8002546:	f025 0503 	bic.w	r5, r5, #3
 800254a:	3508      	adds	r5, #8
 800254c:	2d0c      	cmp	r5, #12
 800254e:	bf38      	it	cc
 8002550:	250c      	movcc	r5, #12
 8002552:	2d00      	cmp	r5, #0
 8002554:	4607      	mov	r7, r0
 8002556:	db01      	blt.n	800255c <_malloc_r+0x1c>
 8002558:	42a9      	cmp	r1, r5
 800255a:	d905      	bls.n	8002568 <_malloc_r+0x28>
 800255c:	230c      	movs	r3, #12
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	2600      	movs	r6, #0
 8002562:	4630      	mov	r0, r6
 8002564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002568:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800263c <_malloc_r+0xfc>
 800256c:	f000 f868 	bl	8002640 <__malloc_lock>
 8002570:	f8d8 3000 	ldr.w	r3, [r8]
 8002574:	461c      	mov	r4, r3
 8002576:	bb5c      	cbnz	r4, 80025d0 <_malloc_r+0x90>
 8002578:	4629      	mov	r1, r5
 800257a:	4638      	mov	r0, r7
 800257c:	f7ff ffc0 	bl	8002500 <sbrk_aligned>
 8002580:	1c43      	adds	r3, r0, #1
 8002582:	4604      	mov	r4, r0
 8002584:	d155      	bne.n	8002632 <_malloc_r+0xf2>
 8002586:	f8d8 4000 	ldr.w	r4, [r8]
 800258a:	4626      	mov	r6, r4
 800258c:	2e00      	cmp	r6, #0
 800258e:	d145      	bne.n	800261c <_malloc_r+0xdc>
 8002590:	2c00      	cmp	r4, #0
 8002592:	d048      	beq.n	8002626 <_malloc_r+0xe6>
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	4631      	mov	r1, r6
 8002598:	4638      	mov	r0, r7
 800259a:	eb04 0903 	add.w	r9, r4, r3
 800259e:	f000 fc73 	bl	8002e88 <_sbrk_r>
 80025a2:	4581      	cmp	r9, r0
 80025a4:	d13f      	bne.n	8002626 <_malloc_r+0xe6>
 80025a6:	6821      	ldr	r1, [r4, #0]
 80025a8:	1a6d      	subs	r5, r5, r1
 80025aa:	4629      	mov	r1, r5
 80025ac:	4638      	mov	r0, r7
 80025ae:	f7ff ffa7 	bl	8002500 <sbrk_aligned>
 80025b2:	3001      	adds	r0, #1
 80025b4:	d037      	beq.n	8002626 <_malloc_r+0xe6>
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	442b      	add	r3, r5
 80025ba:	6023      	str	r3, [r4, #0]
 80025bc:	f8d8 3000 	ldr.w	r3, [r8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d038      	beq.n	8002636 <_malloc_r+0xf6>
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	42a2      	cmp	r2, r4
 80025c8:	d12b      	bne.n	8002622 <_malloc_r+0xe2>
 80025ca:	2200      	movs	r2, #0
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	e00f      	b.n	80025f0 <_malloc_r+0xb0>
 80025d0:	6822      	ldr	r2, [r4, #0]
 80025d2:	1b52      	subs	r2, r2, r5
 80025d4:	d41f      	bmi.n	8002616 <_malloc_r+0xd6>
 80025d6:	2a0b      	cmp	r2, #11
 80025d8:	d917      	bls.n	800260a <_malloc_r+0xca>
 80025da:	1961      	adds	r1, r4, r5
 80025dc:	42a3      	cmp	r3, r4
 80025de:	6025      	str	r5, [r4, #0]
 80025e0:	bf18      	it	ne
 80025e2:	6059      	strne	r1, [r3, #4]
 80025e4:	6863      	ldr	r3, [r4, #4]
 80025e6:	bf08      	it	eq
 80025e8:	f8c8 1000 	streq.w	r1, [r8]
 80025ec:	5162      	str	r2, [r4, r5]
 80025ee:	604b      	str	r3, [r1, #4]
 80025f0:	4638      	mov	r0, r7
 80025f2:	f104 060b 	add.w	r6, r4, #11
 80025f6:	f000 f829 	bl	800264c <__malloc_unlock>
 80025fa:	f026 0607 	bic.w	r6, r6, #7
 80025fe:	1d23      	adds	r3, r4, #4
 8002600:	1af2      	subs	r2, r6, r3
 8002602:	d0ae      	beq.n	8002562 <_malloc_r+0x22>
 8002604:	1b9b      	subs	r3, r3, r6
 8002606:	50a3      	str	r3, [r4, r2]
 8002608:	e7ab      	b.n	8002562 <_malloc_r+0x22>
 800260a:	42a3      	cmp	r3, r4
 800260c:	6862      	ldr	r2, [r4, #4]
 800260e:	d1dd      	bne.n	80025cc <_malloc_r+0x8c>
 8002610:	f8c8 2000 	str.w	r2, [r8]
 8002614:	e7ec      	b.n	80025f0 <_malloc_r+0xb0>
 8002616:	4623      	mov	r3, r4
 8002618:	6864      	ldr	r4, [r4, #4]
 800261a:	e7ac      	b.n	8002576 <_malloc_r+0x36>
 800261c:	4634      	mov	r4, r6
 800261e:	6876      	ldr	r6, [r6, #4]
 8002620:	e7b4      	b.n	800258c <_malloc_r+0x4c>
 8002622:	4613      	mov	r3, r2
 8002624:	e7cc      	b.n	80025c0 <_malloc_r+0x80>
 8002626:	230c      	movs	r3, #12
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	4638      	mov	r0, r7
 800262c:	f000 f80e 	bl	800264c <__malloc_unlock>
 8002630:	e797      	b.n	8002562 <_malloc_r+0x22>
 8002632:	6025      	str	r5, [r4, #0]
 8002634:	e7dc      	b.n	80025f0 <_malloc_r+0xb0>
 8002636:	605b      	str	r3, [r3, #4]
 8002638:	deff      	udf	#255	; 0xff
 800263a:	bf00      	nop
 800263c:	20000224 	.word	0x20000224

08002640 <__malloc_lock>:
 8002640:	4801      	ldr	r0, [pc, #4]	; (8002648 <__malloc_lock+0x8>)
 8002642:	f7ff bf0e 	b.w	8002462 <__retarget_lock_acquire_recursive>
 8002646:	bf00      	nop
 8002648:	20000220 	.word	0x20000220

0800264c <__malloc_unlock>:
 800264c:	4801      	ldr	r0, [pc, #4]	; (8002654 <__malloc_unlock+0x8>)
 800264e:	f7ff bf09 	b.w	8002464 <__retarget_lock_release_recursive>
 8002652:	bf00      	nop
 8002654:	20000220 	.word	0x20000220

08002658 <__sfputc_r>:
 8002658:	6893      	ldr	r3, [r2, #8]
 800265a:	3b01      	subs	r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	b410      	push	{r4}
 8002660:	6093      	str	r3, [r2, #8]
 8002662:	da08      	bge.n	8002676 <__sfputc_r+0x1e>
 8002664:	6994      	ldr	r4, [r2, #24]
 8002666:	42a3      	cmp	r3, r4
 8002668:	db01      	blt.n	800266e <__sfputc_r+0x16>
 800266a:	290a      	cmp	r1, #10
 800266c:	d103      	bne.n	8002676 <__sfputc_r+0x1e>
 800266e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002672:	f000 bb73 	b.w	8002d5c <__swbuf_r>
 8002676:	6813      	ldr	r3, [r2, #0]
 8002678:	1c58      	adds	r0, r3, #1
 800267a:	6010      	str	r0, [r2, #0]
 800267c:	7019      	strb	r1, [r3, #0]
 800267e:	4608      	mov	r0, r1
 8002680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002684:	4770      	bx	lr

08002686 <__sfputs_r>:
 8002686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002688:	4606      	mov	r6, r0
 800268a:	460f      	mov	r7, r1
 800268c:	4614      	mov	r4, r2
 800268e:	18d5      	adds	r5, r2, r3
 8002690:	42ac      	cmp	r4, r5
 8002692:	d101      	bne.n	8002698 <__sfputs_r+0x12>
 8002694:	2000      	movs	r0, #0
 8002696:	e007      	b.n	80026a8 <__sfputs_r+0x22>
 8002698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800269c:	463a      	mov	r2, r7
 800269e:	4630      	mov	r0, r6
 80026a0:	f7ff ffda 	bl	8002658 <__sfputc_r>
 80026a4:	1c43      	adds	r3, r0, #1
 80026a6:	d1f3      	bne.n	8002690 <__sfputs_r+0xa>
 80026a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080026ac <_vfiprintf_r>:
 80026ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b0:	460d      	mov	r5, r1
 80026b2:	b09d      	sub	sp, #116	; 0x74
 80026b4:	4614      	mov	r4, r2
 80026b6:	4698      	mov	r8, r3
 80026b8:	4606      	mov	r6, r0
 80026ba:	b118      	cbz	r0, 80026c4 <_vfiprintf_r+0x18>
 80026bc:	6a03      	ldr	r3, [r0, #32]
 80026be:	b90b      	cbnz	r3, 80026c4 <_vfiprintf_r+0x18>
 80026c0:	f7ff fdca 	bl	8002258 <__sinit>
 80026c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80026c6:	07d9      	lsls	r1, r3, #31
 80026c8:	d405      	bmi.n	80026d6 <_vfiprintf_r+0x2a>
 80026ca:	89ab      	ldrh	r3, [r5, #12]
 80026cc:	059a      	lsls	r2, r3, #22
 80026ce:	d402      	bmi.n	80026d6 <_vfiprintf_r+0x2a>
 80026d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80026d2:	f7ff fec6 	bl	8002462 <__retarget_lock_acquire_recursive>
 80026d6:	89ab      	ldrh	r3, [r5, #12]
 80026d8:	071b      	lsls	r3, r3, #28
 80026da:	d501      	bpl.n	80026e0 <_vfiprintf_r+0x34>
 80026dc:	692b      	ldr	r3, [r5, #16]
 80026de:	b99b      	cbnz	r3, 8002708 <_vfiprintf_r+0x5c>
 80026e0:	4629      	mov	r1, r5
 80026e2:	4630      	mov	r0, r6
 80026e4:	f000 fb78 	bl	8002dd8 <__swsetup_r>
 80026e8:	b170      	cbz	r0, 8002708 <_vfiprintf_r+0x5c>
 80026ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80026ec:	07dc      	lsls	r4, r3, #31
 80026ee:	d504      	bpl.n	80026fa <_vfiprintf_r+0x4e>
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295
 80026f4:	b01d      	add	sp, #116	; 0x74
 80026f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026fa:	89ab      	ldrh	r3, [r5, #12]
 80026fc:	0598      	lsls	r0, r3, #22
 80026fe:	d4f7      	bmi.n	80026f0 <_vfiprintf_r+0x44>
 8002700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002702:	f7ff feaf 	bl	8002464 <__retarget_lock_release_recursive>
 8002706:	e7f3      	b.n	80026f0 <_vfiprintf_r+0x44>
 8002708:	2300      	movs	r3, #0
 800270a:	9309      	str	r3, [sp, #36]	; 0x24
 800270c:	2320      	movs	r3, #32
 800270e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002712:	f8cd 800c 	str.w	r8, [sp, #12]
 8002716:	2330      	movs	r3, #48	; 0x30
 8002718:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80028cc <_vfiprintf_r+0x220>
 800271c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002720:	f04f 0901 	mov.w	r9, #1
 8002724:	4623      	mov	r3, r4
 8002726:	469a      	mov	sl, r3
 8002728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800272c:	b10a      	cbz	r2, 8002732 <_vfiprintf_r+0x86>
 800272e:	2a25      	cmp	r2, #37	; 0x25
 8002730:	d1f9      	bne.n	8002726 <_vfiprintf_r+0x7a>
 8002732:	ebba 0b04 	subs.w	fp, sl, r4
 8002736:	d00b      	beq.n	8002750 <_vfiprintf_r+0xa4>
 8002738:	465b      	mov	r3, fp
 800273a:	4622      	mov	r2, r4
 800273c:	4629      	mov	r1, r5
 800273e:	4630      	mov	r0, r6
 8002740:	f7ff ffa1 	bl	8002686 <__sfputs_r>
 8002744:	3001      	adds	r0, #1
 8002746:	f000 80a9 	beq.w	800289c <_vfiprintf_r+0x1f0>
 800274a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800274c:	445a      	add	r2, fp
 800274e:	9209      	str	r2, [sp, #36]	; 0x24
 8002750:	f89a 3000 	ldrb.w	r3, [sl]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80a1 	beq.w	800289c <_vfiprintf_r+0x1f0>
 800275a:	2300      	movs	r3, #0
 800275c:	f04f 32ff 	mov.w	r2, #4294967295
 8002760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002764:	f10a 0a01 	add.w	sl, sl, #1
 8002768:	9304      	str	r3, [sp, #16]
 800276a:	9307      	str	r3, [sp, #28]
 800276c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002770:	931a      	str	r3, [sp, #104]	; 0x68
 8002772:	4654      	mov	r4, sl
 8002774:	2205      	movs	r2, #5
 8002776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800277a:	4854      	ldr	r0, [pc, #336]	; (80028cc <_vfiprintf_r+0x220>)
 800277c:	f7fd fd30 	bl	80001e0 <memchr>
 8002780:	9a04      	ldr	r2, [sp, #16]
 8002782:	b9d8      	cbnz	r0, 80027bc <_vfiprintf_r+0x110>
 8002784:	06d1      	lsls	r1, r2, #27
 8002786:	bf44      	itt	mi
 8002788:	2320      	movmi	r3, #32
 800278a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800278e:	0713      	lsls	r3, r2, #28
 8002790:	bf44      	itt	mi
 8002792:	232b      	movmi	r3, #43	; 0x2b
 8002794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002798:	f89a 3000 	ldrb.w	r3, [sl]
 800279c:	2b2a      	cmp	r3, #42	; 0x2a
 800279e:	d015      	beq.n	80027cc <_vfiprintf_r+0x120>
 80027a0:	9a07      	ldr	r2, [sp, #28]
 80027a2:	4654      	mov	r4, sl
 80027a4:	2000      	movs	r0, #0
 80027a6:	f04f 0c0a 	mov.w	ip, #10
 80027aa:	4621      	mov	r1, r4
 80027ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027b0:	3b30      	subs	r3, #48	; 0x30
 80027b2:	2b09      	cmp	r3, #9
 80027b4:	d94d      	bls.n	8002852 <_vfiprintf_r+0x1a6>
 80027b6:	b1b0      	cbz	r0, 80027e6 <_vfiprintf_r+0x13a>
 80027b8:	9207      	str	r2, [sp, #28]
 80027ba:	e014      	b.n	80027e6 <_vfiprintf_r+0x13a>
 80027bc:	eba0 0308 	sub.w	r3, r0, r8
 80027c0:	fa09 f303 	lsl.w	r3, r9, r3
 80027c4:	4313      	orrs	r3, r2
 80027c6:	9304      	str	r3, [sp, #16]
 80027c8:	46a2      	mov	sl, r4
 80027ca:	e7d2      	b.n	8002772 <_vfiprintf_r+0xc6>
 80027cc:	9b03      	ldr	r3, [sp, #12]
 80027ce:	1d19      	adds	r1, r3, #4
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	9103      	str	r1, [sp, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bfbb      	ittet	lt
 80027d8:	425b      	neglt	r3, r3
 80027da:	f042 0202 	orrlt.w	r2, r2, #2
 80027de:	9307      	strge	r3, [sp, #28]
 80027e0:	9307      	strlt	r3, [sp, #28]
 80027e2:	bfb8      	it	lt
 80027e4:	9204      	strlt	r2, [sp, #16]
 80027e6:	7823      	ldrb	r3, [r4, #0]
 80027e8:	2b2e      	cmp	r3, #46	; 0x2e
 80027ea:	d10c      	bne.n	8002806 <_vfiprintf_r+0x15a>
 80027ec:	7863      	ldrb	r3, [r4, #1]
 80027ee:	2b2a      	cmp	r3, #42	; 0x2a
 80027f0:	d134      	bne.n	800285c <_vfiprintf_r+0x1b0>
 80027f2:	9b03      	ldr	r3, [sp, #12]
 80027f4:	1d1a      	adds	r2, r3, #4
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	9203      	str	r2, [sp, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	bfb8      	it	lt
 80027fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8002802:	3402      	adds	r4, #2
 8002804:	9305      	str	r3, [sp, #20]
 8002806:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80028dc <_vfiprintf_r+0x230>
 800280a:	7821      	ldrb	r1, [r4, #0]
 800280c:	2203      	movs	r2, #3
 800280e:	4650      	mov	r0, sl
 8002810:	f7fd fce6 	bl	80001e0 <memchr>
 8002814:	b138      	cbz	r0, 8002826 <_vfiprintf_r+0x17a>
 8002816:	9b04      	ldr	r3, [sp, #16]
 8002818:	eba0 000a 	sub.w	r0, r0, sl
 800281c:	2240      	movs	r2, #64	; 0x40
 800281e:	4082      	lsls	r2, r0
 8002820:	4313      	orrs	r3, r2
 8002822:	3401      	adds	r4, #1
 8002824:	9304      	str	r3, [sp, #16]
 8002826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800282a:	4829      	ldr	r0, [pc, #164]	; (80028d0 <_vfiprintf_r+0x224>)
 800282c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002830:	2206      	movs	r2, #6
 8002832:	f7fd fcd5 	bl	80001e0 <memchr>
 8002836:	2800      	cmp	r0, #0
 8002838:	d03f      	beq.n	80028ba <_vfiprintf_r+0x20e>
 800283a:	4b26      	ldr	r3, [pc, #152]	; (80028d4 <_vfiprintf_r+0x228>)
 800283c:	bb1b      	cbnz	r3, 8002886 <_vfiprintf_r+0x1da>
 800283e:	9b03      	ldr	r3, [sp, #12]
 8002840:	3307      	adds	r3, #7
 8002842:	f023 0307 	bic.w	r3, r3, #7
 8002846:	3308      	adds	r3, #8
 8002848:	9303      	str	r3, [sp, #12]
 800284a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800284c:	443b      	add	r3, r7
 800284e:	9309      	str	r3, [sp, #36]	; 0x24
 8002850:	e768      	b.n	8002724 <_vfiprintf_r+0x78>
 8002852:	fb0c 3202 	mla	r2, ip, r2, r3
 8002856:	460c      	mov	r4, r1
 8002858:	2001      	movs	r0, #1
 800285a:	e7a6      	b.n	80027aa <_vfiprintf_r+0xfe>
 800285c:	2300      	movs	r3, #0
 800285e:	3401      	adds	r4, #1
 8002860:	9305      	str	r3, [sp, #20]
 8002862:	4619      	mov	r1, r3
 8002864:	f04f 0c0a 	mov.w	ip, #10
 8002868:	4620      	mov	r0, r4
 800286a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800286e:	3a30      	subs	r2, #48	; 0x30
 8002870:	2a09      	cmp	r2, #9
 8002872:	d903      	bls.n	800287c <_vfiprintf_r+0x1d0>
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0c6      	beq.n	8002806 <_vfiprintf_r+0x15a>
 8002878:	9105      	str	r1, [sp, #20]
 800287a:	e7c4      	b.n	8002806 <_vfiprintf_r+0x15a>
 800287c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002880:	4604      	mov	r4, r0
 8002882:	2301      	movs	r3, #1
 8002884:	e7f0      	b.n	8002868 <_vfiprintf_r+0x1bc>
 8002886:	ab03      	add	r3, sp, #12
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	462a      	mov	r2, r5
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <_vfiprintf_r+0x22c>)
 800288e:	a904      	add	r1, sp, #16
 8002890:	4630      	mov	r0, r6
 8002892:	f3af 8000 	nop.w
 8002896:	4607      	mov	r7, r0
 8002898:	1c78      	adds	r0, r7, #1
 800289a:	d1d6      	bne.n	800284a <_vfiprintf_r+0x19e>
 800289c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800289e:	07d9      	lsls	r1, r3, #31
 80028a0:	d405      	bmi.n	80028ae <_vfiprintf_r+0x202>
 80028a2:	89ab      	ldrh	r3, [r5, #12]
 80028a4:	059a      	lsls	r2, r3, #22
 80028a6:	d402      	bmi.n	80028ae <_vfiprintf_r+0x202>
 80028a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028aa:	f7ff fddb 	bl	8002464 <__retarget_lock_release_recursive>
 80028ae:	89ab      	ldrh	r3, [r5, #12]
 80028b0:	065b      	lsls	r3, r3, #25
 80028b2:	f53f af1d 	bmi.w	80026f0 <_vfiprintf_r+0x44>
 80028b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80028b8:	e71c      	b.n	80026f4 <_vfiprintf_r+0x48>
 80028ba:	ab03      	add	r3, sp, #12
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	462a      	mov	r2, r5
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <_vfiprintf_r+0x22c>)
 80028c2:	a904      	add	r1, sp, #16
 80028c4:	4630      	mov	r0, r6
 80028c6:	f000 f879 	bl	80029bc <_printf_i>
 80028ca:	e7e4      	b.n	8002896 <_vfiprintf_r+0x1ea>
 80028cc:	08002ff8 	.word	0x08002ff8
 80028d0:	08003002 	.word	0x08003002
 80028d4:	00000000 	.word	0x00000000
 80028d8:	08002687 	.word	0x08002687
 80028dc:	08002ffe 	.word	0x08002ffe

080028e0 <_printf_common>:
 80028e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028e4:	4616      	mov	r6, r2
 80028e6:	4699      	mov	r9, r3
 80028e8:	688a      	ldr	r2, [r1, #8]
 80028ea:	690b      	ldr	r3, [r1, #16]
 80028ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028f0:	4293      	cmp	r3, r2
 80028f2:	bfb8      	it	lt
 80028f4:	4613      	movlt	r3, r2
 80028f6:	6033      	str	r3, [r6, #0]
 80028f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028fc:	4607      	mov	r7, r0
 80028fe:	460c      	mov	r4, r1
 8002900:	b10a      	cbz	r2, 8002906 <_printf_common+0x26>
 8002902:	3301      	adds	r3, #1
 8002904:	6033      	str	r3, [r6, #0]
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	0699      	lsls	r1, r3, #26
 800290a:	bf42      	ittt	mi
 800290c:	6833      	ldrmi	r3, [r6, #0]
 800290e:	3302      	addmi	r3, #2
 8002910:	6033      	strmi	r3, [r6, #0]
 8002912:	6825      	ldr	r5, [r4, #0]
 8002914:	f015 0506 	ands.w	r5, r5, #6
 8002918:	d106      	bne.n	8002928 <_printf_common+0x48>
 800291a:	f104 0a19 	add.w	sl, r4, #25
 800291e:	68e3      	ldr	r3, [r4, #12]
 8002920:	6832      	ldr	r2, [r6, #0]
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	42ab      	cmp	r3, r5
 8002926:	dc26      	bgt.n	8002976 <_printf_common+0x96>
 8002928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800292c:	1e13      	subs	r3, r2, #0
 800292e:	6822      	ldr	r2, [r4, #0]
 8002930:	bf18      	it	ne
 8002932:	2301      	movne	r3, #1
 8002934:	0692      	lsls	r2, r2, #26
 8002936:	d42b      	bmi.n	8002990 <_printf_common+0xb0>
 8002938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800293c:	4649      	mov	r1, r9
 800293e:	4638      	mov	r0, r7
 8002940:	47c0      	blx	r8
 8002942:	3001      	adds	r0, #1
 8002944:	d01e      	beq.n	8002984 <_printf_common+0xa4>
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	6922      	ldr	r2, [r4, #16]
 800294a:	f003 0306 	and.w	r3, r3, #6
 800294e:	2b04      	cmp	r3, #4
 8002950:	bf02      	ittt	eq
 8002952:	68e5      	ldreq	r5, [r4, #12]
 8002954:	6833      	ldreq	r3, [r6, #0]
 8002956:	1aed      	subeq	r5, r5, r3
 8002958:	68a3      	ldr	r3, [r4, #8]
 800295a:	bf0c      	ite	eq
 800295c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002960:	2500      	movne	r5, #0
 8002962:	4293      	cmp	r3, r2
 8002964:	bfc4      	itt	gt
 8002966:	1a9b      	subgt	r3, r3, r2
 8002968:	18ed      	addgt	r5, r5, r3
 800296a:	2600      	movs	r6, #0
 800296c:	341a      	adds	r4, #26
 800296e:	42b5      	cmp	r5, r6
 8002970:	d11a      	bne.n	80029a8 <_printf_common+0xc8>
 8002972:	2000      	movs	r0, #0
 8002974:	e008      	b.n	8002988 <_printf_common+0xa8>
 8002976:	2301      	movs	r3, #1
 8002978:	4652      	mov	r2, sl
 800297a:	4649      	mov	r1, r9
 800297c:	4638      	mov	r0, r7
 800297e:	47c0      	blx	r8
 8002980:	3001      	adds	r0, #1
 8002982:	d103      	bne.n	800298c <_printf_common+0xac>
 8002984:	f04f 30ff 	mov.w	r0, #4294967295
 8002988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800298c:	3501      	adds	r5, #1
 800298e:	e7c6      	b.n	800291e <_printf_common+0x3e>
 8002990:	18e1      	adds	r1, r4, r3
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	2030      	movs	r0, #48	; 0x30
 8002996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800299a:	4422      	add	r2, r4
 800299c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029a4:	3302      	adds	r3, #2
 80029a6:	e7c7      	b.n	8002938 <_printf_common+0x58>
 80029a8:	2301      	movs	r3, #1
 80029aa:	4622      	mov	r2, r4
 80029ac:	4649      	mov	r1, r9
 80029ae:	4638      	mov	r0, r7
 80029b0:	47c0      	blx	r8
 80029b2:	3001      	adds	r0, #1
 80029b4:	d0e6      	beq.n	8002984 <_printf_common+0xa4>
 80029b6:	3601      	adds	r6, #1
 80029b8:	e7d9      	b.n	800296e <_printf_common+0x8e>
	...

080029bc <_printf_i>:
 80029bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029c0:	7e0f      	ldrb	r7, [r1, #24]
 80029c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80029c4:	2f78      	cmp	r7, #120	; 0x78
 80029c6:	4691      	mov	r9, r2
 80029c8:	4680      	mov	r8, r0
 80029ca:	460c      	mov	r4, r1
 80029cc:	469a      	mov	sl, r3
 80029ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80029d2:	d807      	bhi.n	80029e4 <_printf_i+0x28>
 80029d4:	2f62      	cmp	r7, #98	; 0x62
 80029d6:	d80a      	bhi.n	80029ee <_printf_i+0x32>
 80029d8:	2f00      	cmp	r7, #0
 80029da:	f000 80d4 	beq.w	8002b86 <_printf_i+0x1ca>
 80029de:	2f58      	cmp	r7, #88	; 0x58
 80029e0:	f000 80c0 	beq.w	8002b64 <_printf_i+0x1a8>
 80029e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80029ec:	e03a      	b.n	8002a64 <_printf_i+0xa8>
 80029ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80029f2:	2b15      	cmp	r3, #21
 80029f4:	d8f6      	bhi.n	80029e4 <_printf_i+0x28>
 80029f6:	a101      	add	r1, pc, #4	; (adr r1, 80029fc <_printf_i+0x40>)
 80029f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029fc:	08002a55 	.word	0x08002a55
 8002a00:	08002a69 	.word	0x08002a69
 8002a04:	080029e5 	.word	0x080029e5
 8002a08:	080029e5 	.word	0x080029e5
 8002a0c:	080029e5 	.word	0x080029e5
 8002a10:	080029e5 	.word	0x080029e5
 8002a14:	08002a69 	.word	0x08002a69
 8002a18:	080029e5 	.word	0x080029e5
 8002a1c:	080029e5 	.word	0x080029e5
 8002a20:	080029e5 	.word	0x080029e5
 8002a24:	080029e5 	.word	0x080029e5
 8002a28:	08002b6d 	.word	0x08002b6d
 8002a2c:	08002a95 	.word	0x08002a95
 8002a30:	08002b27 	.word	0x08002b27
 8002a34:	080029e5 	.word	0x080029e5
 8002a38:	080029e5 	.word	0x080029e5
 8002a3c:	08002b8f 	.word	0x08002b8f
 8002a40:	080029e5 	.word	0x080029e5
 8002a44:	08002a95 	.word	0x08002a95
 8002a48:	080029e5 	.word	0x080029e5
 8002a4c:	080029e5 	.word	0x080029e5
 8002a50:	08002b2f 	.word	0x08002b2f
 8002a54:	682b      	ldr	r3, [r5, #0]
 8002a56:	1d1a      	adds	r2, r3, #4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	602a      	str	r2, [r5, #0]
 8002a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a64:	2301      	movs	r3, #1
 8002a66:	e09f      	b.n	8002ba8 <_printf_i+0x1ec>
 8002a68:	6820      	ldr	r0, [r4, #0]
 8002a6a:	682b      	ldr	r3, [r5, #0]
 8002a6c:	0607      	lsls	r7, r0, #24
 8002a6e:	f103 0104 	add.w	r1, r3, #4
 8002a72:	6029      	str	r1, [r5, #0]
 8002a74:	d501      	bpl.n	8002a7a <_printf_i+0xbe>
 8002a76:	681e      	ldr	r6, [r3, #0]
 8002a78:	e003      	b.n	8002a82 <_printf_i+0xc6>
 8002a7a:	0646      	lsls	r6, r0, #25
 8002a7c:	d5fb      	bpl.n	8002a76 <_printf_i+0xba>
 8002a7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002a82:	2e00      	cmp	r6, #0
 8002a84:	da03      	bge.n	8002a8e <_printf_i+0xd2>
 8002a86:	232d      	movs	r3, #45	; 0x2d
 8002a88:	4276      	negs	r6, r6
 8002a8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a8e:	485a      	ldr	r0, [pc, #360]	; (8002bf8 <_printf_i+0x23c>)
 8002a90:	230a      	movs	r3, #10
 8002a92:	e012      	b.n	8002aba <_printf_i+0xfe>
 8002a94:	682b      	ldr	r3, [r5, #0]
 8002a96:	6820      	ldr	r0, [r4, #0]
 8002a98:	1d19      	adds	r1, r3, #4
 8002a9a:	6029      	str	r1, [r5, #0]
 8002a9c:	0605      	lsls	r5, r0, #24
 8002a9e:	d501      	bpl.n	8002aa4 <_printf_i+0xe8>
 8002aa0:	681e      	ldr	r6, [r3, #0]
 8002aa2:	e002      	b.n	8002aaa <_printf_i+0xee>
 8002aa4:	0641      	lsls	r1, r0, #25
 8002aa6:	d5fb      	bpl.n	8002aa0 <_printf_i+0xe4>
 8002aa8:	881e      	ldrh	r6, [r3, #0]
 8002aaa:	4853      	ldr	r0, [pc, #332]	; (8002bf8 <_printf_i+0x23c>)
 8002aac:	2f6f      	cmp	r7, #111	; 0x6f
 8002aae:	bf0c      	ite	eq
 8002ab0:	2308      	moveq	r3, #8
 8002ab2:	230a      	movne	r3, #10
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002aba:	6865      	ldr	r5, [r4, #4]
 8002abc:	60a5      	str	r5, [r4, #8]
 8002abe:	2d00      	cmp	r5, #0
 8002ac0:	bfa2      	ittt	ge
 8002ac2:	6821      	ldrge	r1, [r4, #0]
 8002ac4:	f021 0104 	bicge.w	r1, r1, #4
 8002ac8:	6021      	strge	r1, [r4, #0]
 8002aca:	b90e      	cbnz	r6, 8002ad0 <_printf_i+0x114>
 8002acc:	2d00      	cmp	r5, #0
 8002ace:	d04b      	beq.n	8002b68 <_printf_i+0x1ac>
 8002ad0:	4615      	mov	r5, r2
 8002ad2:	fbb6 f1f3 	udiv	r1, r6, r3
 8002ad6:	fb03 6711 	mls	r7, r3, r1, r6
 8002ada:	5dc7      	ldrb	r7, [r0, r7]
 8002adc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002ae0:	4637      	mov	r7, r6
 8002ae2:	42bb      	cmp	r3, r7
 8002ae4:	460e      	mov	r6, r1
 8002ae6:	d9f4      	bls.n	8002ad2 <_printf_i+0x116>
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d10b      	bne.n	8002b04 <_printf_i+0x148>
 8002aec:	6823      	ldr	r3, [r4, #0]
 8002aee:	07de      	lsls	r6, r3, #31
 8002af0:	d508      	bpl.n	8002b04 <_printf_i+0x148>
 8002af2:	6923      	ldr	r3, [r4, #16]
 8002af4:	6861      	ldr	r1, [r4, #4]
 8002af6:	4299      	cmp	r1, r3
 8002af8:	bfde      	ittt	le
 8002afa:	2330      	movle	r3, #48	; 0x30
 8002afc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b04:	1b52      	subs	r2, r2, r5
 8002b06:	6122      	str	r2, [r4, #16]
 8002b08:	f8cd a000 	str.w	sl, [sp]
 8002b0c:	464b      	mov	r3, r9
 8002b0e:	aa03      	add	r2, sp, #12
 8002b10:	4621      	mov	r1, r4
 8002b12:	4640      	mov	r0, r8
 8002b14:	f7ff fee4 	bl	80028e0 <_printf_common>
 8002b18:	3001      	adds	r0, #1
 8002b1a:	d14a      	bne.n	8002bb2 <_printf_i+0x1f6>
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b20:	b004      	add	sp, #16
 8002b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	f043 0320 	orr.w	r3, r3, #32
 8002b2c:	6023      	str	r3, [r4, #0]
 8002b2e:	4833      	ldr	r0, [pc, #204]	; (8002bfc <_printf_i+0x240>)
 8002b30:	2778      	movs	r7, #120	; 0x78
 8002b32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	6829      	ldr	r1, [r5, #0]
 8002b3a:	061f      	lsls	r7, r3, #24
 8002b3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b40:	d402      	bmi.n	8002b48 <_printf_i+0x18c>
 8002b42:	065f      	lsls	r7, r3, #25
 8002b44:	bf48      	it	mi
 8002b46:	b2b6      	uxthmi	r6, r6
 8002b48:	07df      	lsls	r7, r3, #31
 8002b4a:	bf48      	it	mi
 8002b4c:	f043 0320 	orrmi.w	r3, r3, #32
 8002b50:	6029      	str	r1, [r5, #0]
 8002b52:	bf48      	it	mi
 8002b54:	6023      	strmi	r3, [r4, #0]
 8002b56:	b91e      	cbnz	r6, 8002b60 <_printf_i+0x1a4>
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	f023 0320 	bic.w	r3, r3, #32
 8002b5e:	6023      	str	r3, [r4, #0]
 8002b60:	2310      	movs	r3, #16
 8002b62:	e7a7      	b.n	8002ab4 <_printf_i+0xf8>
 8002b64:	4824      	ldr	r0, [pc, #144]	; (8002bf8 <_printf_i+0x23c>)
 8002b66:	e7e4      	b.n	8002b32 <_printf_i+0x176>
 8002b68:	4615      	mov	r5, r2
 8002b6a:	e7bd      	b.n	8002ae8 <_printf_i+0x12c>
 8002b6c:	682b      	ldr	r3, [r5, #0]
 8002b6e:	6826      	ldr	r6, [r4, #0]
 8002b70:	6961      	ldr	r1, [r4, #20]
 8002b72:	1d18      	adds	r0, r3, #4
 8002b74:	6028      	str	r0, [r5, #0]
 8002b76:	0635      	lsls	r5, r6, #24
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	d501      	bpl.n	8002b80 <_printf_i+0x1c4>
 8002b7c:	6019      	str	r1, [r3, #0]
 8002b7e:	e002      	b.n	8002b86 <_printf_i+0x1ca>
 8002b80:	0670      	lsls	r0, r6, #25
 8002b82:	d5fb      	bpl.n	8002b7c <_printf_i+0x1c0>
 8002b84:	8019      	strh	r1, [r3, #0]
 8002b86:	2300      	movs	r3, #0
 8002b88:	6123      	str	r3, [r4, #16]
 8002b8a:	4615      	mov	r5, r2
 8002b8c:	e7bc      	b.n	8002b08 <_printf_i+0x14c>
 8002b8e:	682b      	ldr	r3, [r5, #0]
 8002b90:	1d1a      	adds	r2, r3, #4
 8002b92:	602a      	str	r2, [r5, #0]
 8002b94:	681d      	ldr	r5, [r3, #0]
 8002b96:	6862      	ldr	r2, [r4, #4]
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f7fd fb20 	bl	80001e0 <memchr>
 8002ba0:	b108      	cbz	r0, 8002ba6 <_printf_i+0x1ea>
 8002ba2:	1b40      	subs	r0, r0, r5
 8002ba4:	6060      	str	r0, [r4, #4]
 8002ba6:	6863      	ldr	r3, [r4, #4]
 8002ba8:	6123      	str	r3, [r4, #16]
 8002baa:	2300      	movs	r3, #0
 8002bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bb0:	e7aa      	b.n	8002b08 <_printf_i+0x14c>
 8002bb2:	6923      	ldr	r3, [r4, #16]
 8002bb4:	462a      	mov	r2, r5
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	4640      	mov	r0, r8
 8002bba:	47d0      	blx	sl
 8002bbc:	3001      	adds	r0, #1
 8002bbe:	d0ad      	beq.n	8002b1c <_printf_i+0x160>
 8002bc0:	6823      	ldr	r3, [r4, #0]
 8002bc2:	079b      	lsls	r3, r3, #30
 8002bc4:	d413      	bmi.n	8002bee <_printf_i+0x232>
 8002bc6:	68e0      	ldr	r0, [r4, #12]
 8002bc8:	9b03      	ldr	r3, [sp, #12]
 8002bca:	4298      	cmp	r0, r3
 8002bcc:	bfb8      	it	lt
 8002bce:	4618      	movlt	r0, r3
 8002bd0:	e7a6      	b.n	8002b20 <_printf_i+0x164>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	4632      	mov	r2, r6
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	4640      	mov	r0, r8
 8002bda:	47d0      	blx	sl
 8002bdc:	3001      	adds	r0, #1
 8002bde:	d09d      	beq.n	8002b1c <_printf_i+0x160>
 8002be0:	3501      	adds	r5, #1
 8002be2:	68e3      	ldr	r3, [r4, #12]
 8002be4:	9903      	ldr	r1, [sp, #12]
 8002be6:	1a5b      	subs	r3, r3, r1
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	dcf2      	bgt.n	8002bd2 <_printf_i+0x216>
 8002bec:	e7eb      	b.n	8002bc6 <_printf_i+0x20a>
 8002bee:	2500      	movs	r5, #0
 8002bf0:	f104 0619 	add.w	r6, r4, #25
 8002bf4:	e7f5      	b.n	8002be2 <_printf_i+0x226>
 8002bf6:	bf00      	nop
 8002bf8:	08003009 	.word	0x08003009
 8002bfc:	0800301a 	.word	0x0800301a

08002c00 <__sflush_r>:
 8002c00:	898a      	ldrh	r2, [r1, #12]
 8002c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c06:	4605      	mov	r5, r0
 8002c08:	0710      	lsls	r0, r2, #28
 8002c0a:	460c      	mov	r4, r1
 8002c0c:	d458      	bmi.n	8002cc0 <__sflush_r+0xc0>
 8002c0e:	684b      	ldr	r3, [r1, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	dc05      	bgt.n	8002c20 <__sflush_r+0x20>
 8002c14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	dc02      	bgt.n	8002c20 <__sflush_r+0x20>
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c22:	2e00      	cmp	r6, #0
 8002c24:	d0f9      	beq.n	8002c1a <__sflush_r+0x1a>
 8002c26:	2300      	movs	r3, #0
 8002c28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002c2c:	682f      	ldr	r7, [r5, #0]
 8002c2e:	6a21      	ldr	r1, [r4, #32]
 8002c30:	602b      	str	r3, [r5, #0]
 8002c32:	d032      	beq.n	8002c9a <__sflush_r+0x9a>
 8002c34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c36:	89a3      	ldrh	r3, [r4, #12]
 8002c38:	075a      	lsls	r2, r3, #29
 8002c3a:	d505      	bpl.n	8002c48 <__sflush_r+0x48>
 8002c3c:	6863      	ldr	r3, [r4, #4]
 8002c3e:	1ac0      	subs	r0, r0, r3
 8002c40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c42:	b10b      	cbz	r3, 8002c48 <__sflush_r+0x48>
 8002c44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c46:	1ac0      	subs	r0, r0, r3
 8002c48:	2300      	movs	r3, #0
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c4e:	6a21      	ldr	r1, [r4, #32]
 8002c50:	4628      	mov	r0, r5
 8002c52:	47b0      	blx	r6
 8002c54:	1c43      	adds	r3, r0, #1
 8002c56:	89a3      	ldrh	r3, [r4, #12]
 8002c58:	d106      	bne.n	8002c68 <__sflush_r+0x68>
 8002c5a:	6829      	ldr	r1, [r5, #0]
 8002c5c:	291d      	cmp	r1, #29
 8002c5e:	d82b      	bhi.n	8002cb8 <__sflush_r+0xb8>
 8002c60:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <__sflush_r+0x108>)
 8002c62:	410a      	asrs	r2, r1
 8002c64:	07d6      	lsls	r6, r2, #31
 8002c66:	d427      	bmi.n	8002cb8 <__sflush_r+0xb8>
 8002c68:	2200      	movs	r2, #0
 8002c6a:	6062      	str	r2, [r4, #4]
 8002c6c:	04d9      	lsls	r1, r3, #19
 8002c6e:	6922      	ldr	r2, [r4, #16]
 8002c70:	6022      	str	r2, [r4, #0]
 8002c72:	d504      	bpl.n	8002c7e <__sflush_r+0x7e>
 8002c74:	1c42      	adds	r2, r0, #1
 8002c76:	d101      	bne.n	8002c7c <__sflush_r+0x7c>
 8002c78:	682b      	ldr	r3, [r5, #0]
 8002c7a:	b903      	cbnz	r3, 8002c7e <__sflush_r+0x7e>
 8002c7c:	6560      	str	r0, [r4, #84]	; 0x54
 8002c7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c80:	602f      	str	r7, [r5, #0]
 8002c82:	2900      	cmp	r1, #0
 8002c84:	d0c9      	beq.n	8002c1a <__sflush_r+0x1a>
 8002c86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c8a:	4299      	cmp	r1, r3
 8002c8c:	d002      	beq.n	8002c94 <__sflush_r+0x94>
 8002c8e:	4628      	mov	r0, r5
 8002c90:	f7ff fbea 	bl	8002468 <_free_r>
 8002c94:	2000      	movs	r0, #0
 8002c96:	6360      	str	r0, [r4, #52]	; 0x34
 8002c98:	e7c0      	b.n	8002c1c <__sflush_r+0x1c>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	47b0      	blx	r6
 8002ca0:	1c41      	adds	r1, r0, #1
 8002ca2:	d1c8      	bne.n	8002c36 <__sflush_r+0x36>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0c5      	beq.n	8002c36 <__sflush_r+0x36>
 8002caa:	2b1d      	cmp	r3, #29
 8002cac:	d001      	beq.n	8002cb2 <__sflush_r+0xb2>
 8002cae:	2b16      	cmp	r3, #22
 8002cb0:	d101      	bne.n	8002cb6 <__sflush_r+0xb6>
 8002cb2:	602f      	str	r7, [r5, #0]
 8002cb4:	e7b1      	b.n	8002c1a <__sflush_r+0x1a>
 8002cb6:	89a3      	ldrh	r3, [r4, #12]
 8002cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cbc:	81a3      	strh	r3, [r4, #12]
 8002cbe:	e7ad      	b.n	8002c1c <__sflush_r+0x1c>
 8002cc0:	690f      	ldr	r7, [r1, #16]
 8002cc2:	2f00      	cmp	r7, #0
 8002cc4:	d0a9      	beq.n	8002c1a <__sflush_r+0x1a>
 8002cc6:	0793      	lsls	r3, r2, #30
 8002cc8:	680e      	ldr	r6, [r1, #0]
 8002cca:	bf08      	it	eq
 8002ccc:	694b      	ldreq	r3, [r1, #20]
 8002cce:	600f      	str	r7, [r1, #0]
 8002cd0:	bf18      	it	ne
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	eba6 0807 	sub.w	r8, r6, r7
 8002cd8:	608b      	str	r3, [r1, #8]
 8002cda:	f1b8 0f00 	cmp.w	r8, #0
 8002cde:	dd9c      	ble.n	8002c1a <__sflush_r+0x1a>
 8002ce0:	6a21      	ldr	r1, [r4, #32]
 8002ce2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ce4:	4643      	mov	r3, r8
 8002ce6:	463a      	mov	r2, r7
 8002ce8:	4628      	mov	r0, r5
 8002cea:	47b0      	blx	r6
 8002cec:	2800      	cmp	r0, #0
 8002cee:	dc06      	bgt.n	8002cfe <__sflush_r+0xfe>
 8002cf0:	89a3      	ldrh	r3, [r4, #12]
 8002cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cf6:	81a3      	strh	r3, [r4, #12]
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	e78e      	b.n	8002c1c <__sflush_r+0x1c>
 8002cfe:	4407      	add	r7, r0
 8002d00:	eba8 0800 	sub.w	r8, r8, r0
 8002d04:	e7e9      	b.n	8002cda <__sflush_r+0xda>
 8002d06:	bf00      	nop
 8002d08:	dfbffffe 	.word	0xdfbffffe

08002d0c <_fflush_r>:
 8002d0c:	b538      	push	{r3, r4, r5, lr}
 8002d0e:	690b      	ldr	r3, [r1, #16]
 8002d10:	4605      	mov	r5, r0
 8002d12:	460c      	mov	r4, r1
 8002d14:	b913      	cbnz	r3, 8002d1c <_fflush_r+0x10>
 8002d16:	2500      	movs	r5, #0
 8002d18:	4628      	mov	r0, r5
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}
 8002d1c:	b118      	cbz	r0, 8002d26 <_fflush_r+0x1a>
 8002d1e:	6a03      	ldr	r3, [r0, #32]
 8002d20:	b90b      	cbnz	r3, 8002d26 <_fflush_r+0x1a>
 8002d22:	f7ff fa99 	bl	8002258 <__sinit>
 8002d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f3      	beq.n	8002d16 <_fflush_r+0xa>
 8002d2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d30:	07d0      	lsls	r0, r2, #31
 8002d32:	d404      	bmi.n	8002d3e <_fflush_r+0x32>
 8002d34:	0599      	lsls	r1, r3, #22
 8002d36:	d402      	bmi.n	8002d3e <_fflush_r+0x32>
 8002d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d3a:	f7ff fb92 	bl	8002462 <__retarget_lock_acquire_recursive>
 8002d3e:	4628      	mov	r0, r5
 8002d40:	4621      	mov	r1, r4
 8002d42:	f7ff ff5d 	bl	8002c00 <__sflush_r>
 8002d46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d48:	07da      	lsls	r2, r3, #31
 8002d4a:	4605      	mov	r5, r0
 8002d4c:	d4e4      	bmi.n	8002d18 <_fflush_r+0xc>
 8002d4e:	89a3      	ldrh	r3, [r4, #12]
 8002d50:	059b      	lsls	r3, r3, #22
 8002d52:	d4e1      	bmi.n	8002d18 <_fflush_r+0xc>
 8002d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d56:	f7ff fb85 	bl	8002464 <__retarget_lock_release_recursive>
 8002d5a:	e7dd      	b.n	8002d18 <_fflush_r+0xc>

08002d5c <__swbuf_r>:
 8002d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5e:	460e      	mov	r6, r1
 8002d60:	4614      	mov	r4, r2
 8002d62:	4605      	mov	r5, r0
 8002d64:	b118      	cbz	r0, 8002d6e <__swbuf_r+0x12>
 8002d66:	6a03      	ldr	r3, [r0, #32]
 8002d68:	b90b      	cbnz	r3, 8002d6e <__swbuf_r+0x12>
 8002d6a:	f7ff fa75 	bl	8002258 <__sinit>
 8002d6e:	69a3      	ldr	r3, [r4, #24]
 8002d70:	60a3      	str	r3, [r4, #8]
 8002d72:	89a3      	ldrh	r3, [r4, #12]
 8002d74:	071a      	lsls	r2, r3, #28
 8002d76:	d525      	bpl.n	8002dc4 <__swbuf_r+0x68>
 8002d78:	6923      	ldr	r3, [r4, #16]
 8002d7a:	b31b      	cbz	r3, 8002dc4 <__swbuf_r+0x68>
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	6922      	ldr	r2, [r4, #16]
 8002d80:	1a98      	subs	r0, r3, r2
 8002d82:	6963      	ldr	r3, [r4, #20]
 8002d84:	b2f6      	uxtb	r6, r6
 8002d86:	4283      	cmp	r3, r0
 8002d88:	4637      	mov	r7, r6
 8002d8a:	dc04      	bgt.n	8002d96 <__swbuf_r+0x3a>
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	4628      	mov	r0, r5
 8002d90:	f7ff ffbc 	bl	8002d0c <_fflush_r>
 8002d94:	b9e0      	cbnz	r0, 8002dd0 <__swbuf_r+0x74>
 8002d96:	68a3      	ldr	r3, [r4, #8]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	60a3      	str	r3, [r4, #8]
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	6022      	str	r2, [r4, #0]
 8002da2:	701e      	strb	r6, [r3, #0]
 8002da4:	6962      	ldr	r2, [r4, #20]
 8002da6:	1c43      	adds	r3, r0, #1
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d004      	beq.n	8002db6 <__swbuf_r+0x5a>
 8002dac:	89a3      	ldrh	r3, [r4, #12]
 8002dae:	07db      	lsls	r3, r3, #31
 8002db0:	d506      	bpl.n	8002dc0 <__swbuf_r+0x64>
 8002db2:	2e0a      	cmp	r6, #10
 8002db4:	d104      	bne.n	8002dc0 <__swbuf_r+0x64>
 8002db6:	4621      	mov	r1, r4
 8002db8:	4628      	mov	r0, r5
 8002dba:	f7ff ffa7 	bl	8002d0c <_fflush_r>
 8002dbe:	b938      	cbnz	r0, 8002dd0 <__swbuf_r+0x74>
 8002dc0:	4638      	mov	r0, r7
 8002dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	f000 f806 	bl	8002dd8 <__swsetup_r>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d0d5      	beq.n	8002d7c <__swbuf_r+0x20>
 8002dd0:	f04f 37ff 	mov.w	r7, #4294967295
 8002dd4:	e7f4      	b.n	8002dc0 <__swbuf_r+0x64>
	...

08002dd8 <__swsetup_r>:
 8002dd8:	b538      	push	{r3, r4, r5, lr}
 8002dda:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <__swsetup_r+0xac>)
 8002ddc:	4605      	mov	r5, r0
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	460c      	mov	r4, r1
 8002de2:	b118      	cbz	r0, 8002dec <__swsetup_r+0x14>
 8002de4:	6a03      	ldr	r3, [r0, #32]
 8002de6:	b90b      	cbnz	r3, 8002dec <__swsetup_r+0x14>
 8002de8:	f7ff fa36 	bl	8002258 <__sinit>
 8002dec:	89a3      	ldrh	r3, [r4, #12]
 8002dee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002df2:	0718      	lsls	r0, r3, #28
 8002df4:	d422      	bmi.n	8002e3c <__swsetup_r+0x64>
 8002df6:	06d9      	lsls	r1, r3, #27
 8002df8:	d407      	bmi.n	8002e0a <__swsetup_r+0x32>
 8002dfa:	2309      	movs	r3, #9
 8002dfc:	602b      	str	r3, [r5, #0]
 8002dfe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e02:	81a3      	strh	r3, [r4, #12]
 8002e04:	f04f 30ff 	mov.w	r0, #4294967295
 8002e08:	e034      	b.n	8002e74 <__swsetup_r+0x9c>
 8002e0a:	0758      	lsls	r0, r3, #29
 8002e0c:	d512      	bpl.n	8002e34 <__swsetup_r+0x5c>
 8002e0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e10:	b141      	cbz	r1, 8002e24 <__swsetup_r+0x4c>
 8002e12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e16:	4299      	cmp	r1, r3
 8002e18:	d002      	beq.n	8002e20 <__swsetup_r+0x48>
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	f7ff fb24 	bl	8002468 <_free_r>
 8002e20:	2300      	movs	r3, #0
 8002e22:	6363      	str	r3, [r4, #52]	; 0x34
 8002e24:	89a3      	ldrh	r3, [r4, #12]
 8002e26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e2a:	81a3      	strh	r3, [r4, #12]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	6063      	str	r3, [r4, #4]
 8002e30:	6923      	ldr	r3, [r4, #16]
 8002e32:	6023      	str	r3, [r4, #0]
 8002e34:	89a3      	ldrh	r3, [r4, #12]
 8002e36:	f043 0308 	orr.w	r3, r3, #8
 8002e3a:	81a3      	strh	r3, [r4, #12]
 8002e3c:	6923      	ldr	r3, [r4, #16]
 8002e3e:	b94b      	cbnz	r3, 8002e54 <__swsetup_r+0x7c>
 8002e40:	89a3      	ldrh	r3, [r4, #12]
 8002e42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e4a:	d003      	beq.n	8002e54 <__swsetup_r+0x7c>
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	4628      	mov	r0, r5
 8002e50:	f000 f850 	bl	8002ef4 <__smakebuf_r>
 8002e54:	89a0      	ldrh	r0, [r4, #12]
 8002e56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e5a:	f010 0301 	ands.w	r3, r0, #1
 8002e5e:	d00a      	beq.n	8002e76 <__swsetup_r+0x9e>
 8002e60:	2300      	movs	r3, #0
 8002e62:	60a3      	str	r3, [r4, #8]
 8002e64:	6963      	ldr	r3, [r4, #20]
 8002e66:	425b      	negs	r3, r3
 8002e68:	61a3      	str	r3, [r4, #24]
 8002e6a:	6923      	ldr	r3, [r4, #16]
 8002e6c:	b943      	cbnz	r3, 8002e80 <__swsetup_r+0xa8>
 8002e6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e72:	d1c4      	bne.n	8002dfe <__swsetup_r+0x26>
 8002e74:	bd38      	pop	{r3, r4, r5, pc}
 8002e76:	0781      	lsls	r1, r0, #30
 8002e78:	bf58      	it	pl
 8002e7a:	6963      	ldrpl	r3, [r4, #20]
 8002e7c:	60a3      	str	r3, [r4, #8]
 8002e7e:	e7f4      	b.n	8002e6a <__swsetup_r+0x92>
 8002e80:	2000      	movs	r0, #0
 8002e82:	e7f7      	b.n	8002e74 <__swsetup_r+0x9c>
 8002e84:	20000064 	.word	0x20000064

08002e88 <_sbrk_r>:
 8002e88:	b538      	push	{r3, r4, r5, lr}
 8002e8a:	4d06      	ldr	r5, [pc, #24]	; (8002ea4 <_sbrk_r+0x1c>)
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	4604      	mov	r4, r0
 8002e90:	4608      	mov	r0, r1
 8002e92:	602b      	str	r3, [r5, #0]
 8002e94:	f7fd ffea 	bl	8000e6c <_sbrk>
 8002e98:	1c43      	adds	r3, r0, #1
 8002e9a:	d102      	bne.n	8002ea2 <_sbrk_r+0x1a>
 8002e9c:	682b      	ldr	r3, [r5, #0]
 8002e9e:	b103      	cbz	r3, 8002ea2 <_sbrk_r+0x1a>
 8002ea0:	6023      	str	r3, [r4, #0]
 8002ea2:	bd38      	pop	{r3, r4, r5, pc}
 8002ea4:	2000021c 	.word	0x2000021c

08002ea8 <__swhatbuf_r>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	460c      	mov	r4, r1
 8002eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eb0:	2900      	cmp	r1, #0
 8002eb2:	b096      	sub	sp, #88	; 0x58
 8002eb4:	4615      	mov	r5, r2
 8002eb6:	461e      	mov	r6, r3
 8002eb8:	da0d      	bge.n	8002ed6 <__swhatbuf_r+0x2e>
 8002eba:	89a3      	ldrh	r3, [r4, #12]
 8002ebc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ec0:	f04f 0100 	mov.w	r1, #0
 8002ec4:	bf0c      	ite	eq
 8002ec6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002eca:	2340      	movne	r3, #64	; 0x40
 8002ecc:	2000      	movs	r0, #0
 8002ece:	6031      	str	r1, [r6, #0]
 8002ed0:	602b      	str	r3, [r5, #0]
 8002ed2:	b016      	add	sp, #88	; 0x58
 8002ed4:	bd70      	pop	{r4, r5, r6, pc}
 8002ed6:	466a      	mov	r2, sp
 8002ed8:	f000 f848 	bl	8002f6c <_fstat_r>
 8002edc:	2800      	cmp	r0, #0
 8002ede:	dbec      	blt.n	8002eba <__swhatbuf_r+0x12>
 8002ee0:	9901      	ldr	r1, [sp, #4]
 8002ee2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002ee6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002eea:	4259      	negs	r1, r3
 8002eec:	4159      	adcs	r1, r3
 8002eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ef2:	e7eb      	b.n	8002ecc <__swhatbuf_r+0x24>

08002ef4 <__smakebuf_r>:
 8002ef4:	898b      	ldrh	r3, [r1, #12]
 8002ef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ef8:	079d      	lsls	r5, r3, #30
 8002efa:	4606      	mov	r6, r0
 8002efc:	460c      	mov	r4, r1
 8002efe:	d507      	bpl.n	8002f10 <__smakebuf_r+0x1c>
 8002f00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	6123      	str	r3, [r4, #16]
 8002f08:	2301      	movs	r3, #1
 8002f0a:	6163      	str	r3, [r4, #20]
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd70      	pop	{r4, r5, r6, pc}
 8002f10:	ab01      	add	r3, sp, #4
 8002f12:	466a      	mov	r2, sp
 8002f14:	f7ff ffc8 	bl	8002ea8 <__swhatbuf_r>
 8002f18:	9900      	ldr	r1, [sp, #0]
 8002f1a:	4605      	mov	r5, r0
 8002f1c:	4630      	mov	r0, r6
 8002f1e:	f7ff fb0f 	bl	8002540 <_malloc_r>
 8002f22:	b948      	cbnz	r0, 8002f38 <__smakebuf_r+0x44>
 8002f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f28:	059a      	lsls	r2, r3, #22
 8002f2a:	d4ef      	bmi.n	8002f0c <__smakebuf_r+0x18>
 8002f2c:	f023 0303 	bic.w	r3, r3, #3
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	81a3      	strh	r3, [r4, #12]
 8002f36:	e7e3      	b.n	8002f00 <__smakebuf_r+0xc>
 8002f38:	89a3      	ldrh	r3, [r4, #12]
 8002f3a:	6020      	str	r0, [r4, #0]
 8002f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f40:	81a3      	strh	r3, [r4, #12]
 8002f42:	9b00      	ldr	r3, [sp, #0]
 8002f44:	6163      	str	r3, [r4, #20]
 8002f46:	9b01      	ldr	r3, [sp, #4]
 8002f48:	6120      	str	r0, [r4, #16]
 8002f4a:	b15b      	cbz	r3, 8002f64 <__smakebuf_r+0x70>
 8002f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f50:	4630      	mov	r0, r6
 8002f52:	f000 f81d 	bl	8002f90 <_isatty_r>
 8002f56:	b128      	cbz	r0, 8002f64 <__smakebuf_r+0x70>
 8002f58:	89a3      	ldrh	r3, [r4, #12]
 8002f5a:	f023 0303 	bic.w	r3, r3, #3
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	81a3      	strh	r3, [r4, #12]
 8002f64:	89a3      	ldrh	r3, [r4, #12]
 8002f66:	431d      	orrs	r5, r3
 8002f68:	81a5      	strh	r5, [r4, #12]
 8002f6a:	e7cf      	b.n	8002f0c <__smakebuf_r+0x18>

08002f6c <_fstat_r>:
 8002f6c:	b538      	push	{r3, r4, r5, lr}
 8002f6e:	4d07      	ldr	r5, [pc, #28]	; (8002f8c <_fstat_r+0x20>)
 8002f70:	2300      	movs	r3, #0
 8002f72:	4604      	mov	r4, r0
 8002f74:	4608      	mov	r0, r1
 8002f76:	4611      	mov	r1, r2
 8002f78:	602b      	str	r3, [r5, #0]
 8002f7a:	f7fd ff4e 	bl	8000e1a <_fstat>
 8002f7e:	1c43      	adds	r3, r0, #1
 8002f80:	d102      	bne.n	8002f88 <_fstat_r+0x1c>
 8002f82:	682b      	ldr	r3, [r5, #0]
 8002f84:	b103      	cbz	r3, 8002f88 <_fstat_r+0x1c>
 8002f86:	6023      	str	r3, [r4, #0]
 8002f88:	bd38      	pop	{r3, r4, r5, pc}
 8002f8a:	bf00      	nop
 8002f8c:	2000021c 	.word	0x2000021c

08002f90 <_isatty_r>:
 8002f90:	b538      	push	{r3, r4, r5, lr}
 8002f92:	4d06      	ldr	r5, [pc, #24]	; (8002fac <_isatty_r+0x1c>)
 8002f94:	2300      	movs	r3, #0
 8002f96:	4604      	mov	r4, r0
 8002f98:	4608      	mov	r0, r1
 8002f9a:	602b      	str	r3, [r5, #0]
 8002f9c:	f7fd ff4d 	bl	8000e3a <_isatty>
 8002fa0:	1c43      	adds	r3, r0, #1
 8002fa2:	d102      	bne.n	8002faa <_isatty_r+0x1a>
 8002fa4:	682b      	ldr	r3, [r5, #0]
 8002fa6:	b103      	cbz	r3, 8002faa <_isatty_r+0x1a>
 8002fa8:	6023      	str	r3, [r4, #0]
 8002faa:	bd38      	pop	{r3, r4, r5, pc}
 8002fac:	2000021c 	.word	0x2000021c

08002fb0 <_init>:
 8002fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb2:	bf00      	nop
 8002fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb6:	bc08      	pop	{r3}
 8002fb8:	469e      	mov	lr, r3
 8002fba:	4770      	bx	lr

08002fbc <_fini>:
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fbe:	bf00      	nop
 8002fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc2:	bc08      	pop	{r3}
 8002fc4:	469e      	mov	lr, r3
 8002fc6:	4770      	bx	lr
